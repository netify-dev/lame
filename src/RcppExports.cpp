// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Xbeta_cpp
arma::mat Xbeta_cpp(const arma::cube& X, const arma::vec& beta);
RcppExport SEXP _lame_Xbeta_cpp(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(Xbeta_cpp(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// outer_cpp
arma::mat outer_cpp(const arma::vec& a, const arma::vec& b);
RcppExport SEXP _lame_outer_cpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_cpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gof_stats_cpp
arma::mat gof_stats_cpp(const arma::mat& Y);
RcppExport SEXP _lame_gof_stats_cpp(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(gof_stats_cpp(Y));
    return rcpp_result_gen;
END_RCPP
}
// sample_dynamic_ab_cpp
List sample_dynamic_ab_cpp(arma::mat a_current, arma::mat b_current, const arma::cube& Z_array, const arma::cube& EZ_array, double rho_ab, double sigma_ab, const arma::mat& Sab, bool symmetric);
RcppExport SEXP _lame_sample_dynamic_ab_cpp(SEXP a_currentSEXP, SEXP b_currentSEXP, SEXP Z_arraySEXP, SEXP EZ_arraySEXP, SEXP rho_abSEXP, SEXP sigma_abSEXP, SEXP SabSEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a_current(a_currentSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b_current(b_currentSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_array(Z_arraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type EZ_array(EZ_arraySEXP);
    Rcpp::traits::input_parameter< double >::type rho_ab(rho_abSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_ab(sigma_abSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sab(SabSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_dynamic_ab_cpp(a_current, b_current, Z_array, EZ_array, rho_ab, sigma_ab, Sab, symmetric));
    return rcpp_result_gen;
END_RCPP
}
// sample_rho_ab_cpp
double sample_rho_ab_cpp(const arma::mat& a_mat, const arma::mat& b_mat, double sigma_ab, double rho_current, bool symmetric);
RcppExport SEXP _lame_sample_rho_ab_cpp(SEXP a_matSEXP, SEXP b_matSEXP, SEXP sigma_abSEXP, SEXP rho_currentSEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type a_mat(a_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b_mat(b_matSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_ab(sigma_abSEXP);
    Rcpp::traits::input_parameter< double >::type rho_current(rho_currentSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_rho_ab_cpp(a_mat, b_mat, sigma_ab, rho_current, symmetric));
    return rcpp_result_gen;
END_RCPP
}
// sample_sigma_ab_cpp
double sample_sigma_ab_cpp(const arma::mat& a_mat, const arma::mat& b_mat, double rho_ab, bool symmetric, double prior_shape, double prior_scale);
RcppExport SEXP _lame_sample_sigma_ab_cpp(SEXP a_matSEXP, SEXP b_matSEXP, SEXP rho_abSEXP, SEXP symmetricSEXP, SEXP prior_shapeSEXP, SEXP prior_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type a_mat(a_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b_mat(b_matSEXP);
    Rcpp::traits::input_parameter< double >::type rho_ab(rho_abSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< double >::type prior_shape(prior_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type prior_scale(prior_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_sigma_ab_cpp(a_mat, b_mat, rho_ab, symmetric, prior_shape, prior_scale));
    return rcpp_result_gen;
END_RCPP
}
// init_dynamic_ab_cpp
List init_dynamic_ab_cpp(int n, int T, double rho_ab, double sigma_ab, double mean_a, double mean_b);
RcppExport SEXP _lame_init_dynamic_ab_cpp(SEXP nSEXP, SEXP TSEXP, SEXP rho_abSEXP, SEXP sigma_abSEXP, SEXP mean_aSEXP, SEXP mean_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type rho_ab(rho_abSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_ab(sigma_abSEXP);
    Rcpp::traits::input_parameter< double >::type mean_a(mean_aSEXP);
    Rcpp::traits::input_parameter< double >::type mean_b(mean_bSEXP);
    rcpp_result_gen = Rcpp::wrap(init_dynamic_ab_cpp(n, T, rho_ab, sigma_ab, mean_a, mean_b));
    return rcpp_result_gen;
END_RCPP
}
// rUV_dynamic_fc_cpp
List rUV_dynamic_fc_cpp(arma::cube U_current, arma::cube V_current, const arma::cube& ET, double rho_uv, double sigma_uv, double s2, bool shrink, bool symmetric);
RcppExport SEXP _lame_rUV_dynamic_fc_cpp(SEXP U_currentSEXP, SEXP V_currentSEXP, SEXP ETSEXP, SEXP rho_uvSEXP, SEXP sigma_uvSEXP, SEXP s2SEXP, SEXP shrinkSEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type U_current(U_currentSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type V_current(V_currentSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type ET(ETSEXP);
    Rcpp::traits::input_parameter< double >::type rho_uv(rho_uvSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_uv(sigma_uvSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< bool >::type shrink(shrinkSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(rUV_dynamic_fc_cpp(U_current, V_current, ET, rho_uv, sigma_uv, s2, shrink, symmetric));
    return rcpp_result_gen;
END_RCPP
}
// init_dynamic_positions
arma::cube init_dynamic_positions(int n, int R, int T, double rho_uv, double sigma_uv);
RcppExport SEXP _lame_init_dynamic_positions(SEXP nSEXP, SEXP RSEXP, SEXP TSEXP, SEXP rho_uvSEXP, SEXP sigma_uvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type rho_uv(rho_uvSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_uv(sigma_uvSEXP);
    rcpp_result_gen = Rcpp::wrap(init_dynamic_positions(n, R, T, rho_uv, sigma_uv));
    return rcpp_result_gen;
END_RCPP
}
// sample_rho_uv
double sample_rho_uv(const arma::cube& U_cube, const arma::cube& V_cube, double sigma_uv, double rho_current, bool symmetric);
RcppExport SEXP _lame_sample_rho_uv(SEXP U_cubeSEXP, SEXP V_cubeSEXP, SEXP sigma_uvSEXP, SEXP rho_currentSEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type U_cube(U_cubeSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type V_cube(V_cubeSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_uv(sigma_uvSEXP);
    Rcpp::traits::input_parameter< double >::type rho_current(rho_currentSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_rho_uv(U_cube, V_cube, sigma_uv, rho_current, symmetric));
    return rcpp_result_gen;
END_RCPP
}
// sample_sigma_uv
double sample_sigma_uv(const arma::cube& U_cube, const arma::cube& V_cube, double rho_uv, bool symmetric);
RcppExport SEXP _lame_sample_sigma_uv(SEXP U_cubeSEXP, SEXP V_cubeSEXP, SEXP rho_uvSEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type U_cube(U_cubeSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type V_cube(V_cubeSEXP);
    Rcpp::traits::input_parameter< double >::type rho_uv(rho_uvSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_sigma_uv(U_cube, V_cube, rho_uv, symmetric));
    return rcpp_result_gen;
END_RCPP
}
// count_four_cycles_bip_cpp
arma::vec count_four_cycles_bip_cpp(const arma::cube& Y);
RcppExport SEXP _lame_count_four_cycles_bip_cpp(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(count_four_cycles_bip_cpp(Y));
    return rcpp_result_gen;
END_RCPP
}
// compute_degrees_bip_cpp
List compute_degrees_bip_cpp(const arma::cube& Y);
RcppExport SEXP _lame_compute_degrees_bip_cpp(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_degrees_bip_cpp(Y));
    return rcpp_result_gen;
END_RCPP
}
// clustering_coef_bip_cpp
arma::vec clustering_coef_bip_cpp(const arma::cube& Y);
RcppExport SEXP _lame_clustering_coef_bip_cpp(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(clustering_coef_bip_cpp(Y));
    return rcpp_result_gen;
END_RCPP
}
// get_EZ_bip_cpp
arma::cube get_EZ_bip_cpp(const arma::cube& base, const arma::mat& a, const arma::mat& b, const arma::cube& U, const arma::cube& V, const arma::mat& G);
RcppExport SEXP _lame_get_EZ_bip_cpp(SEXP baseSEXP, SEXP aSEXP, SEXP bSEXP, SEXP USEXP, SEXP VSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type base(baseSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(get_EZ_bip_cpp(base, a, b, U, V, G));
    return rcpp_result_gen;
END_RCPP
}
// outer_ab_bip_cpp
arma::cube outer_ab_bip_cpp(const arma::mat& a, const arma::mat& b);
RcppExport SEXP _lame_outer_ab_bip_cpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_ab_bip_cpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// get_EZ_cpp
arma::cube get_EZ_cpp(Rcpp::List Xlist, arma::vec beta, arma::mat ab, arma::mat U, arma::mat V);
RcppExport SEXP _lame_get_EZ_cpp(SEXP XlistSEXP, SEXP betaSEXP, SEXP abSEXP, SEXP USEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ab(abSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(get_EZ_cpp(Xlist, beta, ab, U, V));
    return rcpp_result_gen;
END_RCPP
}
// ldZgbme_cpp
arma::mat ldZgbme_cpp(const arma::mat& Z, const arma::mat& Y, const arma::mat& EZ, double rho, double s2);
RcppExport SEXP _lame_ldZgbme_cpp(SEXP ZSEXP, SEXP YSEXP, SEXP EZSEXP, SEXP rhoSEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(ldZgbme_cpp(Z, Y, EZ, rho, s2));
    return rcpp_result_gen;
END_RCPP
}
// rZ_pois_fc_cpp
arma::mat rZ_pois_fc_cpp(const arma::mat& Z, const arma::mat& EZ, double rho, double s2, const arma::mat& Y);
RcppExport SEXP _lame_rZ_pois_fc_cpp(SEXP ZSEXP, SEXP EZSEXP, SEXP rhoSEXP, SEXP s2SEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(rZ_pois_fc_cpp(Z, EZ, rho, s2, Y));
    return rcpp_result_gen;
END_RCPP
}
// ldZgbme_nrm_cpp
arma::mat ldZgbme_nrm_cpp(const arma::mat& Z, const arma::mat& Y, const arma::mat& EZ, double rho, double s2);
RcppExport SEXP _lame_ldZgbme_nrm_cpp(SEXP ZSEXP, SEXP YSEXP, SEXP EZSEXP, SEXP rhoSEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(ldZgbme_nrm_cpp(Z, Y, EZ, rho, s2));
    return rcpp_result_gen;
END_RCPP
}
// simY_pois
arma::mat simY_pois(const arma::mat& EZ);
RcppExport SEXP _lame_simY_pois(SEXP EZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type EZ(EZSEXP);
    rcpp_result_gen = Rcpp::wrap(simY_pois(EZ));
    return rcpp_result_gen;
END_RCPP
}
// rwish_cpp
arma::mat rwish_cpp(const arma::mat& S0, int nu);
RcppExport SEXP _lame_rwish_cpp(SEXP S0SEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(rwish_cpp(S0, nu));
    return rcpp_result_gen;
END_RCPP
}
// rUV_rep_fc_cpp
List rUV_rep_fc_cpp(const arma::cube& ET, arma::mat U, arma::mat V, double rho, double s2, const arma::mat& iSe2, double maxmargin, bool shrink, const NumericVector& rLoopIDs);
RcppExport SEXP _lame_rUV_rep_fc_cpp(SEXP ETSEXP, SEXP USEXP, SEXP VSEXP, SEXP rhoSEXP, SEXP s2SEXP, SEXP iSe2SEXP, SEXP maxmarginSEXP, SEXP shrinkSEXP, SEXP rLoopIDsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type ET(ETSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type iSe2(iSe2SEXP);
    Rcpp::traits::input_parameter< double >::type maxmargin(maxmarginSEXP);
    Rcpp::traits::input_parameter< bool >::type shrink(shrinkSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rLoopIDs(rLoopIDsSEXP);
    rcpp_result_gen = Rcpp::wrap(rUV_rep_fc_cpp(ET, U, V, rho, s2, iSe2, maxmargin, shrink, rLoopIDs));
    return rcpp_result_gen;
END_RCPP
}
// rUV_sym_fc_cpp
List rUV_sym_fc_cpp(arma::mat E, arma::mat U, arma::mat V, double s2, bool shrink, NumericVector uLoopIDs);
RcppExport SEXP _lame_rUV_sym_fc_cpp(SEXP ESEXP, SEXP USEXP, SEXP VSEXP, SEXP s2SEXP, SEXP shrinkSEXP, SEXP uLoopIDsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< bool >::type shrink(shrinkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type uLoopIDs(uLoopIDsSEXP);
    rcpp_result_gen = Rcpp::wrap(rUV_sym_fc_cpp(E, U, V, s2, shrink, uLoopIDs));
    return rcpp_result_gen;
END_RCPP
}
// rZ_bin_fc_cpp
arma::cube rZ_bin_fc_cpp(arma::cube ZT, arma::cube EZT, double rho, arma::cube YT);
RcppExport SEXP _lame_rZ_bin_fc_cpp(SEXP ZTSEXP, SEXP EZTSEXP, SEXP rhoSEXP, SEXP YTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ZT(ZTSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type EZT(EZTSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type YT(YTSEXP);
    rcpp_result_gen = Rcpp::wrap(rZ_bin_fc_cpp(ZT, EZT, rho, YT));
    return rcpp_result_gen;
END_RCPP
}
// rZ_bin_fc_single
arma::mat rZ_bin_fc_single(const arma::mat& Z, const arma::mat& EZ, double rho, const arma::mat& Y);
RcppExport SEXP _lame_rZ_bin_fc_single(SEXP ZSEXP, SEXP EZSEXP, SEXP rhoSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(rZ_bin_fc_single(Z, EZ, rho, Y));
    return rcpp_result_gen;
END_RCPP
}
// rZ_bin_fc_exact
arma::mat rZ_bin_fc_exact(arma::mat Z, const arma::mat& EZ, double rho, arma::mat Y);
RcppExport SEXP _lame_rZ_bin_fc_exact(SEXP ZSEXP, SEXP EZSEXP, SEXP rhoSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(rZ_bin_fc_exact(Z, EZ, rho, Y));
    return rcpp_result_gen;
END_RCPP
}
// rZ_bin_fc_fixed
arma::mat rZ_bin_fc_fixed(arma::mat Z, const arma::mat& EZ, double rho, arma::mat Y);
RcppExport SEXP _lame_rZ_bin_fc_fixed(SEXP ZSEXP, SEXP EZSEXP, SEXP rhoSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(rZ_bin_fc_fixed(Z, EZ, rho, Y));
    return rcpp_result_gen;
END_RCPP
}
// rbeta_ab_rep_fc_cpp
List rbeta_ab_rep_fc_cpp(arma::cube ZT, arma::cube Xr, arma::cube Xc, arma::cube mX, arma::cube mXt, arma::cube XX, arma::cube XXt, arma::mat iSe2, arma::mat Sabs, int k, arma::mat G, double g);
RcppExport SEXP _lame_rbeta_ab_rep_fc_cpp(SEXP ZTSEXP, SEXP XrSEXP, SEXP XcSEXP, SEXP mXSEXP, SEXP mXtSEXP, SEXP XXSEXP, SEXP XXtSEXP, SEXP iSe2SEXP, SEXP SabsSEXP, SEXP kSEXP, SEXP GSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ZT(ZTSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mXt(mXtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type XXt(XXtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type iSe2(iSe2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sabs(SabsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rbeta_ab_rep_fc_cpp(ZT, Xr, Xc, mX, mXt, XX, XXt, iSe2, Sabs, k, G, g));
    return rcpp_result_gen;
END_RCPP
}
// test_rbeta_inputs
void test_rbeta_inputs(arma::cube ZT, arma::cube Xr, arma::cube Xc, arma::cube mX, arma::cube mXt, arma::cube XX, arma::cube XXt, arma::mat iSe2, arma::mat Sabs, int k, arma::mat G, double g);
RcppExport SEXP _lame_test_rbeta_inputs(SEXP ZTSEXP, SEXP XrSEXP, SEXP XcSEXP, SEXP mXSEXP, SEXP mXtSEXP, SEXP XXSEXP, SEXP XXtSEXP, SEXP iSe2SEXP, SEXP SabsSEXP, SEXP kSEXP, SEXP GSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ZT(ZTSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mXt(mXtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type XXt(XXtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type iSe2(iSe2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sabs(SabsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    test_rbeta_inputs(ZT, Xr, Xc, mX, mXt, XX, XXt, iSe2, Sabs, k, G, g);
    return R_NilValue;
END_RCPP
}
// rrho_mh_rep_cpp
double rrho_mh_rep_cpp(arma::cube ET, double rho, double s2);
RcppExport SEXP _lame_rrho_mh_rep_cpp(SEXP ETSEXP, SEXP rhoSEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ET(ETSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(rrho_mh_rep_cpp(ET, rho, s2));
    return rcpp_result_gen;
END_RCPP
}
// rs2_rep_fc_cpp
double rs2_rep_fc_cpp(arma::cube ET, arma::mat rhoMat);
RcppExport SEXP _lame_rs2_rep_fc_cpp(SEXP ETSEXP, SEXP rhoMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type ET(ETSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rhoMat(rhoMatSEXP);
    rcpp_result_gen = Rcpp::wrap(rs2_rep_fc_cpp(ET, rhoMat));
    return rcpp_result_gen;
END_RCPP
}
// sample_U_bip_cpp
arma::cube sample_U_bip_cpp(const arma::cube& R, const arma::cube& V, const arma::mat& G, const arma::vec& lambdaU, const arma::vec& s2);
RcppExport SEXP _lame_sample_U_bip_cpp(SEXP RSEXP, SEXP VSEXP, SEXP GSEXP, SEXP lambdaUSEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaU(lambdaUSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_U_bip_cpp(R, V, G, lambdaU, s2));
    return rcpp_result_gen;
END_RCPP
}
// sample_V_bip_cpp
arma::cube sample_V_bip_cpp(const arma::cube& R, const arma::cube& U, const arma::mat& G, const arma::vec& lambdaV, const arma::vec& s2);
RcppExport SEXP _lame_sample_V_bip_cpp(SEXP RSEXP, SEXP USEXP, SEXP GSEXP, SEXP lambdaVSEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdaV(lambdaVSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_V_bip_cpp(R, U, G, lambdaV, s2));
    return rcpp_result_gen;
END_RCPP
}
// sample_G_bip_cpp
arma::mat sample_G_bip_cpp(const arma::cube& R, const arma::cube& U, const arma::cube& V, const double lambdaG, const arma::vec& s2);
RcppExport SEXP _lame_sample_G_bip_cpp(SEXP RSEXP, SEXP USEXP, SEXP VSEXP, SEXP lambdaGSEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const double >::type lambdaG(lambdaGSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_G_bip_cpp(R, U, V, lambdaG, s2));
    return rcpp_result_gen;
END_RCPP
}
// canon_orient_bip_cpp
List canon_orient_bip_cpp(const arma::cube& U, const arma::cube& V, const arma::mat& G);
RcppExport SEXP _lame_canon_orient_bip_cpp(SEXP USEXP, SEXP VSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(canon_orient_bip_cpp(U, V, G));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lame_Xbeta_cpp", (DL_FUNC) &_lame_Xbeta_cpp, 2},
    {"_lame_outer_cpp", (DL_FUNC) &_lame_outer_cpp, 2},
    {"_lame_gof_stats_cpp", (DL_FUNC) &_lame_gof_stats_cpp, 1},
    {"_lame_sample_dynamic_ab_cpp", (DL_FUNC) &_lame_sample_dynamic_ab_cpp, 8},
    {"_lame_sample_rho_ab_cpp", (DL_FUNC) &_lame_sample_rho_ab_cpp, 5},
    {"_lame_sample_sigma_ab_cpp", (DL_FUNC) &_lame_sample_sigma_ab_cpp, 6},
    {"_lame_init_dynamic_ab_cpp", (DL_FUNC) &_lame_init_dynamic_ab_cpp, 6},
    {"_lame_rUV_dynamic_fc_cpp", (DL_FUNC) &_lame_rUV_dynamic_fc_cpp, 8},
    {"_lame_init_dynamic_positions", (DL_FUNC) &_lame_init_dynamic_positions, 5},
    {"_lame_sample_rho_uv", (DL_FUNC) &_lame_sample_rho_uv, 5},
    {"_lame_sample_sigma_uv", (DL_FUNC) &_lame_sample_sigma_uv, 4},
    {"_lame_count_four_cycles_bip_cpp", (DL_FUNC) &_lame_count_four_cycles_bip_cpp, 1},
    {"_lame_compute_degrees_bip_cpp", (DL_FUNC) &_lame_compute_degrees_bip_cpp, 1},
    {"_lame_clustering_coef_bip_cpp", (DL_FUNC) &_lame_clustering_coef_bip_cpp, 1},
    {"_lame_get_EZ_bip_cpp", (DL_FUNC) &_lame_get_EZ_bip_cpp, 6},
    {"_lame_outer_ab_bip_cpp", (DL_FUNC) &_lame_outer_ab_bip_cpp, 2},
    {"_lame_get_EZ_cpp", (DL_FUNC) &_lame_get_EZ_cpp, 5},
    {"_lame_ldZgbme_cpp", (DL_FUNC) &_lame_ldZgbme_cpp, 5},
    {"_lame_rZ_pois_fc_cpp", (DL_FUNC) &_lame_rZ_pois_fc_cpp, 5},
    {"_lame_ldZgbme_nrm_cpp", (DL_FUNC) &_lame_ldZgbme_nrm_cpp, 5},
    {"_lame_simY_pois", (DL_FUNC) &_lame_simY_pois, 1},
    {"_lame_rwish_cpp", (DL_FUNC) &_lame_rwish_cpp, 2},
    {"_lame_rUV_rep_fc_cpp", (DL_FUNC) &_lame_rUV_rep_fc_cpp, 9},
    {"_lame_rUV_sym_fc_cpp", (DL_FUNC) &_lame_rUV_sym_fc_cpp, 6},
    {"_lame_rZ_bin_fc_cpp", (DL_FUNC) &_lame_rZ_bin_fc_cpp, 4},
    {"_lame_rZ_bin_fc_single", (DL_FUNC) &_lame_rZ_bin_fc_single, 4},
    {"_lame_rZ_bin_fc_exact", (DL_FUNC) &_lame_rZ_bin_fc_exact, 4},
    {"_lame_rZ_bin_fc_fixed", (DL_FUNC) &_lame_rZ_bin_fc_fixed, 4},
    {"_lame_rbeta_ab_rep_fc_cpp", (DL_FUNC) &_lame_rbeta_ab_rep_fc_cpp, 12},
    {"_lame_test_rbeta_inputs", (DL_FUNC) &_lame_test_rbeta_inputs, 12},
    {"_lame_rrho_mh_rep_cpp", (DL_FUNC) &_lame_rrho_mh_rep_cpp, 3},
    {"_lame_rs2_rep_fc_cpp", (DL_FUNC) &_lame_rs2_rep_fc_cpp, 2},
    {"_lame_sample_U_bip_cpp", (DL_FUNC) &_lame_sample_U_bip_cpp, 5},
    {"_lame_sample_V_bip_cpp", (DL_FUNC) &_lame_sample_V_bip_cpp, 5},
    {"_lame_sample_G_bip_cpp", (DL_FUNC) &_lame_sample_G_bip_cpp, 5},
    {"_lame_canon_orient_bip_cpp", (DL_FUNC) &_lame_canon_orient_bip_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_lame(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
