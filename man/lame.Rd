% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lame.R
\name{lame}
\alias{lame}
\title{AME model fitting routine for replicated relational data}
\usage{
lame(Y,Xdyad=NULL, Xrow=NULL, Xcol=NULL, rvar = !(family=="rrl"),
  cvar = TRUE, dcor = !symmetric, nvar=TRUE, R = 0,
  dynamic_uv = FALSE, dynamic_ab = FALSE, family ="normal",
intercept=!is.element(family,c("rrl","ordinal")),
symmetric=FALSE,
odmax=NULL, prior=list(), g=NA,
seed = 6886, nscan = 10000, burn = 500, odens = 25, plot=FALSE, print = FALSE, gof=TRUE,
startVals=NULL, periodicSave=FALSE, outFile=NULL, saveInterval=0.25, model.name=NULL)
}
\arguments{
\item{Y}{a T length list of n x n relational matrices, where T
corresponds to the number of replicates (over time, for example).
See family below for various data types.}

\item{Xdyad}{a T length list of n x n x pd arrays of covariates}

\item{Xrow}{a T length list of n x pr matrices of nodal row covariates}

\item{Xcol}{a T length list of n x pc matrices of nodal column covariates}

\item{rvar}{logical: fit row random effects (asymmetric case)?}

\item{cvar}{logical: fit column random effects (asymmetric case)?}

\item{dcor}{logical: fit a dyadic correlation (asymmetric case)?}

\item{nvar}{logical: fit nodal random effects (symmetric case)?}

\item{R}{integer: dimension of the multiplicative effects (can be zero)}

\item{dynamic_uv}{logical: fit dynamic multiplicative effects (latent factors) that
evolve over time using AR(1) processes. When TRUE, the latent positions U and V become
time-varying, following \eqn{U_{i,t} = \rho_{uv} U_{i,t-1} + \epsilon_{i,t}}, where epsilon
follows N(0, sigma_uv^2). This allows actors' positions in latent social space to
drift smoothly over time, capturing evolving network structure and community dynamics.
Inspired by dynamic latent space models (Sewell and Chen 2015, "Latent Space Models
for Dynamic Networks", JASA; Durante and Dunson 2014, "Nonparametric Bayes Dynamic
Modeling of Relational Data", Biometrika). The implementation uses efficient blocked
Gibbs sampling with C++ acceleration for scalability. Default FALSE.}

\item{dynamic_ab}{logical: fit dynamic additive effects (sender/receiver effects) that
evolve over time using AR(1) processes. When TRUE, the row effects (a) and column
effects (b) become time-varying, following \eqn{a_{i,t} = \rho_{ab} a_{i,t-1} + \epsilon_{i,t}}.
This captures temporal heterogeneity in actors' baseline propensities to send and
receive ties, allowing for smooth changes in activity levels and popularity over time.
For example, an actor's tendency to form outgoing ties might gradually increase or
decrease across observation periods. The AR(1) specification ensures temporal smoothness
while allowing for actor-specific evolution patterns. Implementation uses conjugate
updates where possible and C++ for computational efficiency. Default FALSE.}

\item{family}{character: one of "normal","tobit","binary","ordinal","cbin","frn","rrl","poisson" - see
the details below}

\item{intercept}{logical: fit model with an intercept?}

\item{symmetric}{logical: Is the sociomatrix symmetric by design?}

\item{odmax}{a scalar integer or vector of length n giving the maximum
number of nominations that each node may make - used for "frn" and "cbin"
families}

\item{prior}{a list containing hyperparameters for the prior distributions.
Available options and their defaults:
\describe{
\item{Sab0}{Prior covariance matrix for additive effects (default: diag(2)).
A 2x2 matrix where Sab0\[1,1\] is the prior variance for row effects,
Sab0\[2,2\] is the prior variance for column effects, and off-diagonals
control correlation between row and column effects.}
\item{eta0}{Prior degrees of freedom for covariance of multiplicative effects
(default: 4 + 3 \\* n/100, where n is the number of actors). Higher values
impose stronger shrinkage on the latent factors.}
\item{etaab}{Prior degrees of freedom for covariance of additive effects
(default: 4 + 3 \\* n/100). Controls shrinkage of row/column random effects.}
\item{rho_uv_mean}{For dynamic_uv=TRUE: Prior mean for UV AR(1) parameter
(default: 0.9). Values close to 1 indicate high temporal persistence.}
\item{rho_uv_sd}{For dynamic_uv=TRUE: Prior SD for UV AR(1) parameter
(default: 0.1). Controls uncertainty about temporal dependence.}
\item{sigma_uv_shape}{For dynamic_uv=TRUE: Shape parameter for inverse-gamma
prior on UV innovation variance (default: 2).}
\item{sigma_uv_scale}{For dynamic_uv=TRUE: Scale parameter for inverse-gamma
prior on UV innovation variance (default: 1).}
\item{rho_ab_mean}{For dynamic_ab=TRUE: Prior mean for additive effects AR(1)
parameter (default: 0.8). Controls temporal smoothness of sender/receiver effects.}
\item{rho_ab_sd}{For dynamic_ab=TRUE: Prior SD for additive effects AR(1)
parameter (default: 0.15).}
\item{sigma_ab_shape}{For dynamic_ab=TRUE: Shape parameter for inverse-gamma
prior on additive effects innovation variance (default: 2).}
\item{sigma_ab_scale}{For dynamic_ab=TRUE: Scale parameter for inverse-gamma
prior on additive effects innovation variance (default: 1).}
}
Common usage: prior = list(Sab0 = diag(c(1, 1)), eta0 = 10) for stronger
shrinkage, or prior = list(rho_uv_mean = 0.95) for higher temporal persistence.}

\item{g}{optional scalar or vector for g-prior on regression coefficients.
Default is p^2 where p is the number of regression parameters. The g-prior
controls the variance of regression coefficients: larger values allow for
larger coefficient values. Can be a vector of length p for parameter-specific
control.}

\item{seed}{random seed}

\item{nscan}{number of iterations of the Markov chain (beyond burn-in)}

\item{burn}{burn in for the Markov chain}

\item{odens}{output density for the Markov chain}

\item{plot}{logical: plot results while running?}

\item{print}{logical: print results while running?}

\item{gof}{logical: calculate goodness of fit statistics?}

\item{startVals}{List from previous model run containing parameter starting values for new MCMC}

\item{periodicSave}{logical: indicating whether to periodically save MCMC results}

\item{outFile}{character vector indicating name and path in which file should be stored if periodicSave is selected. For example, on an Apple OS outFile="~/Desktop/ameFit.rda".}

\item{saveInterval}{quantile interval indicating when to save during post burn-in phase.}

\item{model.name}{optional string for model selection output}
}
\value{
\item{BETA}{posterior samples of regression coefficients}
\item{VC}{posterior samples of the variance parameters}
\item{APM}{posterior mean of additive row effects a} \item{BPM}{posterior
mean of additive column effects b} \item{U}{posterior mean of multiplicative
row effects u. For dynamic_uv=TRUE, this is a 3D array (n x R x T)}
\item{V}{posterior mean of multiplicative column effects v (asymmetric case).
For dynamic_uv=TRUE, this is a 3D array (n x R x T)}
\item{UVPM}{posterior mean of UV}
\item{ULUPM}{posterior mean of ULU (symmetric case)}
\item{L}{posterior mean of L (symmetric case)}
\item{EZ}{estimate of expectation of Z
matrix} \item{YPM}{posterior mean of Y (for imputing missing values)}
\item{GOF}{observed (first row) and posterior predictive (remaining rows)
values of four goodness-of-fit statistics}
\item{startVals}{Final parameter values from MCMC, can be used as the input
for a future model run.}
\item{AIC}{Akaike Information Criterion (if model.name provided)}
\item{BIC}{Bayesian Information Criterion (if model.name provided)}
\item{model.name}{Name of the model (if provided)}
}
\description{
An MCMC routine providing a fit to an additive and multiplicative effects
(AME) regression model to replicated relational data of
various types.
}
\details{
This command provides posterior inference for parameters in AME models of
independent replicated relational data, assuming one of eight possible data
types/models.

\strong{Dynamic Effects Implementation:}

The dynamic_uv and dynamic_ab parameters enable time-varying latent representations
through autoregressive processes. These extensions are particularly useful for
understanding how network structure evolves over time.

\emph{Dynamic Multiplicative Effects (dynamic_uv=TRUE):}
The latent factors U and V evolve according to AR(1) processes:
\deqn{U_{i,k,t} = \rho_{uv} U_{i,k,t-1} + \epsilon_{i,k,t}}
where \eqn{\epsilon_{i,k,t} \sim N(0, \sigma_{uv}^2)}, i indexes actors, k indexes
latent dimensions, and t indexes time. The parameter \eqn{\rho_{uv}} controls
temporal persistence (values near 1 indicate slow evolution). This captures
time-varying homophily, latent community structure, and transitivity dynamics.

Key references:
\itemize{
\item Sewell & Chen (2015): Introduced dynamic latent space models with
actor-specific evolution rates
\item Durante & Dunson (2014): Nonparametric Bayesian approach allowing
flexible evolution of network structure
\item Hoff (2011): Hierarchical multilinear models providing theoretical
foundation for temporal dependencies
}

\emph{Dynamic Additive Effects (dynamic_ab=TRUE):}
The sender (a) and receiver (b) effects evolve as:
\deqn{a_{i,t} = \rho_{ab} a_{i,t-1} + \epsilon_{i,t}}
\deqn{b_{i,t} = \rho_{ab} b_{i,t-1} + \eta_{i,t}}
where \eqn{\epsilon_{i,t}, \eta_{i,t} \sim N(0, \sigma_{ab}^2)}. This models
time-varying individual activity levels (outdegree) and popularity (indegree).

Applications include:
\itemize{
\item Tracking changes in node centrality over time
\item Identifying emerging influential actors
\item Detecting declining activity patterns
\item Modeling life-cycle effects in social networks
}

\emph{Prior Specification for Dynamic Parameters:}
\itemize{
\item \eqn{\rho_{uv}, \rho_{ab} \sim TruncNormal(mean, sd, 0, 1)}:
Ensures stationarity of AR(1) process
\item \eqn{\sigma_{uv}^2, \sigma_{ab}^2 \sim InverseGamma(shape, scale)}:
Controls innovation variance
\item Default priors (\eqn{\rho_{uv}} mean=0.9, \eqn{\rho_{ab}} mean=0.8)
favor smooth evolution
\item Adjust rho_*_mean closer to 1 for slower evolution, closer to 0 for
more rapid changes
}

\emph{Computational Considerations:}
\itemize{
\item Dynamic effects increase computation by ~30-50\\% per iteration
\item Memory usage scales as O(n\emph{R}T) for dynamic_uv, O(n*T) for dynamic_ab
\item C++ implementation provides ~70\\% efficiency gain over pure R
\item Convergence diagnostics: Monitor rho and sigma parameters carefully
\item Effective sample sizes typically lower due to temporal correlation
\item Recommend burn >= 1000 and nscan >= 20000 for dynamic models
}

\emph{Model Selection Guidelines:}
Use both dynamic_uv and dynamic_ab when:
\itemize{
\item Networks show clear temporal trends in density or clustering
\item Individual node behavior changes systematically over time
\item Community structure evolves (merging, splitting, drift)
}

Use only dynamic_uv when:
\itemize{
\item Latent structure/communities change but individual effects are stable
\item Focus is on evolving homophily or clustering patterns
\item Network shows structural reconfiguration over time
}

Use only dynamic_ab when:
\itemize{
\item Individual heterogeneity varies but overall structure is stable
\item Actors' activity/popularity changes over observation period
\item Focus is on individual-level temporal dynamics
}

\strong{Standard AME Model Types:}

The following describes the eight standard data types/models available:

"normal": A normal AME model.

"tobit": A tobit AME model for censored continuous data. Values are censored
at zero, appropriate for non-negative continuous relational data.

"binary": A binary probit AME model.

"ordinal": An ordinal probit AME model. An intercept is not identifiable in this
model.

"cbin": An AME model for censored binary data.  The value of 'odmax'
specifies the maximum number of links each row may have.

"frn": An AME model for fixed rank nomination networks. A higher value of
the rank indicates a stronger relationship. The value of 'odmax' specifies
the maximum number of links each row may have.

"rrl": An AME model based on the row ranks. This is appropriate if the
relationships across rows are not directly comparable in terms of scale. An
intercept, row random effects and row regression effects are not estimable
for this model.

"poisson": An overdispersed Poisson AME model for count data. The latent
variable represents the log mean of the Poisson distribution.
}
\examples{

data(YX_bin_list) 
fit<-lame(YX_bin_list$Y,YX_bin_list$X,burn=5,nscan=5,odens=1,family="binary")
# you should run the Markov chain much longer than this

}
\author{
Peter Hoff, Yanjun He, Shahryar Minhas
}
