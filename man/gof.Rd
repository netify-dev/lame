% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gof.R
\name{gof}
\alias{gof}
\title{Compute GOF statistics from saved posterior samples}
\usage{
gof(fit, Y = NULL, custom_gof = NULL, nsim = 100, verbose = TRUE)
}
\arguments{
\item{fit}{An ame model object that was run with posterior sampling enabled}

\item{Y}{Original data matrix (if not stored in fit)}

\item{custom_gof}{Optional custom GOF function(s) - same format as for ame()}

\item{nsim}{Number of posterior predictive simulations to generate (default 100).
If NULL, uses all available posterior samples.}

\item{verbose}{Logical; print progress information}
}
\value{
A matrix of GOF statistics with the same format as if gof=TRUE was
used during model estimation. First row contains observed statistics,
subsequent rows contain posterior predictive statistics.
}
\description{
Computes goodness-of-fit statistics after model estimation using saved
posterior samples. This avoids the computational overhead of GOF calculation
during MCMC sampling. Requires that the model was run with appropriate
posterior sampling options.
}
\details{
This function requires that the model was estimated with posterior sampling
of the parameters needed to generate posterior predictive datasets.
Specifically, it needs:
\itemize{
\item BETA: regression coefficients
\item VC: variance components
\item For models with random effects: samples of a, b
\item For models with latent factors: U_samples, V_samples
}

To enable posterior sampling during model estimation, use:
\code{posterior_opts = posterior_options(save_UV = TRUE, save_ab = TRUE)}

Computing GOF post-hoc has several advantages:
\itemize{
\item Faster MCMC sampling (no GOF overhead)
\item Can experiment with different GOF statistics without re-running model
\item Can control number of posterior predictive simulations independently
}
}
\examples{
\dontrun{
# Run model with posterior sampling but no GOF
opts <- posterior_options(save_UV = TRUE, save_ab = TRUE)
fit <- ame(Y, R = 2, gof = FALSE, posterior_opts = opts)

# Compute GOF post-hoc
gof_result <- gof(fit)

# Add custom statistics
custom <- function(Y) c(density = mean(Y > 0, na.rm = TRUE))
gof_custom <- gof(fit, custom_gof = custom)
}

}
\author{
Cassy Dorff, Shahryar Minhas, Tosin Salau
}
