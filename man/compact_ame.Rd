% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/memory_utils.R
\name{compact_ame}
\alias{compact_ame}
\title{Memory optimization utilities for AME models}
\usage{
compact_ame(fit, use_sparse_matrices = FALSE)
}
\arguments{
\item{fit}{Fitted AME model}

\item{use_sparse_matrices}{Logical; whether to use sparse matrix storage (default: FALSE)}
}
\value{
Memory-optimized AME model object
}
\description{
Functions to manage memory usage in AME models, especially for large networks.
For a network of size n x n with R latent dimensions:
\itemize{
\item YPM: n x n matrix (8n^2 bytes for doubles)
\item EZ: n x n matrix (8n^2 bytes)
\item UVPM: n x n matrix (8n^2 bytes)
\item U: n x R matrix (8nR bytes)
\item V: n x R matrix (8nR bytes)
}

For n=1000, each n x n matrix uses ~8MB. For n=10000, each uses ~800MB.

Optimizes AME model storage by optionally removing redundant components
and/or using sparse matrices based on user preferences.
}
\details{
This function provides two optimization strategies:
\enumerate{
\item remove_redundant = TRUE: Removes redundant matrices (EZ, UVPM) that can be
reconstructed if needed, keeping only essential components (BETA, VC, YPM).
Recommended for networks with > 100 nodes.
\item use_sparse_matrices = TRUE: Converts matrices to sparse format.
Only recommended when your network is actually sparse (< 10\\% non-zero entries).
For dense networks, sparse storage will be slower and may use more memory.
}
}
\author{
Cassy Dorff, Shahryar Minhas, Tosin Salau
Optimize AME model output for memory efficiency

Cassy Dorff, Shahryar Minhas, Tosin Salau
}
