[{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Bipartite Network Analysis","text":"vignette demonstrates analyze bipartite networks using lame package. Bipartite networks consist two distinct sets nodes (e.g., people organizations, students courses, countries treaties) edges occur nodes different sets. lame package provides two functions bipartite network analysis: ame(): cross-sectional bipartite networks (single time point) lame(): longitudinal bipartite networks (multiple time points) functions extend Additive Multiplicative Effects (AME) framework handle rectangular adjacency matrices separate latent factor representations row column nodes.","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"mathematical-formulation","dir":"Articles","previous_headings":"Bipartite Network Model","what":"Mathematical Formulation","title":"Bipartite Network Analysis","text":"bipartite networks, model uses: U: n_A × R_row matrix latent positions row nodes V: n_B × R_col matrix latent positions column nodes G: R_row × R_col interaction matrix mapping latent spaces Multiplicative term: U G V’ captures bipartite community structure model equation becomes: yij=β′xij+ai+bj+ui′Gvj+ϵijy_{ij} = \\beta'x_{ij} + a_i + b_j + u_i'Gv_j + \\epsilon_{ij} indexes row nodes (set ) j indexes column nodes (set B).","code":""},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"key-differences-from-unipartite-models","dir":"Articles","previous_headings":"Bipartite Network Model","what":"Key Differences from Unipartite Models","title":"Bipartite Network Analysis","text":"dyadic correlation (ρ): Bipartite edges inherently directed row column nodes Separate dimensions: R_row R_col can differ row column latent spaces Rectangular structure: Different interpretations network density clustering Independent variance components: σ²_a row effects, σ²_b column effects (covariance)","code":""},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"cross-sectional-analysis-with-ame","dir":"Articles","previous_headings":"","what":"Cross-Sectional Analysis with ame()","title":"Bipartite Network Analysis","text":"single bipartite network observed one time point, use ame() function:","code":""},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"simulate-cross-sectional-bipartite-data","dir":"Articles","previous_headings":"Cross-Sectional Analysis with ame()","what":"Simulate Cross-Sectional Bipartite Data","title":"Bipartite Network Analysis","text":"","code":"# Simulate a bipartite network (e.g., students to courses) n_students <- 50  # Row nodes n_courses <- 30   # Column nodes  # True latent dimensions R_row_true <- 2 R_col_true <- 2  # Generate true latent positions U_true <- matrix(rnorm(n_students * R_row_true), n_students, R_row_true) V_true <- matrix(rnorm(n_courses * R_col_true), n_courses, R_col_true)  # True interaction matrix G_true <- matrix(c(1, 0.5, 0.5, -1), R_row_true, R_col_true)  # Generate network eta <- U_true %*% G_true %*% t(V_true) prob <- plogis(eta)  # Convert to probabilities Y_bipartite <- matrix(rbinom(n_students * n_courses, 1, prob),                        n_students, n_courses)  # Add row and column names for clarity rownames(Y_bipartite) <- paste0(\"Student\", 1:n_students) colnames(Y_bipartite) <- paste0(\"Course\", 1:n_courses)  cat(\"Bipartite network dimensions:\", dim(Y_bipartite), \"\\n\") cat(\"Network density:\", mean(Y_bipartite), \"\\n\")"},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"fit-cross-sectional-bipartite-model","dir":"Articles","previous_headings":"Cross-Sectional Analysis with ame()","what":"Fit Cross-Sectional Bipartite Model","title":"Bipartite Network Analysis","text":"","code":"# Fit bipartite AME model fit_cross <- ame(   Y = Y_bipartite,   mode = \"bipartite\",     # Specify bipartite mode   R_row = 2,              # Latent dimensions for students   R_col = 2,              # Latent dimensions for courses   family = \"binary\",   burn = 500,   nscan = 2000,   odens = 10,   print = TRUE )  # Summary of results summary(fit_cross)  # The fitted model includes: # - U: Posterior samples of student latent positions (50 × 2) # - V: Posterior samples of course latent positions (30 × 2) # - G: Posterior samples of interaction matrix (2 × 2) # - APM: Additive row effects (student activity levels) # - BPM: Additive column effects (course popularity)"},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"visualize-results","dir":"Articles","previous_headings":"Cross-Sectional Analysis with ame()","what":"Visualize Results","title":"Bipartite Network Analysis","text":"","code":"# Extract posterior means U_post <- apply(fit_cross$U, c(1,2), mean) V_post <- apply(fit_cross$V, c(1,2), mean) G_post <- apply(fit_cross$G, c(1,2), mean)  # Plot latent positions par(mfrow = c(1, 2))  # Student positions plot(U_post[,1], U_post[,2],       xlab = \"Dimension 1\", ylab = \"Dimension 2\",      main = \"Student Latent Positions\",      pch = 19, col = \"blue\")  # Course positions   plot(V_post[,1], V_post[,2],      xlab = \"Dimension 1\", ylab = \"Dimension 2\",       main = \"Course Latent Positions\",      pch = 19, col = \"red\")  # Interaction matrix heatmap library(ggplot2) library(reshape2) G_melt <- melt(G_post) ggplot(G_melt, aes(x = Var2, y = Var1, fill = value)) +   geom_tile() +   scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\") +   labs(title = \"Interaction Matrix G\",        x = \"Column Dimension\", y = \"Row Dimension\") +   theme_minimal()"},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"longitudinal-analysis-with-lame","dir":"Articles","previous_headings":"","what":"Longitudinal Analysis with lame()","title":"Bipartite Network Analysis","text":"bipartite networks observed multiple time periods, use lame() function:","code":""},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"simulate-longitudinal-bipartite-data","dir":"Articles","previous_headings":"Longitudinal Analysis with lame()","what":"Simulate Longitudinal Bipartite Data","title":"Bipartite Network Analysis","text":"","code":"# Simulate longitudinal bipartite networks T <- 10  # Number of time periods n_users <- 40    # Row nodes (e.g., users) n_items <- 25    # Column nodes (e.g., items)  # Initialize storage Y_list <- list()  # Generate evolving bipartite networks for(t in 1:T) {   # Add some temporal variation   eta_t <- U_true %*% G_true %*% t(V_true) + rnorm(1, 0, 0.2)   prob_t <- plogis(eta_t)      # Sample first 40 rows and 25 columns for rectangular structure   Y_list[[t]] <- matrix(rbinom(n_users * n_items, 1, prob_t[1:n_users, 1:n_items]),                          n_users, n_items)      rownames(Y_list[[t]]) <- paste0(\"User\", 1:n_users)   colnames(Y_list[[t]]) <- paste0(\"Item\", 1:n_items) }  cat(\"Longitudinal bipartite network:\\n\") cat(\"  Time periods:\", length(Y_list), \"\\n\") cat(\"  Dimensions per period:\", dim(Y_list[[1]]), \"\\n\") cat(\"  Average density:\", mean(sapply(Y_list, mean)), \"\\n\")"},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"fit-static-longitudinal-bipartite-model","dir":"Articles","previous_headings":"Longitudinal Analysis with lame()","what":"Fit Static Longitudinal Bipartite Model","title":"Bipartite Network Analysis","text":"","code":"# Fit static bipartite model (constant effects over time) fit_static <- lame(   Y = Y_list,   mode = \"bipartite\",     # Specify bipartite mode   R_row = 2,              # Latent dimensions for users   R_col = 2,              # Latent dimensions for items   family = \"binary\",   dynamic_uv = FALSE,     # Static latent positions   dynamic_ab = FALSE,     # Static additive effects   burn = 1000,   nscan = 3000,   odens = 10 )  summary(fit_static)"},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"fit-dynamic-longitudinal-bipartite-model","dir":"Articles","previous_headings":"Longitudinal Analysis with lame()","what":"Fit Dynamic Longitudinal Bipartite Model","title":"Bipartite Network Analysis","text":"","code":"# Fit dynamic bipartite model (time-varying effects) fit_dynamic <- lame(   Y = Y_list,   mode = \"bipartite\",     # Specify bipartite mode   R_row = 2,              # Latent dimensions for users     R_col = 2,              # Latent dimensions for items   family = \"binary\",   dynamic_uv = TRUE,      # Time-varying latent positions   dynamic_ab = TRUE,      # Time-varying additive effects   dynamic_G = FALSE,      # Keep G constant (can also be dynamic)   burn = 2000,   nscan = 5000,   odens = 25,   prior = list(     rho_uv_mean = 0.9,    # High persistence for latent positions     rho_ab_mean = 0.8     # Moderate persistence for additive effects   ) )  summary(fit_dynamic)"},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"dynamic-case-details","dir":"Articles","previous_headings":"Longitudinal Analysis with lame()","what":"Dynamic Case Details","title":"Bipartite Network Analysis","text":"dynamic_uv=TRUE, latent positions evolve time: Ui,k,t=ρuvUi,k,t−1+ϵi,k,tU_{,k,t} = \\rho_{uv} U_{,k,t-1} + \\epsilon_{,k,t}Vj,k,t=ρuvVj,k,t−1+ηj,k,tV_{j,k,t} = \\rho_{uv} V_{j,k,t-1} + \\eta_{j,k,t} dynamic_G=TRUE, interaction matrix also evolves: Gk,l,t=ρGGk,l,t−1+ξk,l,tG_{k,l,t} = \\rho_G G_{k,l,t-1} + \\xi_{k,l,t} AR(1) parameter ρ controls temporal persistence (0 = independent, 1 = perfect persistence).","code":""},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"visualize-temporal-evolution","dir":"Articles","previous_headings":"Longitudinal Analysis with lame()","what":"Visualize Temporal Evolution","title":"Bipartite Network Analysis","text":"","code":"# For dynamic models, visualize evolution over time # Extract posterior means for first and last time periods U_t1 <- apply(fit_dynamic$U[,,1,], c(1,2), mean) U_tT <- apply(fit_dynamic$U[,,T,], c(1,2), mean)  # Plot evolution of user positions par(mfrow = c(1, 2)) plot(U_t1[,1], U_t1[,2],       xlab = \"Dimension 1\", ylab = \"Dimension 2\",      main = \"User Positions: Period 1\",      pch = 19, col = \"blue\", xlim = c(-3,3), ylim = c(-3,3))  plot(U_tT[,1], U_tT[,2],      xlab = \"Dimension 1\", ylab = \"Dimension 2\",      main = paste(\"User Positions: Period\", T),      pch = 19, col = \"darkblue\", xlim = c(-3,3), ylim = c(-3,3))  # Trace plot for temporal correlation trace_plot(list(rho_uv = fit_dynamic$rho_uv))"},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"compare-static-vs-dynamic-models","dir":"Articles","previous_headings":"Model Comparison and Selection","what":"Compare Static vs Dynamic Models","title":"Bipartite Network Analysis","text":"","code":"# Compare model fit using GOF statistics gof_static <- fit_static$GOF gof_dynamic <- fit_dynamic$GOF  # Plot GOF comparison par(mfrow = c(2, 2)) boxplot(gof_static$rowmean, gof_dynamic$rowmean,         names = c(\"Static\", \"Dynamic\"),         main = \"Row Mean GOF\")  boxplot(gof_static$colmean, gof_dynamic$colmean,         names = c(\"Static\", \"Dynamic\"),         main = \"Column Mean GOF\")  boxplot(gof_static$density, gof_dynamic$density,         names = c(\"Static\", \"Dynamic\"),         main = \"Density GOF\")  # For bipartite networks, four-cycle counts are particularly informative boxplot(gof_static$four_cycles, gof_dynamic$four_cycles,         names = c(\"Static\", \"Dynamic\"),         main = \"Four-Cycle GOF\")"},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"choosing-dimensions","dir":"Articles","previous_headings":"Model Comparison and Selection","what":"Choosing Dimensions","title":"Bipartite Network Analysis","text":"","code":"# Fit models with different dimensions dims_to_test <- list(   c(1, 1),  # R_row = 1, R_col = 1   c(2, 2),  # R_row = 2, R_col = 2   c(3, 2),  # R_row = 3, R_col = 2   c(2, 3)   # R_row = 2, R_col = 3 )  gof_results <- list() for(i in 1:length(dims_to_test)) {   fit_temp <- ame(     Y = Y_bipartite,     mode = \"bipartite\",     R_row = dims_to_test[[i]][1],     R_col = dims_to_test[[i]][2],     family = \"binary\",     burn = 500,     nscan = 1000,     print = FALSE   )   gof_results[[i]] <- c(     R_row = dims_to_test[[i]][1],     R_col = dims_to_test[[i]][2],     gof_mean = mean(abs(fit_temp$GOF$density))   ) }  # Display results do.call(rbind, gof_results)"},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"when-to-use-bipartite-models","dir":"Articles","previous_headings":"Practical Considerations","what":"When to Use Bipartite Models","title":"Bipartite Network Analysis","text":"Use bipartite models : Distinct node types: network two fundamentally different types nodes within-type edges: Connections exist types, within Rectangular structure: adjacency matrix inherently non-square Different role behaviors: Row column nodes different generative processes","code":""},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"interpretation-guidelines","dir":"Articles","previous_headings":"Practical Considerations","what":"Interpretation Guidelines","title":"Bipartite Network Analysis","text":"U positions: Represent row node preferences/characteristics latent space V positions: Represent column node attributes latent space G matrix: Maps row column latent dimensions interact Positive G elements: Indicate affinity corresponding dimensions Negative G elements: Indicate disaffinity dimensions Additive effects: Capture overall activity (rows) popularity (columns)","code":""},{"path":"https://netify-dev.github.io/lame/articles/bipartite.html","id":"convergence-diagnostics","dir":"Articles","previous_headings":"","what":"Convergence Diagnostics","title":"Bipartite Network Analysis","text":"usual, check convergence:","code":"# Check effective sample sizes fit_cross$ESS  # Visual convergence diagnostics trace_plot(list(   U = fit_cross$U[1,1,],  # First user, first dimension   V = fit_cross$V[1,1,],  # First item, first dimension   G = fit_cross$G[1,1,],  # First element of G   sigma_a = fit_cross$VC[1,1,],  # Row variance   sigma_b = fit_cross$VC[2,2,]   # Column variance ))"},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Dynamic Effects in Longitudinal AME Models","text":"lame package extends Additive Multiplicative Effects (AME) model longitudinal network data introduction dynamic effects. vignette explains theoretical foundation, implementation details, practical usage dynamic_uv dynamic_ab parameters.","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"standard-ame-model","dir":"Articles","previous_headings":"Theoretical Background","what":"Standard AME Model","title":"Dynamic Effects in Longitudinal AME Models","text":"standard AME model decomposes network structure : yij=β′xij+ai+bj+ui′vj+ϵijy_{ij} = \\beta'x_{ij} + a_i + b_j + u_i'v_j + \\epsilon_{ij} : β′xij\\beta'x_{ij}: Fixed effects covariates aia_i: Sender (row) effect node ii bjb_j: Receiver (column) effect node jj ui′vju_i'v_j: Multiplicative interaction latent factors ϵij\\epsilon_{ij}: Dyadic error term","code":""},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"dynamic-extensions","dir":"Articles","previous_headings":"Theoretical Background","what":"Dynamic Extensions","title":"Dynamic Effects in Longitudinal AME Models","text":"longitudinal data networks observed times t=1,...,Tt = 1, ..., T, extend model allow temporal evolution effects.","code":""},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"dynamic-multiplicative-effects-dynamic_uv-true","dir":"Articles","previous_headings":"Theoretical Background > Dynamic Extensions","what":"Dynamic Multiplicative Effects (dynamic_uv = TRUE)","title":"Dynamic Effects in Longitudinal AME Models","text":"latent factors evolve according AR(1) processes: Ui,k,t=ρuvUi,k,t−1+ϵi,k,tU_{,k,t} = \\rho_{uv} U_{,k,t-1} + \\epsilon_{,k,t}Vj,k,t=ρuvVj,k,t−1+ηj,k,tV_{j,k,t} = \\rho_{uv} V_{j,k,t-1} + \\eta_{j,k,t} : ϵi,k,t,ηj,k,t∼N(0,σuv2)\\epsilon_{,k,t}, \\eta_{j,k,t} \\sim N(0, \\sigma_{uv}^2) ρuv∈(0,1)\\rho_{uv} \\(0,1) controls temporal persistence ,ji,j index actors, kk indexes latent dimensions, tt indexes time specification allows actors’ positions latent social space drift time, capturing: Evolving community structure Time-varying homophily patterns Dynamic clustering transitivity","code":""},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"dynamic-additive-effects-dynamic_ab-true","dir":"Articles","previous_headings":"Theoretical Background > Dynamic Extensions","what":"Dynamic Additive Effects (dynamic_ab = TRUE)","title":"Dynamic Effects in Longitudinal AME Models","text":"sender receiver effects evolve : ai,t=ρabai,t−1+ϵi,ta_{,t} = \\rho_{ab} a_{,t-1} + \\epsilon_{,t}bj,t=ρabbj,t−1+ηj,tb_{j,t} = \\rho_{ab} b_{j,t-1} + \\eta_{j,t} : ϵi,t,ηj,t∼N(0,σab2)\\epsilon_{,t}, \\eta_{j,t} \\sim N(0, \\sigma_{ab}^2) ρab∈(0,1)\\rho_{ab} \\(0,1) controls temporal smoothness captures: Time-varying activity levels (outdegree heterogeneity) Changing popularity (indegree heterogeneity) Life-cycle effects social networks","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"for-dynamic-parameters","dir":"Articles","previous_headings":"Prior Specifications","what":"For Dynamic Parameters","title":"Dynamic Effects in Longitudinal AME Models","text":"package uses following default priors: AR(1) coefficients: ρuv∼TruncNormal(0.9,0.1,0,1)\\rho_{uv} \\sim \\text{TruncNormal}(0.9, 0.1, 0, 1) ρab∼TruncNormal(0.8,0.15,0,1)\\rho_{ab} \\sim \\text{TruncNormal}(0.8, 0.15, 0, 1) Innovation variances: σuv2∼InverseGamma(2,1)\\sigma_{uv}^2 \\sim \\text{InverseGamma}(2, 1) σab2∼InverseGamma(2,1)\\sigma_{ab}^2 \\sim \\text{InverseGamma}(2, 1) can customized via prior argument:","code":"prior_custom <- list(   rho_uv_mean = 0.95,    # Higher persistence for UV   rho_uv_sd = 0.05,      # Tighter prior   sigma_uv_shape = 3,    # Different variance prior   sigma_uv_scale = 2 )"},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"computational-efficiency","dir":"Articles","previous_headings":"Implementation Details","what":"Computational Efficiency","title":"Dynamic Effects in Longitudinal AME Models","text":"dynamic effects implemented C++ via Rcpp RcppArmadillo: Block sampling: Updates performed blocks improve mixing Sparse operations: Exploits temporal structure efficiency Memory optimization: 50% reduction compared R implementation","code":""},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"algorithmic-details","dir":"Articles","previous_headings":"Implementation Details","what":"Algorithmic Details","title":"Dynamic Effects in Longitudinal AME Models","text":"MCMC sampler alternates : Forward filtering: Compute predictive distributions p(xt|x1:t−1)p(x_t | x_{1:t-1}) Backward sampling: Sample smoothed distribution p(x1:T|y1:T)p(x_{1:T} | y_{1:T}) Parameter updates: Sample ρ\\rho σ2\\sigma^2 given state sequences forward-filtering backward-sampling (FFBS) approach explores posterior distribution.","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"basic-example","dir":"Articles","previous_headings":"Practical Usage","what":"Basic Example","title":"Dynamic Effects in Longitudinal AME Models","text":"","code":"library(lame)  # Simulate longitudinal network data set.seed(6886) n <- 25  # actors (reduced for faster vignette building) T <- 5   # time periods (reduced for faster vignette building)  # Generate networks (example with binary data) Y_list <- list() for(t in 1:T) {   Y_t <- matrix(rbinom(n*n, 1, 0.1), n, n)   diag(Y_t) <- NA   # Add actor labels (required for lame function)   rownames(Y_t) <- colnames(Y_t) <- paste0(\"Actor\", 1:n)   Y_list[[t]] <- Y_t }  # Fit model with dynamic effects (reduced iterations for vignette) fit_dynamic <- lame(   Y = Y_list,   R = 2,                # 2-dimensional latent space   dynamic_uv = TRUE,    # Dynamic latent factors   dynamic_ab = TRUE,    # Dynamic additive effects   family = \"binary\",   burn = 100,          # Reduced for vignette (use 1000+ in practice)   nscan = 500,         # Reduced for vignette (use 5000+ in practice)   odens = 25,   print = FALSE,       # Suppress output for vignette   plot = FALSE         # Suppress plots for vignette )"},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"visualization","dir":"Articles","previous_headings":"Practical Usage","what":"Visualization","title":"Dynamic Effects in Longitudinal AME Models","text":"Plotting functions can illustrate temporal dynamics:","code":"# Plot latent positions (last time point) uv_plot(fit_dynamic, plot_type = \"snapshot\") #> ℹ Detected dynamic UV effects #> • Using last time point for visualization # Plot sender effects  ab_plot(fit_dynamic, effect = \"sender\") # Plot trace of parameters trace_plot(fit_dynamic, params = \"beta\")"},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"model-selection","dir":"Articles","previous_headings":"Practical Usage","what":"Model Selection","title":"Dynamic Effects in Longitudinal AME Models","text":"Choose static dynamic specifications based : Model fit statistics: Compare GOF statistics Parameter estimates: Check ρ\\rho significantly differs 0 Visual inspection: Look temporal patterns residuals","code":"# Static model fit_static <- lame(Y_list, R = 2, family = \"binary\",                     burn = 100, nscan = 400, odens = 20,                     print = FALSE, plot = FALSE)  # Dynamic UV only fit_uv <- lame(Y_list, R = 2, dynamic_uv = TRUE, family = \"binary\",                burn = 100, nscan = 400, odens = 20,                print = FALSE, plot = FALSE)  # Dynamic AB only   fit_ab <- lame(Y_list, R = 2, dynamic_ab = TRUE, family = \"binary\",                burn = 100, nscan = 400, odens = 20,                print = FALSE, plot = FALSE)  # Full dynamic fit_full <- lame(Y_list, R = 2, dynamic_uv = TRUE, dynamic_ab = TRUE, family = \"binary\",                  burn = 100, nscan = 400, odens = 20,                  print = FALSE, plot = FALSE)  # Compare GOF statistics if(!is.null(fit_static$GOF) && !is.null(fit_full$GOF)) {   cat(\"Static model GOF (sample):\\n\")   print(head(fit_static$GOF))   cat(\"\\nDynamic model GOF (sample):\\n\")     print(head(fit_full$GOF)) } #> Static model GOF (sample): #> $sd.rowmean #>             obs          1          2          3          4          5 #> [1,] 0.04853168 0.06396433 0.05281431 0.07701761 0.05281431 0.05000000 #> [2,] 0.06918005 0.05600513 0.05641693 0.06804138 0.05469825 0.06328214 #> [3,] 0.05242941 0.05926830 0.05574620 0.06468406 0.05553819 0.06095308 #> [4,] 0.06596857 0.05000000 0.05170697 0.05626286 0.05858082 0.05443311 #> [5,] 0.06189522 0.05308754 0.05308754 0.04677072 0.04670881 0.05005784 #>               6          7          8          9         10         11 #> [1,] 0.05828371 0.06014065 0.05148265 0.06486275 0.05501473 0.04947643 #> [2,] 0.04888810 0.04614791 0.05931710 0.06095308 0.05114431 0.06123724 #> [3,] 0.05892557 0.05389891 0.05641693 0.06189522 0.06014065 0.06052433 #> [4,] 0.05574620 0.05892557 0.04336804 0.05379144 0.05980292 0.05758448 #> [5,] 0.05176290 0.04762897 0.05142641 0.05286907 0.05527708 0.04941791 #>              12         13         14         15         16         17 #> [1,] 0.06364688 0.05548607 0.05707978 0.06351035 0.06123724 0.05142641 #> [2,] 0.05641693 0.06147304 0.06446001 0.05892557 0.06588078 0.07367660 #> [3,] 0.06212853 0.04658475 0.05034602 0.06943055 0.07066975 0.07557649 #> [4,] 0.07363731 0.07115938 0.06189522 0.05469825 0.05379144 0.05142641 #> [5,] 0.05335937 0.06189522 0.05877807 0.05902369 0.06441510 0.05379144 #>              18         19         20 #> [1,] 0.06014065 0.06662325 0.04959325 #> [2,] 0.04187448 0.06980462 0.06250000 #> [3,] 0.06189522 0.07503857 0.05281431 #> [4,] 0.05091751 0.04947643 0.05368374 #> [5,] 0.04545297 0.06419011 0.05553819 #>  #> $sd.colmean #>             obs          1          2          3          4          5 #> [1,] 0.07244890 0.04039733 0.04383259 0.06250000 0.05000000 0.05142641 #> [2,] 0.05778512 0.04912428 0.05768489 0.06133167 0.04110736 0.05057539 #> [3,] 0.06696980 0.06047650 0.06419011 0.06355590 0.05808479 0.04110736 #> [4,] 0.05253967 0.04214997 0.05574620 0.06351035 0.04455282 0.04416143 #> [5,] 0.04577016 0.05170697 0.05443311 0.05259471 0.05114431 0.05005784 #>               6          7          8          9         10         11 #> [1,] 0.05828371 0.05641693 0.05422006 0.06142596 0.04947643 0.06795628 #> [2,] 0.05707978 0.04614791 0.05931710 0.05600513 0.04180532 0.05758448 #> [3,] 0.06250000 0.05522471 0.05641693 0.07557649 0.03803629 0.04859127 #> [4,] 0.07931273 0.04500514 0.04658475 0.05768489 0.05980292 0.05368374 #> [5,] 0.06644930 0.05469825 0.05926830 0.05682576 0.05120086 0.05877807 #>              12         13         14         15         16         17 #> [1,] 0.06250000 0.05000000 0.05176290 0.07783976 0.03974747 0.05000000 #> [2,] 0.05768489 0.05395257 0.05475112 0.05511982 0.06250000 0.06194195 #> [3,] 0.05469825 0.06250000 0.06076290 0.05005784 0.07367660 0.05170697 #> [4,] 0.06640574 0.05379144 0.05951190 0.04762897 0.04811252 0.04701753 #> [5,] 0.07083333 0.06189522 0.06463931 0.07985809 0.07480685 0.06804138 #>              18         19         20 #> [1,] 0.05511982 0.05198602 0.06477347 #> [2,] 0.04356774 0.05335937 0.05379144 #> [3,] 0.06189522 0.05501473 0.06508541 #> [4,] 0.05368374 0.06240734 0.04799209 #> [5,] 0.04039733 0.06419011 0.04551658 #>  #> $dyad.dep #>               obs             1            2            3          4 #> [1,]  0.015231092 -7.913669e-02 -0.030085023 -0.020850709 0.01896664 #> [2,] -0.014458955  1.524094e-01  0.015015015  0.019182652 0.01114425 #> [3,]  0.016534867  2.121849e-01 -0.007178828 -0.010668164 0.11006864 #> [4,]  0.142309681 -5.448155e-02  0.088855143  0.003728187 0.07834101 #> [5,] -0.007178828 -3.703841e-05 -0.007178828 -0.065719361 0.05437352 #>                5           6           7            8           9          10 #> [1,] 0.117069980  0.08885514  0.01501502 -0.055499983  0.02052239  0.03144301 #> [2,] 0.023199023  0.07310759 -0.02406554  0.145858182  0.05823262  0.04017551 #> [3,] 0.011144247 -0.01785714 -0.01467160 -0.003636364  0.17774732  0.12010114 #> [4,] 0.088855143  0.03567985  0.03571429  0.015015015 -0.03303303 -0.02406554 #> [5,] 0.007348698 -0.02709699  0.01114425  0.015231092  0.05351853 -0.06571936 #>               11          12            13          14          15           16 #> [1,] 0.048913043  0.01501502 -2.415966e-02  0.12320989  0.04664624  0.048913043 #> [2,] 0.094202899  0.06306306 -8.184801e-02 -0.07526882  0.25000000  0.111111111 #> [3,] 0.053518526  0.02319902  8.928571e-02  0.02300530 -0.03882113  0.088882427 #> [4,] 0.003623188 -0.09289617 -4.727273e-02  0.03567985 -0.03594412 -0.003636364 #> [5,] 0.136087962  0.02319902 -3.703841e-05  0.13608796  0.16044776  0.152409355 #>               17          18         19           20 #> [1,] -0.07913669  0.03571429 0.02319902  0.040000000 #> [2,]  0.12765339 -0.01142536 0.02319902  0.015015015 #> [3,]  0.08885514 -0.05003750 0.03144301  0.018966645 #> [4,]  0.06801831 -0.09489051 0.04891304  0.003623188 #> [5,]  0.11111111  0.21764272 0.04440905 -0.014107827 #>  #> $cycle.dep #>              obs             1             2           3            4 #> [1,] 0.004697636  1.144382e-02 -0.0079786148 0.004915964  0.010546149 #> [2,] 0.022057807 -8.683577e-03 -0.0005191933 0.008225308 -0.003425739 #> [3,] 0.003409118  3.288189e-03 -0.0065989119 0.025987177  0.007601129 #> [4,] 0.012866730 -8.912113e-05  0.0054653473 0.003881961 -0.017290327 #> [5,] 0.006597912 -7.028462e-03  0.0116966851 0.007126572 -0.001178605 #>                 5             6            7            8            9 #> [1,]  0.029315733 -0.0007815572 -0.006749513 -0.020865480  0.002005652 #> [2,]  0.008204561  0.0028610008  0.006078508  0.029813474 -0.001660334 #> [3,]  0.012539666 -0.0010349121  0.001180299  0.021302693 -0.008964122 #> [4,] -0.023833514  0.0297923303 -0.023389014 -0.017726743 -0.003189330 #> [5,]  0.011164385 -0.0106810214  0.015187774  0.003288189  0.012915648 #>                 10           11           12            13           14 #> [1,] -0.0065999362 -0.018349435  0.014314901 -1.045392e-02 -0.009817533 #> [2,] -0.0007012322  0.011190375  0.017578402 -5.870135e-03 -0.004235112 #> [3,] -0.0095252034  0.003488636 -0.005118136  1.852493e-02 -0.007058583 #> [4,]  0.0413275900 -0.015308573  0.019344845  2.814999e-02  0.015095867 #> [5,]  0.0021152752  0.016813879  0.006724261  8.069163e-05  0.005406851 #>                 15            16           17            18            19 #> [1,]  0.0069743846 -0.0005386671 -0.019321972  0.0026907716 -0.0244545513 #> [2,]  0.0166620855 -0.0168659596 -0.017910564 -0.0172023194 -0.0127046723 #> [3,] -0.0188679140 -0.0216094054 -0.013926452  0.0004493919  0.0009950682 #> [4,] -0.0166662802 -0.0060864836 -0.008876291  0.0031372489 -0.0066203929 #> [5,]  0.0004329343  0.0188337205 -0.015353288 -0.0066537974 -0.0001304713 #>                20 #> [1,]  0.028149987 #> [2,] -0.025737154 #> [3,]  0.016177024 #> [4,]  0.002067787 #> [5,]  0.006494095 #>  #> $trans.dep #>                obs            1            2             3            4 #> [1,] -0.0096317459  0.010138114 -0.008468256  0.0004533634 -0.004687137 #> [2,]  0.0001052847 -0.004871325 -0.001705921  0.0130890407  0.004249936 #> [3,] -0.0012054802  0.009160886 -0.006232333  0.0034401835 -0.012304411 #> [4,]  0.0003049938  0.004731639  0.001159969  0.0010984519  0.007601617 #> [5,] -0.0067322132 -0.019451883  0.005531502 -0.0189079387 -0.005279977 #>                  5            6             7            8             9 #> [1,] -0.0059928472 -0.004946160 -0.0049694217  0.003700150  1.360445e-02 #> [2,] -0.0004305205 -0.004355795 -0.0058452551  0.001532438 -3.988622e-03 #> [3,] -0.0048841178  0.001759351 -0.0002670327 -0.010080738 -4.517969e-03 #> [4,] -0.0016379403  0.004065188 -0.0069339113  0.010556931 -9.320756e-03 #> [5,] -0.0002374555 -0.010695062  0.0081005671 -0.001684029 -1.389004e-05 #>                10            11           12            13            14 #> [1,]  0.006512806 -0.0005386671 -0.002694861  0.0076731360  0.0028469604 #> [2,] -0.008468579  0.0201681610  0.008282370  0.0017574902  0.0002906961 #> [3,]  0.002078155  0.0005698643  0.003270229 -0.0001034912  0.0067712685 #> [4,] -0.006280429  0.0220505999 -0.001116898  0.0030432418 -0.0062323335 #> [5,] -0.013394646  0.0043193961 -0.015171839 -0.0045883562  0.0066368001 #>                15           16           17           18            19 #> [1,]  0.014903039  0.001488575  0.010437340  0.015420191 -1.045338e-02 #> [2,] -0.011901490  0.005621987  0.007637247  0.004142716 -1.184116e-02 #> [3,]  0.002768258 -0.006555981  0.001945964 -0.005582490 -8.684127e-05 #> [4,]  0.008996063 -0.004374660 -0.001205243 -0.003224379  2.646999e-03 #> [5,] -0.008479134 -0.005088802 -0.018715683  0.011962780  1.767761e-02 #>                 20 #> [1,]  0.0013314183 #> [2,]  0.0084801574 #> [3,] -0.0181522735 #> [4,] -0.0006834701 #> [5,]  0.0050075050 #>  #>  #> Dynamic model GOF (sample): #> $sd.rowmean #>             obs          1          2          3          4          5 #> [1,] 0.04853168 0.10535434 0.07248882 0.09507551 0.06640574 0.07216878 #> [2,] 0.06918005 0.10186343 0.07599647 0.07595838 0.05641693 0.06959705 #> [3,] 0.05242941 0.06918005 0.07701761 0.08946213 0.11250000 0.09880654 #> [4,] 0.06596857 0.08796174 0.08378351 0.06943055 0.05308754 0.07511565 #> [5,] 0.06189522 0.09568225 0.07671647 0.07967672 0.07614861 0.06623122 #>               6          7          8          9         10         11 #> [1,] 0.06259252 0.08157875 0.07115938 0.07363731 0.05975451 0.07607258 #> [2,] 0.05907270 0.06731456 0.07821060 0.07607258 0.08460830 0.09880654 #> [3,] 0.07216878 0.06147304 0.07308512 0.06123724 0.08783007 0.07228896 #> [4,] 0.07576768 0.09160351 0.06618751 0.05803495 0.08779711 0.07025911 #> [5,] 0.06623122 0.08025567 0.06752914 0.07618660 0.06909635 0.07308512 #>              12         13         14         15         16         17 #> [1,] 0.06530732 0.07128126 0.05753421 0.08157875 0.06463931 0.06004435 #> [2,] 0.09007456 0.07324332 0.05833333 0.05833333 0.07124066 0.06579288 #> [3,] 0.05522471 0.08115201 0.06259252 0.05828371 0.06423517 0.09182436 #> [4,] 0.05768489 0.07709272 0.08920300 0.05005784 0.09026709 0.09601432 #> [5,] 0.04811252 0.07843227 0.04608517 0.08733450 0.07607258 0.05902369 #>              18         19         20 #> [1,] 0.05902369 0.07978559 0.05379144 #> [2,] 0.07204840 0.07978559 0.05758448 #> [3,] 0.06282324 0.06984606 0.05803495 #> [4,] 0.07519265 0.05999614 0.06355590 #> [5,] 0.08057950 0.06305311 0.06147304 #>  #> $sd.colmean #>             obs          1          2          3          4          5 #> [1,] 0.07244890 0.05063257 0.07248882 0.08959141 0.07363731 0.07511565 #> [2,] 0.05778512 0.07087417 0.08913811 0.09307628 0.07013545 0.05828371 #> [3,] 0.06696980 0.07985809 0.07115938 0.08097353 0.05828371 0.05951190 #> [4,] 0.05253967 0.10518942 0.07168604 0.08007520 0.07363731 0.06909635 #> [5,] 0.04577016 0.07913011 0.07184732 0.08991380 0.07021791 0.05808479 #>               6          7          8          9         10         11 #> [1,] 0.05902369 0.06909635 0.10891936 0.07264832 0.07383352 0.09622504 #> [2,] 0.07426336 0.06052433 0.08357604 0.06696980 0.06748628 0.09583333 #> [3,] 0.08838835 0.06147304 0.08239050 0.05501473 0.07445792 0.07618660 #> [4,] 0.06552848 0.07013545 0.05926830 0.05926830 0.06833841 0.07228896 #> [5,] 0.06512986 0.06309898 0.07066975 0.06263873 0.07216878 0.05631426 #>              12         13         14         15         16         17 #> [1,] 0.06640574 0.06490734 0.05086065 0.08838835 0.08147227 0.07208855 #> [2,] 0.08596538 0.07422438 0.05314202 0.05707978 0.06142596 0.06123724 #> [3,] 0.06373774 0.06644930 0.06142596 0.05828371 0.06859199 0.08696929 #> [4,] 0.07013545 0.06812638 0.05768489 0.04859127 0.07046473 0.08733450 #> [5,] 0.05103104 0.08025567 0.06212853 0.09138213 0.10063456 0.05778512 #>              18         19         20 #> [1,] 0.07802540 0.05103104 0.07701761 #> [2,] 0.06118997 0.07013545 0.07308512 #> [3,] 0.06282324 0.06984606 0.05548607 #> [4,] 0.07519265 0.06351035 0.07787692 #> [5,] 0.07001157 0.07164567 0.08168509 #>  #> $dyad.dep #>               obs          1          2           3           4           5 #> [1,]  0.015231092 0.09114213 0.17929293  0.15628767  0.07512075  0.01600000 #> [2,] -0.014458955 0.27732611 0.07309537  0.00256914  0.03703704 -0.04819649 #> [3,]  0.016534867 0.04985974 0.16390634  0.22526695  0.01346213  0.03575733 #> [4,]  0.142309681 0.08331515 0.06770882  0.08635426 -0.02450783 -0.09973046 #> [5,] -0.007178828 0.28958827 0.05245511 -0.02436323  0.02052239  0.05351853 #>                 6            7           8           9          10           11 #> [1,] -0.076675081  0.037037037  0.01653487  0.04429144  0.18599919  0.016534867 #> [2,] -0.007315026  0.027284330 -0.03168755  0.01653487  0.09602250 -0.084773001 #> [3,] -0.038461538 -0.046377583  0.23578800  0.01744171 -0.04166667 -0.007315026 #> [4,]  0.025533161  0.016534867  0.06656841 -0.06355042 -0.03168755 -0.046377583 #> [5,] -0.055499983  0.004865104 -0.06620142  0.06003370  0.15456506 -0.086956522 #>                 12          13         14           15          16           17 #> [1,] -3.703841e-05 -0.04329056 0.07891851 -0.020952381 -0.02145046 -0.052779337 #> [2,]  4.985974e-02 -0.11317254 0.05011147 -0.027430455  0.05550373 -0.057833180 #> [3,] -3.680161e-03  0.10437859 0.09048507 -0.088929220 -0.06620142 -0.009166597 #> [4,] -3.636364e-03  0.02052239 0.15456506 -0.038821130  0.02146465 -0.020717299 #> [5,]  1.501502e-02  0.01134051 0.01114425  0.008708801  0.02964960 -0.069518717 #>               18          19          20 #> [1,] -0.04944030  0.05921601  0.04000000 #> [2,] -0.02145046  0.02964960 -0.01066816 #> [3,] -0.06443953 -0.12570356  0.16612165 #> [4,]  0.02052239  0.04132335  0.01744171 #> [5,] -0.02145046  0.01346213 -0.01090716 #>  #> $cycle.dep #>              obs            1            2            3           4 #> [1,] 0.004697636 -0.001103624  0.005166549 -0.043316381 0.018152911 #> [2,] 0.022057807  0.008162098 -0.002012598  0.022176913 0.023291087 #> [3,] 0.003409118 -0.012458788  0.017083731 -0.007613892 0.013395423 #> [4,] 0.012866730 -0.009894645  0.014593610 -0.010875492 0.001318978 #> [5,] 0.006597912 -0.005309164 -0.013706567  0.003762132 0.004954498 #>                 5             6             7           8            9 #> [1,]  0.023429739  0.0008855049 -0.0008031409  0.01845672  0.007296080 #> [2,]  0.021161920 -0.0037596776 -0.0228106981  0.02145241 -0.016333337 #> [3,]  0.019589614 -0.0157842088 -0.0205482958 -0.01682673  0.006492367 #> [4,] -0.021241868  0.0120933780  0.0071409237 -0.01524721 -0.003876502 #> [5,] -0.006814007 -0.0002113734 -0.0114875897  0.01688435  0.019873100 #>                 10            11           12            13           14 #> [1,]  0.0108876044 -0.0203660950 -0.002717218  0.0097722915  0.020980010 #> [2,] -0.0001741058 -0.0076395268  0.012085242  0.0004795836  0.007465208 #> [3,] -0.0031747482 -0.0005560865 -0.012300390 -0.0113514425 -0.020405579 #> [4,]  0.0099316048 -0.0134350333  0.011887663 -0.0009431939 -0.023917329 #> [5,] -0.0003226875 -0.0044483480  0.002744308  0.0234218377 -0.014900875 #>                15           16           17            18            19 #> [1,] -0.003934121 -0.006617595  0.025143287 -0.0256152072  0.0334966624 #> [2,]  0.016110175 -0.016670374  0.016971878 -0.0064052204 -0.0222250628 #> [3,] -0.010477457 -0.019157848 -0.016255004  0.0004144152  0.0188460452 #> [4,] -0.015570323 -0.010252212  0.016390588  0.0302162810  0.0005143712 #> [5,]  0.006584058  0.015354836  0.004002596 -0.0176610786 -0.0024832008 #>                20 #> [1,]  0.027294075 #> [2,]  0.012874434 #> [3,]  0.004833667 #> [4,] -0.007174238 #> [5,]  0.025782001 #>  #> $trans.dep #>                obs             1             2            3            4 #> [1,] -0.0096317459  0.0001668722 -0.0006470824  0.013525596  0.003975326 #> [2,]  0.0001052847  0.0026044475 -0.0025086253  0.007485888  0.011511687 #> [3,] -0.0012054802  0.0024143456  0.0107763290 -0.007058557 -0.006976384 #> [4,]  0.0003049938  0.0058686861 -0.0060236255  0.004441567  0.005719648 #> [5,] -0.0067322132 -0.0037803306 -0.0196088427  0.011721019  0.009541593 #>                  5            6             7            8             9 #> [1,] -0.0100856493 -0.009991440  0.0099054049 -0.002248781  0.0156454030 #> [2,] -0.0017038403 -0.007723588 -0.0006805453 -0.003481510 -0.0139257208 #> [3,] -0.0036448717 -0.005847518 -0.0062966800 -0.020854636 -0.0172129673 #> [4,] -0.0004855284 -0.012795181 -0.0098327727 -0.015091369 -0.0009401536 #> [5,]  0.0013088725 -0.010638587  0.0187370708  0.003809377  0.0118189302 #>                10           11           12            13           14 #> [1,]  0.015698579 -0.006000650 -0.006025437  0.0008534936  0.003430211 #> [2,]  0.007029371 -0.000697995 -0.007211753  0.0059005969  0.010332527 #> [3,] -0.015139033 -0.001256605  0.007629036  0.0280707121 -0.007561715 #> [4,] -0.002535357  0.011680930  0.006752193 -0.0213885276  0.011193745 #> [5,]  0.004492546  0.001922984 -0.002002603 -0.0169213390  0.002804351 #>                15            16           17           18           19 #> [1,]  0.007556011  0.0006975328 -0.002337213  0.010917721 -0.001752866 #> [2,] -0.008491422 -0.0055958179 -0.016657204 -0.009000911  0.004867422 #> [3,]  0.005899404 -0.0054807367  0.003341629  0.001260388  0.004941414 #> [4,] -0.001113087 -0.0169926541  0.014628287 -0.016080604  0.003836330 #> [5,]  0.006398971  0.0120046899  0.011383988 -0.007419899 -0.008528328 #>                20 #> [1,]  0.002757938 #> [2,]  0.013610132 #> [3,] -0.003218213 #> [4,] -0.002311782 #> [5,] -0.006409589"},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"convergence-diagnostics","dir":"Articles","previous_headings":"","what":"Convergence Diagnostics","title":"Dynamic Effects in Longitudinal AME Models","text":"Dynamic models typically require: Longer burn-(≥ 1000 iterations) samples (≥ 20000 post burn-) Careful monitoring ρ\\rho σ2\\sigma^2 parameters","code":"# Check effective sample sizes library(coda) mcmc_samples <- as.mcmc(fit_dynamic$BETA) effectiveSize(mcmc_samples)  # Trace plots for dynamic parameters (if available) # par(mfrow = c(2, 2)) # if(!is.null(fit_dynamic$rho_uv)) plot(fit_dynamic$rho_uv, type = \"l\", main = \"rho_uv trace\") # if(!is.null(fit_dynamic$sigma_uv)) plot(fit_dynamic$sigma_uv, type = \"l\", main = \"sigma_uv trace\") # if(!is.null(fit_dynamic$rho_ab)) plot(fit_dynamic$rho_ab, type = \"l\", main = \"rho_ab trace\") # if(!is.null(fit_dynamic$sigma_ab)) plot(fit_dynamic$sigma_ab, type = \"l\", main = \"sigma_ab trace\")"},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Dynamic Effects in Longitudinal AME Models","text":"Sewell, D. K., & Chen, Y. (2015). Latent space models dynamic networks. Journal American Statistical Association, 110(512), 1646-1657. Durante, D., & Dunson, D. B. (2014). Nonparametric Bayes dynamic modeling relational data. Biometrika, 101(4), 883-898.","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"posterior-distributions","dir":"Articles","previous_headings":"Appendix: Mathematical Details","what":"Posterior Distributions","title":"Dynamic Effects in Longitudinal AME Models","text":"AR(1) parameters, full conditionals : p(ρ|⋅)∝p(ρ)∏t=2Tp(xt|xt−1,ρ,σ2)p(\\rho | \\cdot) \\propto p(\\rho) \\prod_{t=2}^T p(x_t | x_{t-1}, \\rho, \\sigma^2) p(σ2|⋅)∼IG(α+n(T−1)2,β+12∑t=2T||xt−ρxt−1||2)p(\\sigma^2 | \\cdot) \\sim \\text{IG}\\left(\\alpha + \\frac{n(T-1)}{2}, \\beta + \\frac{1}{2}\\sum_{t=2}^T ||x_t - \\rho x_{t-1}||^2\\right)","code":""},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"identification","dir":"Articles","previous_headings":"Appendix: Mathematical Details","what":"Identification","title":"Dynamic Effects in Longitudinal AME Models","text":"dynamic effects identified : 1. Temporal ordering constraints 2. Stationarity assumption (|ρ|<1|\\rho| < 1) 3. Initial state distribution x1∼N(0,σ2/(1−ρ2))x_1 \\sim N(0, \\sigma^2/(1-\\rho^2))","code":""},{"path":"https://netify-dev.github.io/lame/articles/dynamic_effects.html","id":"computational-complexity","dir":"Articles","previous_headings":"Appendix: Mathematical Details","what":"Computational Complexity","title":"Dynamic Effects in Longitudinal AME Models","text":"Time complexity: O(n2RT)O(n^2 RT) per iteration Space complexity: O(nRT)O(nRT) storage Mixing time: Typically O(logT)O(\\log T) good initialization","code":""},{"path":"https://netify-dev.github.io/lame/articles/lame-overview.html","id":"package-overview","dir":"Articles","previous_headings":"","what":"Package Overview","title":"lame Overview","text":"vignette provides overview lame package, offers toolkit estimating Additive Multiplicative Effects (AME) models replicated relational/longitudinal data. easily handles changing actor composition c++ implementation faster computation well missing data (Minhas et al. 2022; Hoff 2021). package designed part netify-verse, means works seamlessly core netify package. netify package provides convenient way prepare relational data use lame. users can : Model different types relational data: flexible various data including normal (nrm), binary probit (bin), ordinal probit (ord), censored binary (cbin), fixed rank nomination (frn), row rank (rrl) models showing flexibility various data. Analyze replicated data: allows users model relationships evolve time accounting network dependencies across time periods. Visualize model parameters: use trace plots density plots assess convergence parameter distributions. Users able visualize MCMC diagnostics parameter uncertainty. Evaluate model fit: use goodness--fit plots network statistics heterogeneity, transitivity, dyadic dependence, cyclic dependence. Users able visualize actual deviation model fit year data, enabling users analyze well model captures unique network structure present data time. Visualize network patterns actor latent space: use circular network plots show sender target countries clear informative manner. Users working netify can easily prepare data use lame using to_amen() function setting lame = TRUE allowing direct model fitting without data conversion.","code":""},{"path":"https://netify-dev.github.io/lame/articles/lame-overview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"lame Overview","text":"vignette shows use main functions lame package. , make use data Threat Imposition Sanctions (TIES) dataset (Morgan et.al 2014), contains information sanctions imposed countries . data processed contains 35 countries years 1993-1995 2000. loaded, dataset includes 4 Rda files: Y: sanction matrices (dependent Variable). dependent variable consists directed binary sanctions networks four years: 1993, 1994, 1995, 2000. matrix indicates whether country imposed sanctions country j given year. Xdyad (dyadic covariates): include two dyadic covariates found Xdyad: distance shared IGOs. stored list matrices, one year. Xrow Xcol (nodal covariates): include two nodal covariates country: GDP population. stored two matrices, Xrow Xcol, rows correspond sender countries columns target countries. can add different covariates either target sender countries tto keep simple, use covariates . begin loading TIES data. run model using lame() function. specify family = “binary” binary network data include additive effects (sender receiver random effects) multiplicative effects (R = 2) capture complex relational patterns across time periods. Run model First can check summary model using lame’s built-summary function. see model shows wealthier populous countries likely impose sanctions less wealthy less populous countries. also observe populous countries likely sanctioned (target-column effects). addition, countries belong international organizations likely sanction . suggests institutions provide information facilitate economic sanctions countries members organization. Distance negatively associated sanctions, indicates geographically closer countries likely sanction . can check types parameters included fitted lame model use trace_plot function visualize well model’s parameters converged.  trace_plot function produces traceplots density plots parameter model, helping visualize MCMC convergence posterior distributions. Looking density plots, can check parameters overlap 90% 95% credible intervals. , indicates evidence sender receiver heterogeneity. overlap, suggests evidence sender receiver effects. example, variables show evidence sender receiver heterogeneity sanctioning patterns across countries, posterior distributions overlap credible intervals. trace plots, need run Markov chain much longer model converge. Next, use gof_plot function visualize goodness fit model.  analyze well model able accurately represent heterogeneity, transitivity cycle dependence. blue line shows observed heterogeneity model red line heterogeneity simulated values. shaded area shows 90% credible interval. see model good job representing heterogeneity transitivity dyadic cyclic dependence data. Since longitudinal model (LAME), gof_plot function automatically produce time series plots showing network statistics evolve time credible intervals. plot shows observed values (points) posterior predictive intervals (shaded regions) network statistic across time periods. observed values fall outside credible bands, suggests model may fully capture network structure time points. can help identify periods network exhibits unique characteristics model struggles represent. Finally, let’s visualize latent space sender receiver countries using uv_plot function.  function creates visualization multiplicative effects (latent factors) model. Actors close together latent space tend similar patterns connections - either targeting similar actors (looking sender positions) targeted similar actors (looking receiver positions). Countries impose sanctions receive sanctions similar countries close latent space representation. instance, Canada (CAN) USA positioned close together indicating sanction similar countries. Similarly, countries like Italy (ITA), Dominican Republic (DOM) Japan (JPN) suggest receive sanctions similar countries. Actors diagonal , Norway () Iran (IRN), indicate likely sanction .","code":"# Fit the AME model for binary data fit <- lame(   Y = Y,                       Xdyad = Xdyad,           # dyadic covariates   Xrow = Xrow,             # sender covariates   Xcol = Xcol,             # receiver covariates    family = \"binary\",       # Binary  model   rvar = TRUE,             # sender random effects   cvar = TRUE,             # receiver random effects   dcor = TRUE,            # Dyadic correlation   R = 2,                   # Multiplicative effects dimension   symmetric = FALSE,       # Directed networks   burn = 100,              # Burn-in iterations   nscan = 500,             # Post-burn-in iterations   odens = 25,              # Output density   print = FALSE,           # Suppress iteration output   plot = FALSE             # Suppress real-time plots ) summary(fit)  === Longitudinal AME Model Summary ===  Call: NULL  Regression coefficients: ------------------------                  Estimate StdError z_value p_value CI_lower CI_upper   intercept               0        0     NaN     NaN        0        0   log_gdp.row             0        0     NaN     NaN        0        0   log_pop.row             0        0     NaN     NaN        0        0   log_gdp.col             0        0     NaN     NaN        0        0   log_pop.col             0        0     NaN     NaN        0        0   distance.dyad           0        0     NaN     NaN        0        0   shared_igos.dyad        0        0     NaN     NaN        0        0   --- Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  Variance components: -------------------     Estimate StdError va     1.379    0.358 cab    1.325    0.339 vb     1.343    0.324 rho    0.539    0.077 ve     1.000    0.000 names(fit)  [1] \"BETA\"           \"VC\"             \"APM\"            \"BPM\"             [5] \"U\"              \"V\"              \"UVPM\"           \"EZ\"              [9] \"YPM\"            \"GOF\"            \"start_vals\"     \"tryErrorChecks\" [13] \"model.name\"     \"family\"         \"symmetric\"      \"odmax\"          [17] \"mode\"           \"n_time\"         \"dynamic_uv\"     \"dynamic_ab\"     [21] \"Xlist\"          trace_plot(fit, params = \"beta\") gof_plot(fit) # Network plot showing multiplicative effects uv_plot(fit) +   ggtitle(\"Sanctions Network - Multiplicative Effects\") +   theme_minimal() +   theme(     legend.position='none',     axis.text=element_blank(),     axis.title=element_blank()   )"},{"path":"https://netify-dev.github.io/lame/articles/lame-overview.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"lame Overview","text":"lame package provides way users analyze additive multiplicative effects across replicated relational data. vignette demonstrates basic functionality lame package provides walk-application international sanctions data. References: Hoff, PD (2021) Additive Multiplicative Effects Network Models. Statistical Science 36, 34–50. Morgan, T. Clifton, Bapat, N., & Kobayashi, Y. (2014). Threat Imposition Economic Sanctions 1945-2005. Conflict Management Peace Science 31(5): 541-558. Minhas, S., Dorff, C., Gallop, M. B., Foster, M., Liu, H., Tellez, J., & Ward, M. D. (2022). Taking dyads seriously. Political Science Research Methods, 10(4), 703–721. doi:10.1017/psrm.2021.56","code":""},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to LAME","text":"LAME (Longitudinal Analysis Multilevel nEtworks) package implements Additive Multiplicative Effects (AME) models longitudinal network data. extends AME framework handle temporal dependencies dynamic latent factors additive effects.","code":""},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"key-features","dir":"Articles","previous_headings":"","what":"Key Features","title":"Introduction to LAME","text":"Longitudinal Network Analysis: Model network evolution time Dynamic Effects: Time-varying additive multiplicative effects AR(1) processes Bipartite Networks: Full support two-mode networks rectangular adjacency matrices Efficient Implementation: C++ backend computational efficiency","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"fitting-a-simple-model","dir":"Articles","previous_headings":"Basic Usage","what":"Fitting a Simple Model","title":"Introduction to LAME","text":"","code":"# Load example data (list of networks over time) data(example_networks)  # This would be your data  # Fit a basic LAME model fit <- lame(   Y = example_networks,   R = 2,                # 2 latent dimensions   family = \"binary\",    # Binary networks   nscan = 5000,        # Number of MCMC iterations   burn = 500,          # Burn-in period   odens = 25           # Output density )  # View results summary(fit) plot(fit)"},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"dynamic-effects","dir":"Articles","previous_headings":"Basic Usage","what":"Dynamic Effects","title":"Introduction to LAME","text":"Model time-varying sender/receiver effects latent positions:","code":"# Fit model with dynamic effects fit_dynamic <- lame(   Y = example_networks,   R = 2,   dynamic_ab = TRUE,   # Dynamic additive effects   dynamic_uv = TRUE,   # Dynamic multiplicative effects   family = \"binary\",   nscan = 10000,   burn = 1000,   odens = 25 )  # Visualize temporal evolution ab_plot(fit_dynamic, plot_type = \"trajectory\") uv_plot(fit_dynamic, time_point = \"all\")"},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"including-covariates","dir":"Articles","previous_headings":"Basic Usage","what":"Including Covariates","title":"Introduction to LAME","text":"","code":"# Fit model with covariates fit_cov <- lame(   Y = example_networks,   Xdyad = dyadic_covariates,    # Dyadic covariates   Xrow = sender_covariates,      # Sender covariates   Xcol = receiver_covariates,    # Receiver covariates   R = 2,   family = \"binary\",   nscan = 10000 )"},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"model-families","dir":"Articles","previous_headings":"","what":"Model Families","title":"Introduction to LAME","text":"LAME supports various network data types: \"normal\": Continuous valued networks \"binary\": Binary networks \"ordinal\": Ordinal networks \"poisson\": Count networks \"tobit\": Censored continuous networks \"frn\": Fixed rank nomination networks \"cbin\": Censored binary networks \"rrl\": Row-ranked likelihood networks","code":""},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"bipartite-networks","dir":"Articles","previous_headings":"","what":"Bipartite Networks","title":"Introduction to LAME","text":"two-mode networks different row column node sets:","code":"# Fit bipartite model fit_bip <- lame(   Y = bipartite_networks,   mode = \"bipartite\",   R_row = 3,           # 3 dimensions for row nodes   R_col = 2,           # 2 dimensions for column nodes   family = \"binary\",   nscan = 10000 )  # Access the interaction matrix fit_bip$G  # Rectangular matrix mapping row to column latent spaces"},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"goodness-of-fit","dir":"Articles","previous_headings":"Model Assessment","what":"Goodness-of-Fit","title":"Introduction to LAME","text":"","code":"# Plot GOF statistics gof_plot(fit)  # Access GOF statistics directly gof_stats <- fit$GOF"},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"mcmc-diagnostics","dir":"Articles","previous_headings":"Model Assessment","what":"MCMC Diagnostics","title":"Introduction to LAME","text":"","code":"# Trace plots for convergence assessment trace_plot(fit)  # Effective sample sizes fit$ESS"},{"path":[]},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"priors","dir":"Articles","previous_headings":"Advanced Options","what":"Priors","title":"Introduction to LAME","text":"Customize prior distributions:","code":"fit_custom <- lame(   Y = example_networks,   prior = list(     Sab0 = diag(2),     # Prior scale for variance     eta0 = 10,          # Prior degrees of freedom     rho_ab_mean = 0.8,  # AR(1) mean for dynamic effects     rho_ab_sd = 0.1     # AR(1) standard deviation   ),   nscan = 10000 )"},{"path":"https://netify-dev.github.io/lame/articles/lame.html","id":"symmetric-networks","dir":"Articles","previous_headings":"Advanced Options","what":"Symmetric Networks","title":"Introduction to LAME","text":"undirected networks:","code":"fit_sym <- lame(   Y = undirected_networks,   symmetric = TRUE,   R = 2,   family = \"normal\",   nscan = 10000 )"},{"path":"https://netify-dev.github.io/lame/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shahryar Minhas. Author, maintainer. Tosin Salau. Author. Cassy Dorff. Author.","code":""},{"path":"https://netify-dev.github.io/lame/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Minhas S, Salau T, Dorff C (2025). lame: Longitudinal Additive Multiplicative Effects Models Networks. R package version 0.10, https://netify-dev.github.io/lame/.","code":"@Manual{,   title = {lame: Longitudinal Additive and Multiplicative Effects Models for Networks},   author = {Shahryar Minhas and Tosin Salau and Cassy Dorff},   year = {2025},   note = {R package version 0.10},   url = {https://netify-dev.github.io/lame/}, }"},{"path":"https://netify-dev.github.io/lame/readME.html","id":null,"dir":"","previous_headings":"","what":"lame ","title":"lame ","text":"Longitudinal Additive Multiplicative Effects Models Networks","code":""},{"path":"https://netify-dev.github.io/lame/readME.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"lame ","text":"lame package extends Additive Multiplicative Effects (AME) framework network analysis, providing support cross-sectional longitudinal networks. package includes two main functions: ame cross-sectional network analysis lame longitudinal network analysis dynamic effects capture temporal heterogeneity autoregressive processes. functions support unipartite (square) bipartite (rectangular) network structures, making suitable analyzing various types relational data.","code":""},{"path":"https://netify-dev.github.io/lame/readME.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"lame ","text":"two options installing lame:","code":""},{"path":"https://netify-dev.github.io/lame/readME.html","id":"id_-option-1-install-from-github-requires-build-tools","dir":"","previous_headings":"Installation","what":"🔧 Option 1: Install from GitHub (requires build tools)","title":"lame ","text":"⚠️ Requires R build tools: - macOS: Xcode Command Line Tools - Windows: Rtools - Linux: build-essential related packages","code":"# Install from GitHub # install.packages(\"devtools\") devtools::install_github(\"netify-dev/lame\", dependencies = TRUE)"},{"path":"https://netify-dev.github.io/lame/readME.html","id":"id_-option-2-install-from-cran-coming-soon--maybe--probably","dir":"","previous_headings":"Installation","what":"📦 Option 2: Install from CRAN (coming soon … maybe … probably)","title":"lame ","text":"","code":"# Once available on CRAN install.packages(\"lame\")"},{"path":"https://netify-dev.github.io/lame/readME.html","id":"first-install-dependencies-if-needed","dir":"","previous_headings":"Installation > 📦 Option 2: Install from CRAN (coming soon … maybe … probably)","what":"First, install dependencies (if needed):","title":"lame ","text":"","code":"# Install required packages if you don't already have them deps <- c(\"Rcpp\", \"RcppArmadillo\", \"ggplot2\", \"plyr\", \"reshape2\",            \"ggrepel\", \"network\", \"gridExtra\", \"coda\", \"cli\",            \"rlang\", \"lifecycle\", \"purrr\")  # Check which packages are not installed missing_deps <- deps[!deps %in% installed.packages()[,\"Package\"]]  # Install missing packages if(length(missing_deps) > 0) {   install.packages(missing_deps, repos='https://cloud.r-project.org/') }"},{"path":"https://netify-dev.github.io/lame/readME.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"lame ","text":"","code":"library(lame)  # Load example data data(\"vignette_data\")  # Fit a basic longitudinal AME model fit <- lame(   Y = Y,                    # List of T network matrices   Xdyad = Xdyad,           # Dyadic covariates   Xrow = Xrow,             # Sender covariates   Xcol = Xcol,             # Receiver covariates   family = \"binary\",       # Network type   R = 2,                   # Latent dimensions   burn = 100,              # Burn-in iterations   nscan = 500              # Post-burn samples )  # Summary and diagnostics summary(fit)"},{"path":"https://netify-dev.github.io/lame/readME.html","id":"dynamic-effects-models","dir":"","previous_headings":"Quick Start","what":"Dynamic Effects Models","title":"lame ","text":"key innovation lame ability model time-varying network effects:","code":"# Fit model with dynamic effects fit_dynamic <- lame(   Y = Y,   Xdyad = Xdyad,   Xrow = Xrow,   Xcol = Xcol,   family = \"binary\",   dynamic_ab = TRUE,       # Time-varying sender/receiver effects   dynamic_uv = TRUE,       # Time-varying latent positions   R = 2,   burn = 1000,            # Longer burn-in for dynamic models   nscan = 5000,           # More samples for temporal correlation   prior = list(           # Customize temporal persistence     rho_uv_mean = 0.9,    # High persistence for latent factors     rho_ab_mean = 0.8     # Moderate persistence for additive effects   ) )"},{"path":"https://netify-dev.github.io/lame/readME.html","id":"visualization","dir":"","previous_headings":"","what":"Visualization","title":"lame ","text":"Plotting functions:","code":"# Visualize additive effects (sender/receiver) ab_plot(fit, effect = \"sender\")                    # Static effects ab_plot(fit_dynamic, plot_type = \"trajectory\")     # Dynamic effects over time ab_plot(fit_dynamic, time_point = \"average\")       # Time-averaged dynamic effects  # Visualize multiplicative effects (latent factors) uv_plot(fit)                                       # Static latent positions uv_plot(fit_dynamic, plot_type = \"trajectory\")     # Dynamic trajectories uv_plot(fit_dynamic, plot_type = \"faceted\")        # Multiple time points  # Model diagnostics trace_plot(list(BETA = fit$BETA, VC = fit$VC))    # MCMC convergence gof_plot(fit)                                       # Goodness-of-fit"},{"path":[]},{"path":"https://netify-dev.github.io/lame/readME.html","id":"id_-dynamic-effects-modeling","dir":"","previous_headings":"Key Features","what":"📈 Dynamic Effects Modeling","title":"lame ","text":"Time-varying latent positions (dynamic_uv): Captures evolving community structure homophily patterns via AR(1) processes Time-varying heterogeneity (dynamic_ab): Models changing individual activity levels popularity time Bipartite network support: Handles rectangular adjacency matrices separate latent factors row column nodes Flexible priors: Customizable temporal persistence (ρ) innovation variance (σ²) parameters Theoretical foundation: Based Sewell & Chen (2015, JASA) Durante & Dunson (2014, Biometrika)","code":""},{"path":"https://netify-dev.github.io/lame/readME.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"lame ","text":"Getting Started: vignette(\"lame-overview\") Dynamic Effects: vignette(\"dynamic_effects\") Bipartite Networks: vignette(\"bipartite\")","code":""},{"path":"https://netify-dev.github.io/lame/readME.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"lame ","text":"use lame research, please cite: dynamic effects implementation draws : Sewell, D. K., & Chen, Y. (2015). Latent space models dynamic networks. Journal American Statistical Association, 110(512), 1646-1657. Durante, D., & Dunson, D. B. (2014). Nonparametric Bayes dynamic modeling relational data. Biometrika, 101(4), 883-898.","code":"@Manual{lame2024,   title = {lame: Longitudinal Additive and Multiplicative Effects Models for Networks},   author = {Shahryar Minhas and Tosin Salau and Cassy Dorff},   year = {2024},   note = {R package version 0.10},   url = {https://github.com/netify-dev/lame}, }"},{"path":"https://netify-dev.github.io/lame/readME.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"lame ","text":"Shahryar Minhas (Michigan State University) Cassy Dorff (Vanderbilt University) Tosin Salau (Michigan State University)","code":""},{"path":"https://netify-dev.github.io/lame/readME.html","id":"license","dir":"","previous_headings":"","what":"License","title":"lame ","text":"MIT License - see LICENSE file details.","code":""},{"path":"https://netify-dev.github.io/lame/readME.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"lame ","text":"🐛 Bug Reports: GitHub Issues 💬 Questions: GitHub Discussions 📧 Contact: minhassh@msu.edu","code":""},{"path":"https://netify-dev.github.io/lame/reference/IR90s.html","id":null,"dir":"Reference","previous_headings":"","what":"International relations in the 90s — IR90s","title":"International relations in the 90s — IR90s","text":"relational dataset recording variety nodal dyadic variables countries 1990s, including information conflicts, trade variables. Except conflict variable, variables averages across decade.","code":""},{"path":"https://netify-dev.github.io/lame/reference/IR90s.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"International relations in the 90s — IR90s","text":"list consisting socioarray dyadvars dyadic variables matrix  nodevars nodal variables. dyadic variables include total number conflicts; exports (billions dollars); distance (thousands kilometers); number shared IGOs (averages across years); polity interaction. nodal variables include population (millions); gdp (billions dollars); polity","code":""},{"path":"https://netify-dev.github.io/lame/reference/IR90s.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"International relations in the 90s — IR90s","text":"Michael Ward.","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xbeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear combinations of submatrices of an array — Xbeta","title":"Linear combinations of submatrices of an array — Xbeta","text":"Computes matrix expected values based array X predictors vector beta regression coefficients.","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xbeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear combinations of submatrices of an array — Xbeta","text":"","code":"Xbeta(X, beta)"},{"path":"https://netify-dev.github.io/lame/reference/Xbeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear combinations of submatrices of an array — Xbeta","text":"X n n p array beta p 1 vector","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xbeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear combinations of submatrices of an array — Xbeta","text":"n n matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xbeta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Linear combinations of submatrices of an array — Xbeta","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xcol.html","id":null,"dir":"Reference","previous_headings":"","what":"Column covariates — Xcol","title":"Column covariates — Xcol","text":"Sample column covariates AME model examples","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xcol.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Column covariates — Xcol","text":"matrix column covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xdyad.html","id":null,"dir":"Reference","previous_headings":"","what":"Dyadic covariates — Xdyad","title":"Dyadic covariates — Xdyad","text":"Sample dyadic covariates AME model examples","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xdyad.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dyadic covariates — Xdyad","text":"array dyadic covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Row covariates — Xrow","title":"Row covariates — Xrow","text":"Sample row covariates AME model examples","code":""},{"path":"https://netify-dev.github.io/lame/reference/Xrow.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Row covariates — Xrow","text":"matrix row covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/Y.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational matrix — Y","title":"Relational matrix — Y","text":"Sample relational matrix AME model examples","code":""},{"path":"https://netify-dev.github.io/lame/reference/Y.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Relational matrix — Y","text":"square matrix representing relational data","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"binary relational data and covariates — YX_bin","title":"binary relational data and covariates — YX_bin","text":"synthetic dataset includes binary relational data well information eight covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"binary relational data and covariates — YX_bin","text":"","code":"data(YX_bin)"},{"path":"https://netify-dev.github.io/lame/reference/YX_bin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"binary relational data and covariates — YX_bin","text":"format : List 2 $ Y: num [1:100, 1:100] NA 0 0 0 0 0 0 0 0 1 ...  $ X: num [1:100, 1:100, 1:8] 1 1 1 1 1 1 1 1 1 1 ...  ..- attr(*, \"dimnames\")=List 3 .. ..$ : NULL .. ..$ : NULL .. ..$ : chr [1:8] \"intercept\" \"rgpa\" \"rsmoke\" \"cgpa\" ...","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"binary relational data and covariates — YX_bin","text":"","code":"data(YX_bin) gof_stats(YX_bin$Y)  #> sd.rowmean sd.colmean   dyad.dep  cycle.dep  trans.dep  #> 0.04977650 0.03099423 0.52449087 0.01984067 0.02400606"},{"path":"https://netify-dev.github.io/lame/reference/YX_bin_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary relational data list — YX_bin_list","title":"Binary relational data list — YX_bin_list","text":"list containing binary relational data list format associated covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_bin_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Binary relational data list — YX_bin_list","text":"list containing Y X matrices binary relational data","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_bin_long.html","id":null,"dir":"Reference","previous_headings":"","what":"binary relational data and covariates — YX_bin_long","title":"binary relational data and covariates — YX_bin_long","text":"synthetic dataset includes longitudinal binary relational data well information covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_bin_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"binary relational data and covariates — YX_bin_long","text":"","code":"data(YX_bin_long)"},{"path":"https://netify-dev.github.io/lame/reference/YX_bin_long.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"binary relational data and covariates — YX_bin_long","text":"list","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_bin_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"binary relational data and covariates — YX_bin_long","text":"","code":"data(YX_bin_long) gof_stats(YX_bin_long$Y[,,1])  #>    sd.rowmean    sd.colmean      dyad.dep     cycle.dep     trans.dep  #>  1.2875878372  1.0283258142  0.0605373469 -0.0011261862  0.0001072177"},{"path":"https://netify-dev.github.io/lame/reference/YX_cbin.html","id":null,"dir":"Reference","previous_headings":"","what":"Censored binary nomination data and covariates — YX_cbin","title":"Censored binary nomination data and covariates — YX_cbin","text":"synthetic dataset includes relational data number nominations per row censored 10, along information eight covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_cbin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Censored binary nomination data and covariates — YX_cbin","text":"","code":"data(YX_cbin)"},{"path":"https://netify-dev.github.io/lame/reference/YX_cbin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Censored binary nomination data and covariates — YX_cbin","text":"format : List 2 $ Y: num [1:100, 1:100] NA 0 0 0 1 0 0 0 0 3 ...  $ X: num [1:100, 1:100, 1:8] 1 1 1 1 1 1 1 1 1 1 ...  ..- attr(*, \"dimnames\")=List 3 .. ..$ : NULL .. ..$ : NULL .. ..$ : chr [1:8] \"intercept\" \"rgpa\" \"rsmoke\" \"cgpa\" ...","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_cbin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Censored binary nomination data and covariates — YX_cbin","text":"","code":"data(YX_cbin) gof_stats(YX_cbin$Y)  #>  sd.rowmean  sd.colmean    dyad.dep   cycle.dep   trans.dep  #> 0.039373005 0.028860506 0.539267664 0.008495321 0.015489824"},{"path":"https://netify-dev.github.io/lame/reference/YX_frn.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed rank nomination data and covariates — YX_frn","title":"Fixed rank nomination data and covariates — YX_frn","text":"synthetic dataset includes fixed rank nomination data well information eight covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_frn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed rank nomination data and covariates — YX_frn","text":"","code":"data(YX_frn)"},{"path":"https://netify-dev.github.io/lame/reference/YX_frn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fixed rank nomination data and covariates — YX_frn","text":"format : List 2 $ Y: num [1:100, 1:100] NA 0 0 0 1 0 0 0 0 3 ...  $ X: num [1:100, 1:100, 1:8] 1 1 1 1 1 1 1 1 1 1 ...  ..- attr(*, \"dimnames\")=List 3 .. ..$ : NULL .. ..$ : NULL .. ..$ : chr [1:8] \"intercept\" \"rgpa\" \"rsmoke\" \"cgpa\" ...","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_frn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed rank nomination data and covariates — YX_frn","text":"","code":"data(YX_frn) gof_stats(YX_frn$Y)  #>  sd.rowmean  sd.colmean    dyad.dep   cycle.dep   trans.dep  #> 0.216963190 0.152754547 0.544539588 0.008276425 0.015688679"},{"path":"https://netify-dev.github.io/lame/reference/YX_nrm.html","id":null,"dir":"Reference","previous_headings":"","what":"normal relational data and covariates — YX_nrm","title":"normal relational data and covariates — YX_nrm","text":"synthetic dataset includes continuous (normal) relational data well information eight covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_nrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"normal relational data and covariates — YX_nrm","text":"","code":"data(YX_nrm)"},{"path":"https://netify-dev.github.io/lame/reference/YX_nrm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"normal relational data and covariates — YX_nrm","text":"format : List 2 $ Y: num [1:100, 1:100] NA -4.05 -0.181 -3.053 -1.579 ...  $ X: num [1:100, 1:100, 1:8] 1 1 1 1 1 1 1 1 1 1 ...  ..- attr(*, \"dimnames\")=List 3 .. ..$ : NULL .. ..$ : NULL .. ..$ : chr [1:8] \"intercept\" \"rgpa\" \"rsmoke\" \"cgpa\" ...","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_nrm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"normal relational data and covariates — YX_nrm","text":"","code":"data(YX_nrm) gof_stats(YX_nrm$Y) #> sd.rowmean sd.colmean   dyad.dep  cycle.dep  trans.dep  #> 0.93582644 0.27834223 0.65987298 0.03557144 0.04263373"},{"path":"https://netify-dev.github.io/lame/reference/YX_ord.html","id":null,"dir":"Reference","previous_headings":"","what":"ordinal relational data and covariates — YX_ord","title":"ordinal relational data and covariates — YX_ord","text":"synthetic dataset includes ordinal relational data well information seven covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_ord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ordinal relational data and covariates — YX_ord","text":"","code":"data(YX_ord)"},{"path":"https://netify-dev.github.io/lame/reference/YX_ord.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ordinal relational data and covariates — YX_ord","text":"format : List 2 $ Y: num [1:100, 1:100] NA 0 3 0 3 1 0 1 1 0 ...  $ X: num [1:100, 1:100, 1:7] 1 1 1 1 1 1 1 1 1 1 ...  ..- attr(*, \"dimnames\")=List 3 .. ..$ : NULL .. ..$ : NULL .. ..$ : chr [1:7] \"rgpa\" \"rsmoke\" \"cgpa\" \"csmoke\" ...","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_ord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ordinal relational data and covariates — YX_ord","text":"","code":"data(YX_ord) gof_stats(YX_ord$Y) #> sd.rowmean sd.colmean   dyad.dep  cycle.dep  trans.dep  #> 0.64985277 0.27841315 0.68044237 0.04941867 0.06566578"},{"path":"https://netify-dev.github.io/lame/reference/YX_rrl.html","id":null,"dir":"Reference","previous_headings":"","what":"row-specific ordinal relational data and covariates — YX_rrl","title":"row-specific ordinal relational data and covariates — YX_rrl","text":"synthetic dataset includes row-specific ordinal relational data well information five covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_rrl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"row-specific ordinal relational data and covariates — YX_rrl","text":"","code":"data(YX_rrl)"},{"path":"https://netify-dev.github.io/lame/reference/YX_rrl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"row-specific ordinal relational data and covariates — YX_rrl","text":"format : List 2 $ Y: num [1:100, 1:100] NA 0 3 0 3 1 0 1 1 0 ...  $ X: num [1:100, 1:100, 1:5] 1 1 1 1 1 1 1 1 1 1 ...  ..- attr(*, \"dimnames\")=List 3 .. ..$ : NULL .. ..$ : NULL .. ..$ : chr [1:5] \"cgpa\" \"csmoke\" \"igrade\" \"ismoke\" ...","code":""},{"path":"https://netify-dev.github.io/lame/reference/YX_rrl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"row-specific ordinal relational data and covariates — YX_rrl","text":"","code":"data(YX_rrl) gof_stats(YX_rrl$Y) #>  sd.rowmean  sd.colmean    dyad.dep   cycle.dep   trans.dep  #> 0.216963190 0.152754547 0.544539588 0.008276425 0.015688679"},{"path":"https://netify-dev.github.io/lame/reference/ab_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize sender and receiver random effects — ab_plot","title":"Visualize sender and receiver random effects — ab_plot","text":"Creates visualization additive sender (row) receiver (column) random effects AME LAME model. Automatically detects whether effects static dynamic provides appropriate visualization options.","code":""},{"path":"https://netify-dev.github.io/lame/reference/ab_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize sender and receiver random effects — ab_plot","text":"","code":"ab_plot(   fit,   effect = c(\"sender\", \"receiver\"),   sorted = TRUE,   labels = NULL,   title = NULL,   time_point = NULL,   plot_type = c(\"snapshot\", \"trajectory\", \"faceted\", \"ribbon\"),   show_actors = NULL )"},{"path":"https://netify-dev.github.io/lame/reference/ab_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize sender and receiver random effects — ab_plot","text":"fit object class \"ame\" \"lame\" fitting AME model effect Character string specifying effect plot: \"sender\" (default) \"receiver\" sorted Logical; TRUE (default), actors sorted effect magnitude labels Logical; TRUE, actor labels shown x-axis (default TRUE n <= 50 actors) title Optional title plot time_point dynamic effects, time point plot (default: last). Can numeric index, \"\" faceted plot, \"average\" time-averaged plot_type dynamic effects: \"snapshot\" (single time), \"trajectory\" (evolution time), \"faceted\" (grid time points), \"ribbon\" (confidence bands time). static effects, parameter ignored. show_actors Character vector specific actors highlight (dynamic trajectory/ribbon plots)","code":""},{"path":"https://netify-dev.github.io/lame/reference/ab_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize sender and receiver random effects — ab_plot","text":"ggplot2 object can customized","code":""},{"path":"https://netify-dev.github.io/lame/reference/ab_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize sender and receiver random effects — ab_plot","text":"additive effects AME models represent: Sender effects () Actor-specific tendencies form outgoing ties. Positive values indicate actors send ties expected; negative values indicate actors send fewer ties. Receiver effects (b) Actor-specific tendencies receive incoming ties. Positive values indicate actors receive ties expected; negative values indicate actors receive fewer ties. static effects, plot displays effects dot plot vertical lines extending zero effect estimate. dynamic effects (fit contains a_dynamic/b_dynamic), additional options available visualize effects evolve time.","code":""},{"path":"https://netify-dev.github.io/lame/reference/ab_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize sender and receiver random effects — ab_plot","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/ab_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize sender and receiver random effects — ab_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Fit an AME model fit <- ame(Y, X)  # Visualize sender effects ab_plot(fit, effect = \"sender\")  # Visualize receiver effects without sorting ab_plot(fit, effect = \"receiver\", sorted = FALSE)  # Customize the plot library(ggplot2) ab_plot(fit) + theme_minimal() + ggtitle(\"Network Sender Effects\") } # }"},{"path":"https://netify-dev.github.io/lame/reference/addhealthc3.html","id":null,"dir":"Reference","previous_headings":"","what":"AddHealth community 3 data — addhealthc3","title":"AddHealth community 3 data — addhealthc3","text":"valued sociomatrix (Y) matrix nodal attributes (X) students community 3 AddHealth study. Y: sociomatrix value edge corresponds ad-hoc measure intensity relation. Note students allowed nominate 5 male friends 5 female friends. X: Matrix students attributes, including sex, race (1=white, 2=black, 3=hispanic, 4=asian, 5=mixed/) grade. See http://moreno.ss.uci.edu/data.html#adhealth details.","code":""},{"path":"https://netify-dev.github.io/lame/reference/addhealthc3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AddHealth community 3 data — addhealthc3","text":"","code":"data(addhealthc3)"},{"path":"https://netify-dev.github.io/lame/reference/addhealthc3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AddHealth community 3 data — addhealthc3","text":"list","code":""},{"path":"https://netify-dev.github.io/lame/reference/addhealthc9.html","id":null,"dir":"Reference","previous_headings":"","what":"AddHealth community 9 data — addhealthc9","title":"AddHealth community 9 data — addhealthc9","text":"valued sociomatrix (Y) matrix nodal attributes (X) students community 9 AddHealth study. Y: sociomatrix value edge corresponds ad-hoc measure intensity relation. Note students allowed nominate 5 male friends 5 female friends. X: Matrix students attributes, including sex, race (1=white, 2=black, 3=hispanic, 4=asian, 5=mixed/) grade. See http://moreno.ss.uci.edu/data.html#adhealth details.","code":""},{"path":"https://netify-dev.github.io/lame/reference/addhealthc9.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AddHealth community 9 data — addhealthc9","text":"","code":"data(addhealthc9)"},{"path":"https://netify-dev.github.io/lame/reference/addhealthc9.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AddHealth community 9 data — addhealthc9","text":"list","code":""},{"path":"https://netify-dev.github.io/lame/reference/ame.html","id":null,"dir":"Reference","previous_headings":"","what":"AME model fitting routine — ame","title":"AME model fitting routine — ame","text":"MCMC routine providing fit additive multiplicative effects (AME) regression model cross-sectional relational data various types. function supports unipartite (square) bipartite (rectangular) networks. longitudinal networks, use lame function. Original implementation Peter Hoff.","code":""},{"path":"https://netify-dev.github.io/lame/reference/ame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AME model fitting routine — ame","text":"","code":"ame(Y, Xdyad=NULL, Xrow=NULL, Xcol=NULL, rvar = !(family==\"rrl\") , cvar = TRUE,  dcor = !symmetric, nvar=TRUE, R = 0, R_row = NULL, R_col = NULL, mode = c(\"unipartite\", \"bipartite\"), family=\"normal\", intercept=!is.element(family,c(\"rrl\",\"ordinal\")), symmetric=FALSE, odmax=rep(max(apply(Y>0,1,sum,na.rm=TRUE)),nrow(Y)),  prior=list(), g=NA, seed = 6886, nscan = 10000, burn = 500, odens = 25,  plot=TRUE, print = TRUE, gof=TRUE,  start_vals=NULL, periodic_save=FALSE, out_file=NULL, save_interval=0.25, model.name=NULL)"},{"path":"https://netify-dev.github.io/lame/reference/ame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AME model fitting routine — ame","text":"Y unipartite: n x n square relational matrix. bipartite: nA x nB rectangular relational matrix nA number row nodes nB number column nodes. See family various data types. Xdyad unipartite: n x n x pd array covariates. bipartite: nA x nB x pd array covariates. Xrow unipartite: n x pr matrix nodal row covariates. bipartite: nA x pr matrix row node covariates. Xcol unipartite: n x pc matrix nodal column covariates. bipartite: nB x pc matrix column node covariates. rvar logical: fit row random effects (asymmetric case)? cvar logical: fit column random effects (asymmetric case)? dcor logical: fit dyadic correlation (asymmetric case)? Note: used bipartite networks. nvar logical: fit nodal random effects (symmetric case)? R integer: dimension multiplicative effects (can zero). bipartite networks, used default R_row R_col specified. R_row integer: bipartite networks, dimension row node multiplicative effects (defaults R) R_col integer: bipartite networks, dimension column node multiplicative effects (defaults R) mode character: either \"unipartite\" (default) square networks \"bipartite\" rectangular networks family character: one \"normal\",\"tobit\",\"binary\",\"ordinal\",\"cbin\",\"frn\",\"rrl\",\"poisson\" - see details intercept logical: fit model intercept? symmetric logical: sociomatrix symmetric design? odmax scalar integer vector length n giving maximum number nominations node may make - used \"frn\" \"cbin\" families prior list containing hyperparameters prior distributions. Available options defaults: Sab0 Prior covariance matrix additive effects (default: diag(2)). 2x2 matrix Sab0\\[1,1\\] prior variance row effects, Sab0\\[2,2\\] prior variance column effects, -diagonals control correlation row column effects. eta0 Prior degrees freedom covariance multiplicative effects (default: 4 + 3 \\* n/100, n number actors). Higher values impose stronger shrinkage latent factors. Common values: 4-10 weak shrinkage, 10-20 moderate, >20 strong shrinkage. etaab Prior degrees freedom covariance additive effects (default: 4 + 3 \\* n/100). Controls shrinkage row/column random effects. Larger values shrink effects toward zero. s20 Prior variance regression coefficients (default: 1). Larger values allow larger coefficient values. s2u0 Prior variance multiplicative effects (default: 1). Suv0 Prior covariance multiplicative effects (default: identity matrix). Common usage: prior = list(Sab0 = diag(c(2, 2)), eta0 = 10) moderate shrinkage, prior = list(Sab0 = diag(c(0.5, 0.5))) tighter control. g optional scalar vector length dim(X)\\[3\\] g-prior regression coefficients. specified, defaults : normal family, g = nvar(Y); tobit, g = nvar(Y)*4; families, g = n, n number non-missing dyads. g-prior controls variance regression coefficients. seed random seed nscan number iterations Markov chain (beyond burn-) burn burn Markov chain odens output density Markov chain plot logical: plot results running? print logical: print results running? gof logical: calculate goodness fit statistics? start_vals List previous model run containing parameter starting values new MCMC periodic_save logical: indicating whether periodically save MCMC results out_file character vector indicating name path file stored periodic_save selected. example, Apple OS out_file=\"~/Desktop/ameFit.rda\". save_interval quantile interval indicating save post burn-phase. model.name optional string model selection output","code":""},{"path":"https://netify-dev.github.io/lame/reference/ame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AME model fitting routine — ame","text":"BETA posterior samples regression coefficients VC posterior samples variance parameters APM posterior mean additive row effects BPM posterior mean additive column effects b U posterior mean multiplicative row effects u V posterior mean multiplicative column effects v (asymmetric case) UVPM posterior mean UV (asymmetric case) ULUPM posterior mean ULU (symmetric case) L posterior mean L (symmetric case) EZ estimate expectation Z matrix YPM posterior mean Y (imputing missing values) GOF observed (first row) posterior predictive (remaining rows) values four goodness--fit statistics model.name Name model (provided)","code":""},{"path":"https://netify-dev.github.io/lame/reference/ame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AME model fitting routine — ame","text":"command provides posterior inference parameters AME models cross-sectional relational data, assuming one eight possible data types/models. function supports unipartite networks (square adjacency matrices) bipartite networks (rectangular adjacency matrices distinct row column node sets) single time point analysis. Theoretical Foundation: AME model decomposes network structure several components: $$y_{ij} = \\beta'x_{ij} + a_i + b_j + u_i'v_j + \\epsilon_{ij}$$ : \\(\\beta'x_{ij}\\): Fixed effects dyadic/nodal covariates \\(a_i\\): Additive sender (row) effect node \\(b_j\\): Additive receiver (column) effect node j \\(u_i'v_j\\): Multiplicative interaction latent factors \\(\\epsilon_{ij}\\): Dyadic error term (may correlated) specification generalizes social relations model (Warner et al. 1979) latent space models (Hoff et al. 2002) within unified framework. Prior Distributions: model uses conjugate semi-conjugate priors possible: Regression coefficients: \\(\\beta \\sim N(0, g\\sigma^2(X'X)^{-1})\\) (g-prior) Additive effects: \\((a_i, b_i)' \\sim N(0, \\Sigma_{ab})\\) jointly Covariance: \\(\\Sigma_{ab} \\sim IW(\\eta_0, \\eta_0 S_{ab0})\\) (inverse-Wishart) Multiplicative effects: Hierarchical shrinkage via \\(\\eta_0\\) Dyadic correlation: \\(\\rho \\sim Uniform(-1, 1)\\) Metropolis updates inverse-Wishart prior \\(\\Sigma_{ab}\\) allows learning correlation sender receiver effects, capturing reciprocity patterns. Multiplicative Effects (Latent Factors): R > 0, model includes R-dimensional latent factors: Asymmetric case: \\(u_i, v_j \\\\mathbb{R}^R\\) \\(u_i'v_j\\) interaction Symmetric case: \\(u_i = v_i\\) eigendecomposition \\(ULU'\\) Captures homophily, transitivity, community structure R chosen via model selection set 2-3 visualization Estimation Algorithm: model uses Gibbs sampler following updates: Sample latent Z given parameters (data augmentation non-normal families) Update regression coefficients \\(\\beta\\) via g-prior conjugate update Update additive effects (,b) jointly \\(\\beta\\) Update covariance \\(\\Sigma_{ab}\\) inverse-Wishart Update multiplicative effects U,V via Gibbs Metropolis-Hastings Update dyadic correlation \\(\\rho\\) via Metropolis-Hastings Update variance \\(\\sigma^2\\) (continuous families) Standard Model Types: following data types/models available: \"normal\": normal AME model. \"tobit\": tobit AME model censored continuous data. Values censored zero, appropriate non-negative continuous relational data. \"binary\": binary probit AME model. \"ordinal\": ordinal probit AME model. intercept identifiable model. \"cbin\": AME model censored binary data.  value 'odmax' specifies maximum number links row may . \"frn\": AME model fixed rank nomination networks. higher value rank indicates stronger relationship. value 'odmax' specifies maximum number links row may . \"rrl\": AME model based row ranks. appropriate relationships across rows directly comparable terms scale. intercept, row random effects row regression effects estimable model. \"poisson\": overdispersed Poisson AME model count data. latent variable represents log mean Poisson distribution.","code":""},{"path":"https://netify-dev.github.io/lame/reference/ame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AME model fitting routine — ame","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/ame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AME model fitting routine — ame","text":"","code":"if (FALSE) { # \\dontrun{ data(YX_bin)  fit<-ame(YX_bin$Y,YX_bin$X,burn=10,nscan=10,odens=1,family=\"binary\") # Note: you should run the Markov chain much longer in practice } # }"},{"path":"https://netify-dev.github.io/lame/reference/array_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert array to list. — array_to_list","title":"Convert array to list. — array_to_list","text":"Convert array list.","code":""},{"path":"https://netify-dev.github.io/lame/reference/array_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert array to list. — array_to_list","text":"","code":"array_to_list(arrayObj, actorList, sliceLabel)"},{"path":"https://netify-dev.github.io/lame/reference/array_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert array to list. — array_to_list","text":"arrayObj 3d array object actorList list actor names sliceLabel labels array slices","code":""},{"path":"https://netify-dev.github.io/lame/reference/array_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert array to list. — array_to_list","text":"array list format","code":""},{"path":"https://netify-dev.github.io/lame/reference/array_to_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert array to list. — array_to_list","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/array_to_list_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized array_to_list with C++ backend — array_to_list_opt","title":"Optimized array_to_list with C++ backend — array_to_list_opt","text":"Optimized array_to_list C++ backend","code":""},{"path":"https://netify-dev.github.io/lame/reference/array_to_list_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized array_to_list with C++ backend — array_to_list_opt","text":"","code":"array_to_list_opt(arr, actorByYr, pdLabs)"},{"path":"https://netify-dev.github.io/lame/reference/bipartite_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Bipartite network helper functions — bipartite_helpers","title":"Bipartite network helper functions — bipartite_helpers","text":"Bipartite network helper functions","code":""},{"path":"https://netify-dev.github.io/lame/reference/bipartite_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bipartite network helper functions — bipartite_helpers","text":"","code":"init_bipartite_startvals(   Y,   family,   nA,   nB,   RA,   RB,   T,   Xlist = NULL,   odmax = NULL )"},{"path":"https://netify-dev.github.io/lame/reference/check_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check formatting of input objects into ame_repL function — check_format","title":"Check formatting of input objects into ame_repL function — check_format","text":"Function used within ame_repL ensure input objects formatted correctly. stop function run discrepancies found.","code":""},{"path":"https://netify-dev.github.io/lame/reference/check_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check formatting of input objects into ame_repL function — check_format","text":"","code":"check_format(Y, Xdyad, Xrow, Xcol)"},{"path":"https://netify-dev.github.io/lame/reference/check_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check formatting of input objects into ame_repL function — check_format","text":"Y T length list n x n relational matrices, T corresponds number replicates (time, example). See family various data types. Xdyad T length list n x n x pd arrays covariates Xrow T length list n x pr matrices nodal row covariates Xcol T length list n x pc matrices nodal column covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/check_format.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check formatting of input objects into ame_repL function — check_format","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/coldwar.html","id":null,"dir":"Reference","previous_headings":"","what":"Cold War data — coldwar","title":"Cold War data — coldwar","text":"Positive negative relations countries cold war","code":""},{"path":"https://netify-dev.github.io/lame/reference/coldwar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cold War data — coldwar","text":"list including following dyadic nodal variables: cc: socioarray ordinal levels military cooperation (positive) conflict (negative), every 5 years; distance: -country distance (thousands kilometers); gdp: country gdp dollars every 5 years; polity: country polity every 5 years.","code":""},{"path":"https://netify-dev.github.io/lame/reference/coldwar.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cold War data — coldwar","text":"Xun Cao : http://polisci.la.psu.edu/people/xuc11","code":""},{"path":"https://netify-dev.github.io/lame/reference/compute_gof_bipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute GOF statistics for bipartite networks — compute_gof_bipartite","title":"Compute GOF statistics for bipartite networks — compute_gof_bipartite","text":"Compute GOF statistics bipartite networks","code":""},{"path":"https://netify-dev.github.io/lame/reference/compute_gof_bipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute GOF statistics for bipartite networks — compute_gof_bipartite","text":"","code":"compute_gof_bipartite(Y_obs, Y_sim, family)"},{"path":"https://netify-dev.github.io/lame/reference/comtrade.html","id":null,"dir":"Reference","previous_headings":"","what":"Comtrade data — comtrade","title":"Comtrade data — comtrade","text":"Eleven years import export data 229 countries. data use SITC Rev. 1 commodity classification, aggregated first level (AG1).","code":""},{"path":"https://netify-dev.github.io/lame/reference/comtrade.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Comtrade data — comtrade","text":"list consisting socioarray Trade vector dollars2010 inflation rates. socioarray gives yearly trade volume (exports imports) dollars 10 different commodity classes eleven years 229 countries. gives five-way array. first index reporting country, Trade[,j,t,k,1] reports exports j, general Trade[j,,t,k,2], j reports importing .","code":""},{"path":"https://netify-dev.github.io/lame/reference/comtrade.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Comtrade data — comtrade","text":"http://comtrade.un.org/, http://www.measuringworth.com/","code":""},{"path":"https://netify-dev.github.io/lame/reference/design_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the design socioarray of covariate values — design_array","title":"Computes the design socioarray of covariate values — design_array","text":"Computes design socioarray covariate values AME fit","code":""},{"path":"https://netify-dev.github.io/lame/reference/design_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the design socioarray of covariate values — design_array","text":"","code":"design_array(Xrow=NULL,Xcol=NULL,Xdyad=NULL,intercept=TRUE,n)"},{"path":"https://netify-dev.github.io/lame/reference/design_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the design socioarray of covariate values — design_array","text":"Xrow n x pr matrix row covariates Xcol n x pc matrix column covariates Xdyad n x n x pd array dyadic covariates intercept logical n number rows/columns","code":""},{"path":"https://netify-dev.github.io/lame/reference/design_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the design socioarray of covariate values — design_array","text":"n x n x (pr+pc+pd+intercept) 3-way array","code":""},{"path":"https://netify-dev.github.io/lame/reference/design_array.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes the design socioarray of covariate values — design_array","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/design_array_listwisedel.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the design socioarray of covariate values — design_array_listwisedel","title":"Computes the design socioarray of covariate values — design_array_listwisedel","text":"Computes design socioarray covariate values AME fit","code":""},{"path":"https://netify-dev.github.io/lame/reference/design_array_listwisedel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the design socioarray of covariate values — design_array_listwisedel","text":"","code":"design_array_listwisedel(Xrow=NULL,Xcol=NULL,Xdyad=NULL,intercept=TRUE,n)"},{"path":"https://netify-dev.github.io/lame/reference/design_array_listwisedel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the design socioarray of covariate values — design_array_listwisedel","text":"Xrow n x pr matrix row covariates Xcol n x pc matrix column covariates Xdyad n x n x pd array dyadic covariates intercept logical n number rows/columns","code":""},{"path":"https://netify-dev.github.io/lame/reference/design_array_listwisedel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the design socioarray of covariate values — design_array_listwisedel","text":"n x n x (pr+pc+pd+intercept) 3-way array","code":""},{"path":"https://netify-dev.github.io/lame/reference/design_array_listwisedel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes the design socioarray of covariate values — design_array_listwisedel","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/dutchcollege.html","id":null,"dir":"Reference","previous_headings":"","what":"Dutch college data — dutchcollege","title":"Dutch college data — dutchcollege","text":"Longitudinal relational measurements nodal characteristics Dutch college students, described van de Bunt, van Duijn, Snijders (1999). time interval first four measurements three weeks, whereas interval last three six weeks.","code":""},{"path":"https://netify-dev.github.io/lame/reference/dutchcollege.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dutch college data — dutchcollege","text":"list consisting socioarray Y matrix X  static nodal attributes. relational measurements range -1 4, indicating following: -1 troubled negative relationship 0 know 1 neutral relationship 2 friendly 3 friendship 4 best friends","code":""},{"path":"https://netify-dev.github.io/lame/reference/dutchcollege.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dutch college data — dutchcollege","text":"http://moreno.ss.uci.edu/data.html#vdb","code":""},{"path":"https://netify-dev.github.io/lame/reference/el2sm.html","id":null,"dir":"Reference","previous_headings":"","what":"Edgelist to sociomatrix — el2sm","title":"Edgelist to sociomatrix — el2sm","text":"Construction sociomatrix edgelist","code":""},{"path":"https://netify-dev.github.io/lame/reference/el2sm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edgelist to sociomatrix — el2sm","text":"","code":"el2sm(el,directed=TRUE,nadiag=all(el[,1]!=el[,2]))"},{"path":"https://netify-dev.github.io/lame/reference/el2sm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edgelist to sociomatrix — el2sm","text":"el matrix row contains indices edge possibly weight edge directed FALSE, relation placed entry ij ji sociomatrix, edge ij (ji) nadiag put NAs diagonal","code":""},{"path":"https://netify-dev.github.io/lame/reference/el2sm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edgelist to sociomatrix — el2sm","text":"sociomatrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/el2sm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Edgelist to sociomatrix — el2sm","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/el2sm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edgelist to sociomatrix — el2sm","text":"","code":"Y<-matrix(rpois(10*10,.5),10,10) ; diag(Y)<-NA E<-sm2el(Y)  el2sm(E) - Y  #>     1  2  3  4  5  6  7  8  9 10 #> 1  NA  0  0  0  0  0  0  0  0  0 #> 2   0 NA  0  0  0  0  0  0  0  0 #> 3   0  0 NA  0  0  0  0  0  0  0 #> 4   0  0  0 NA  0  0  0  0  0  0 #> 5   0  0  0  0 NA  0  0  0  0  0 #> 6   0  0  0  0  0 NA  0  0  0  0 #> 7   0  0  0  0  0  0 NA  0  0  0 #> 8   0  0  0  0  0  0  0 NA  0  0 #> 9   0  0  0  0  0  0  0  0 NA  0 #> 10  0  0  0  0  0  0  0  0  0 NA"},{"path":"https://netify-dev.github.io/lame/reference/get_design_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Create design array for replicate data — get_design_rep","title":"Create design array for replicate data — get_design_rep","text":"Create design array replicate data","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_design_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create design array for replicate data — get_design_rep","text":"","code":"get_design_rep(Y, Xdyad, Xrow, Xcol, actorSet, intercept, n, N, pr, pc, pd)"},{"path":"https://netify-dev.github.io/lame/reference/get_design_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create design array for replicate data — get_design_rep","text":"Y dependent variable array format Xdyad dyadic covariates array format Xrow sender covariates array format Xcol receiver covariates array format actorSet vector actors intercept logical indicating whether include intercept n number actors N number replicates pr number receiver covariates pc number sender covariates pd number dyadic covariates","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_design_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create design array for replicate data — get_design_rep","text":"returns list design array values necessary ame_repL","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_design_rep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create design array for replicate data — get_design_rep","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_fit_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fitted object from MCMC results — get_fit_object","title":"Get fitted object from MCMC results — get_fit_object","text":"Get fitted object MCMC results","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_fit_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fitted object from MCMC results — get_fit_object","text":"","code":"get_fit_object(   APS,   BPS,   UVPS,   YPS,   BETA,   VC,   GOF,   Xlist,   actorByYr,   start_vals,   symmetric,   tryErrorChecks,   model.name = NULL,   U = NULL,   V = NULL,   dynamic_uv = FALSE,   dynamic_ab = FALSE,   bip = FALSE,   rho_ab = NULL,   rho_uv = NULL,   family = NULL,   odmax = NULL,   nA = NULL,   nB = NULL,   n_time = NULL )"},{"path":"https://netify-dev.github.io/lame/reference/get_fit_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fitted object from MCMC results — get_fit_object","text":"APS summed additive sender random effects (matrix dynamic) BPS summed additive receiver random effects (matrix dynamic) UVPS summed multiplicative random effects YPS summed Y posterior predictive values BETA Matrix draws regression coefficient estimates VC Matrix draws variance estimates GOF Matrix draws goodness fit calculations Xlist List based version design array actorByYr List actors time point start_vals start_vals future model run symmetric logical indicating whether model symmetric tryErrorChecks list counts MCMC errors model.name Name model (optional) U Latent sender positions (optional, dynamic UV) V Latent receiver positions (optional, dynamic UV) dynamic_uv logical indicating whether UV effects dynamic dynamic_ab logical indicating whether additive effects dynamic bip logical indicating whether network bipartite rho_ab temporal correlation parameter additive effects (optional) rho_uv temporal correlation parameter multiplicative effects (optional) family character string specifying model family (e.g., \"binary\", \"normal\", \"poisson\") odmax vector maximum ranks ordinal fixed rank nomination families nA number actors first mode (bipartite networks) nB number actors second mode (bipartite networks) n_time number time periods (longitudinal models)","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_fit_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fitted object from MCMC results — get_fit_object","text":"Fitted AME object","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_fit_object.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get fitted object from MCMC results — get_fit_object","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_start_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fitted object from MCMC results — get_start_vals","title":"Get fitted object from MCMC results — get_start_vals","text":"Get fitted object MCMC results","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_start_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fitted object from MCMC results — get_start_vals","text":"","code":"get_start_vals(start_vals, Y, family, xP, rvar, cvar, R, odmax = NULL)"},{"path":"https://netify-dev.github.io/lame/reference/get_start_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fitted object from MCMC results — get_start_vals","text":"start_vals List object null contains starting values Y dependent variable array format family character vector (e.g. 'bin', 'nrm') specifying family type xP number exogenous covariates rvar logical indicating whether include sender random effects cvar logical indicating whether include receiver random effects R Number dimensions multiplicative effects odmax vector maximum ranks cbin/frn families (optional)","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_start_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fitted object from MCMC results — get_start_vals","text":"List starting values MCMC","code":""},{"path":"https://netify-dev.github.io/lame/reference/get_start_vals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get fitted object from MCMC results — get_start_vals","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize goodness-of-fit statistics for AME and LAME models — gof_plot","title":"Visualize goodness-of-fit statistics for AME and LAME models — gof_plot","text":"Creates diagnostic plots comparing observed network statistics posterior predictive distributions. helps assess whether model adequately captures important network features.","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize goodness-of-fit statistics for AME and LAME models — gof_plot","text":"","code":"gof_plot(   fit,   type = c(\"auto\", \"static\", \"longitudinal\"),   statistics = c(\"sd.row\", \"sd.col\", \"dyad.dep\", \"triad.dep\"),   credible.level = 0.95,   ncol = 2,   point.size = 2,   line.size = 1,   title = NULL )"},{"path":"https://netify-dev.github.io/lame/reference/gof_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize goodness-of-fit statistics for AME and LAME models — gof_plot","text":"fit object class \"ame\" \"lame\" containing GOF statistics type Character string: \"auto\" (default), \"static\", \"longitudinal\". \"auto\", determined model class. statistics Character vector specifying statistics plot. Default four: c(\"sd.row\", \"sd.col\", \"dyad.dep\", \"triad.dep\") credible.level Numeric 0 1; credible interval level longitudinal plots (default 0.95) ncol Number columns faceted plot layout (default 2) point.size Size points longitudinal plots (default 2) line.size Width lines plots (default 1) title Optional title plot","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize goodness-of-fit statistics for AME and LAME models — gof_plot","text":"ggplot2 object can customized","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize goodness-of-fit statistics for AME and LAME models — gof_plot","text":"function evaluates model fit using four key network statistics: Standard deviation row means Captures variance -degree/activity Standard deviation column means Captures variance -degree/popularity Dyadic dependence Correlation dyads (reciprocity) Triadic dependence Transitivity/clustering network static models (AME), function produces histograms comparing observed statistic (red line) posterior predictive distribution. longitudinal models (LAME), function produces time series plots showing observed statistics time posterior predictive intervals. Good model fit indicated : Observed values fall within posterior predictive distributions systematic deviations across statistics longitudinal models, observed values track within credible bands","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize goodness-of-fit statistics for AME and LAME models — gof_plot","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize goodness-of-fit statistics for AME and LAME models — gof_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Fit an AME model fit_ame <- ame(Y, X, gof = TRUE)  # Basic GOF plot gof_plot(fit_ame)  # Plot only degree-related statistics gof_plot(fit_ame, statistics = c(\"sd.row\", \"sd.col\"))  # Fit a LAME model fit_lame <- lame(Y_list, X_list)  # Longitudinal GOF plot with 90% credible intervals gof_plot(fit_lame, credible.level = 0.90) } # }"},{"path":"https://netify-dev.github.io/lame/reference/gof_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness of fit statistics — gof_stats","title":"Goodness of fit statistics — gof_stats","text":"Calculates goodness fit statistics relational data matrices, evaluating second-order (dyadic) third-order (triadic) dependence patterns. statistics useful assessing model fit network analysis relational data modeling.","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness of fit statistics — gof_stats","text":"","code":"gof_stats(Y)"},{"path":"https://netify-dev.github.io/lame/reference/gof_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness of fit statistics — gof_stats","text":"Y relational data matrix (n x n square matrix) Y\\[,j\\] represents relationship node node j. Missing values (NA) allowed handled appropriately.","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness of fit statistics — gof_stats","text":"named numeric vector containing five goodness--fit statistics: sd.rowmean Standard deviation row means. Measures heterogeneity -degree centrality (sender effects). Higher values indicate variation active nodes senders. sd.colmean Standard deviation column means. Measures heterogeneity -degree centrality (receiver effects). Higher values indicate variation popular nodes receivers. dyad.dep Dyadic dependence/reciprocity correlation. Pearson correlation Y\\[,j\\] Y\\[j,\\] across dyads. Positive values indicate reciprocity (mutual relationships), negative values indicate anti-reciprocity. Range: \\[-1, 1\\]. cycle.dep Cyclic/transitive triadic dependence. Normalized sum products along three-cycles (j k ). Positive values indicate transitivity clustering, 'friend friend friend'. Based trace cubed centered matrix, normalized trace cubed data availability matrix cubed standard deviation. trans.dep Transitive triadic dependence. Normalized sum products along two-paths close triangles (j k k ). Measures tendency open triads close. Based trace product E*E'*E E centered matrix, normalized appropriately.","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Goodness of fit statistics — gof_stats","text":"function computes network statistics capture different aspects network structure beyond simple density. statistics particularly useful : Model checking: comparing observed statistics simulated networks Model selection: choosing models better capture network dependencies Descriptive analysis: summarizing key structural features network Missing values Y handled pairwise deletion correlations excluded matrix products triadic calculations.","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_stats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Goodness of fit statistics — gof_stats","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/gof_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness of fit statistics — gof_stats","text":"","code":"data(YX_nrm)   gof_stats(YX_nrm$Y)  #> sd.rowmean sd.colmean   dyad.dep  cycle.dep  trans.dep  #> 0.93582644 0.27834223 0.65987298 0.03557144 0.04263373"},{"path":"https://netify-dev.github.io/lame/reference/init_dynamic_ab_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize dynamic additive effects with AR(1) structure — init_dynamic_ab_cpp","title":"Initialize dynamic additive effects with AR(1) structure — init_dynamic_ab_cpp","text":"Initialize dynamic additive effects AR(1) structure","code":""},{"path":"https://netify-dev.github.io/lame/reference/init_dynamic_ab_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize dynamic additive effects with AR(1) structure — init_dynamic_ab_cpp","text":"","code":"init_dynamic_ab_cpp(n, T, rho_ab, sigma_ab, mean_a = 0, mean_b = 0)"},{"path":"https://netify-dev.github.io/lame/reference/init_dynamic_ab_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize dynamic additive effects with AR(1) structure — init_dynamic_ab_cpp","text":"n Number actors T Number time points rho_ab AR(1) parameter sigma_ab Innovation standard deviation mean_a Mean row effects mean_b Mean column effects","code":""},{"path":"https://netify-dev.github.io/lame/reference/init_dynamic_ab_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize dynamic additive effects with AR(1) structure — init_dynamic_ab_cpp","text":"List initialized b matrices","code":""},{"path":"https://netify-dev.github.io/lame/reference/init_dynamic_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize dynamic latent positions with AR(1) structure — init_dynamic_positions","title":"Initialize dynamic latent positions with AR(1) structure — init_dynamic_positions","text":"Initialize dynamic latent positions AR(1) structure","code":""},{"path":"https://netify-dev.github.io/lame/reference/init_dynamic_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize dynamic latent positions with AR(1) structure — init_dynamic_positions","text":"","code":"init_dynamic_positions(n, R, T, rho_uv, sigma_uv)"},{"path":"https://netify-dev.github.io/lame/reference/init_dynamic_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize dynamic latent positions with AR(1) structure — init_dynamic_positions","text":"n Number actors R Latent dimension T Number time points rho_uv AR(1) parameter sigma_uv Innovation standard deviation","code":""},{"path":"https://netify-dev.github.io/lame/reference/init_dynamic_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize dynamic latent positions with AR(1) structure — init_dynamic_positions","text":"3D array latent positions (n x R x T)","code":""},{"path":"https://netify-dev.github.io/lame/reference/lame-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Longitudinal Additive and Multiplicative Effects Models for Networks — lame-package","title":"Longitudinal Additive and Multiplicative Effects Models for Networks — lame-package","text":"extension 'amen' package specifically designed longitudinal network analysis. package provides tools fitting Additive Multiplicative Effects (AME) models longitudinal/replicated relational data several key enhancements: (1) robust handling changing actor compositions across time periods, allowing networks different sets actors time point; (2) significant performance improvements C++ implementations via Rcpp RcppArmadillo; (3) specialized functions temporal network dynamics. package supports various data types including binary/network data (bin), normal relational data (nrm), ordinal relational data (ord), censored binary data (cbin), fixed-rank nomination schemes (frn), row-ranked data (rrl). Based AME framework originally developed Hoff (2009) Hoff, Fosdick, Volfovsky Stovel (2013).","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/reference/lame-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Longitudinal Additive and Multiplicative Effects Models for Networks — lame-package","text":"Shahryar Minhas, Tosin Salau, Cassy Dorff Maintainer: Shahryar Minhas sminhas@example.com","code":""},{"path":"https://netify-dev.github.io/lame/reference/lame-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Longitudinal Additive and Multiplicative Effects Models for Networks — lame-package","text":"","code":"if (FALSE) { # \\dontrun{ data(YX_nrm) fit<-ame(YX_nrm$Y,YX_nrm$X,burn=10,nscan=20,odens=5,family=\"normal\") summary(fit) } # }"},{"path":"https://netify-dev.github.io/lame/reference/lame.html","id":null,"dir":"Reference","previous_headings":"","what":"AME model fitting routine for longitudinal relational data — lame","title":"AME model fitting routine for longitudinal relational data — lame","text":"MCMC routine providing fit additive multiplicative effects (AME) regression model longitudinal (time-series) relational data various types. Supports unipartite (square) bipartite (rectangular) network structures. cross-sectional (single time point) networks, use ame function.","code":""},{"path":"https://netify-dev.github.io/lame/reference/lame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AME model fitting routine for longitudinal relational data — lame","text":"","code":"lame(Y,Xdyad=NULL, Xrow=NULL, Xcol=NULL, rvar = !(family==\"rrl\"),   cvar = TRUE, dcor = !symmetric, nvar=TRUE, R = 0, R_row = NULL, R_col = NULL,   mode = c(\"unipartite\", \"bipartite\"),   dynamic_uv = FALSE, dynamic_ab = FALSE, dynamic_G = FALSE, family =\"normal\", intercept=!is.element(family,c(\"rrl\",\"ordinal\")), symmetric=FALSE, odmax=NULL, prior=list(), g=NA, seed = 6886, nscan = 10000, burn = 500, odens = 25, plot=FALSE, print = FALSE, gof=TRUE, start_vals=NULL, periodic_save=FALSE, out_file=NULL, save_interval=0.25, model.name=NULL)"},{"path":"https://netify-dev.github.io/lame/reference/lame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AME model fitting routine for longitudinal relational data — lame","text":"Y T length list n x n relational matrices, T corresponds number replicates (time, example). See family various data types. Xdyad T length list n x n x pd arrays covariates Xrow T length list n x pr matrices nodal row covariates Xcol T length list n x pc matrices nodal column covariates rvar logical: fit row random effects (asymmetric case)? cvar logical: fit column random effects (asymmetric case)? dcor logical: fit dyadic correlation (asymmetric case)? nvar logical: fit nodal random effects (symmetric case)? R integer: dimension multiplicative effects (can zero) R_row integer: bipartite networks, dimension row node multiplicative effects (defaults R) R_col integer: bipartite networks, dimension column node multiplicative effects (defaults R) mode character: either \"unipartite\" (default) square networks \"bipartite\" rectangular networks dynamic_uv logical: fit dynamic multiplicative effects (latent factors) evolve time using AR(1) processes. TRUE, latent positions U V become time-varying, following \\(U_{,t} = \\rho_{uv} U_{,t-1} + \\epsilon_{,t}\\), epsilon follows N(0, sigma_uv^2). allows actors' positions latent social space drift smoothly time, capturing evolving network structure community dynamics. Inspired dynamic latent space models (Sewell Chen 2015, \"Latent Space Models Dynamic Networks\", JASA; Durante Dunson 2014, \"Nonparametric Bayes Dynamic Modeling Relational Data\", Biometrika). implementation uses efficient blocked Gibbs sampling C++ acceleration scalability. Default FALSE. dynamic_ab logical: fit dynamic additive effects (sender/receiver effects) evolve time using AR(1) processes. TRUE, row effects () column effects (b) become time-varying, following \\(a_{,t} = \\rho_{ab} a_{,t-1} + \\epsilon_{,t}\\). captures temporal heterogeneity actors' baseline propensities send receive ties, allowing smooth changes activity levels popularity time. example, actor's tendency form outgoing ties might gradually increase decrease across observation periods. AR(1) specification ensures temporal smoothness allowing actor-specific evolution patterns. Implementation uses conjugate updates possible C++ computational efficiency. Default FALSE. dynamic_G logical: bipartite networks, fit dynamic interaction matrix G evolves time. TRUE, rectangular interaction matrix G becomes time-varying, allowing mapping row column latent spaces change time. Default FALSE. family character: one \"normal\",\"tobit\",\"binary\",\"ordinal\",\"cbin\",\"frn\",\"rrl\",\"poisson\" - see details intercept logical: fit model intercept? symmetric logical: sociomatrix symmetric design? odmax scalar integer vector length n giving maximum number nominations node may make - used \"frn\" \"cbin\" families prior list containing hyperparameters prior distributions. Available options defaults: Sab0 Prior covariance matrix additive effects (default: diag(2)). 2x2 matrix Sab0\\[1,1\\] prior variance row effects, Sab0\\[2,2\\] prior variance column effects, -diagonals control correlation row column effects. eta0 Prior degrees freedom covariance multiplicative effects (default: 4 + 3 \\* n/100, n number actors). Higher values impose stronger shrinkage latent factors. etaab Prior degrees freedom covariance additive effects (default: 4 + 3 \\* n/100). Controls shrinkage row/column random effects. rho_uv_mean dynamic_uv=TRUE: Prior mean UV AR(1) parameter (default: 0.9). Values close 1 indicate high temporal persistence. rho_uv_sd dynamic_uv=TRUE: Prior SD UV AR(1) parameter (default: 0.1). Controls uncertainty temporal dependence. sigma_uv_shape dynamic_uv=TRUE: Shape parameter inverse-gamma prior UV innovation variance (default: 2). sigma_uv_scale dynamic_uv=TRUE: Scale parameter inverse-gamma prior UV innovation variance (default: 1). rho_ab_mean dynamic_ab=TRUE: Prior mean additive effects AR(1) parameter (default: 0.8). Controls temporal smoothness sender/receiver effects. rho_ab_sd dynamic_ab=TRUE: Prior SD additive effects AR(1) parameter (default: 0.15). sigma_ab_shape dynamic_ab=TRUE: Shape parameter inverse-gamma prior additive effects innovation variance (default: 2). sigma_ab_scale dynamic_ab=TRUE: Scale parameter inverse-gamma prior additive effects innovation variance (default: 1). Common usage: prior = list(Sab0 = diag(c(1, 1)), eta0 = 10) stronger shrinkage, prior = list(rho_uv_mean = 0.95) higher temporal persistence. g optional scalar vector g-prior regression coefficients. Default p^2 p number regression parameters. g-prior controls variance regression coefficients: larger values allow larger coefficient values. Can vector length p parameter-specific control. seed random seed nscan number iterations Markov chain (beyond burn-) burn burn Markov chain odens output density Markov chain plot logical: plot results running? print logical: print results running? gof logical: calculate goodness fit statistics? start_vals List previous model run containing parameter starting values new MCMC periodic_save logical: indicating whether periodically save MCMC results out_file character vector indicating name path file stored periodic_save selected. example, Apple OS out_file=\"~/Desktop/ameFit.rda\". save_interval quantile interval indicating save post burn-phase. model.name optional string model selection output","code":""},{"path":"https://netify-dev.github.io/lame/reference/lame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AME model fitting routine for longitudinal relational data — lame","text":"BETA posterior samples regression coefficients VC posterior samples variance parameters APM posterior mean additive row effects BPM posterior mean additive column effects b U posterior mean multiplicative row effects u. dynamic_uv=TRUE, 3D array (n x R x T) V posterior mean multiplicative column effects v (asymmetric case). dynamic_uv=TRUE, 3D array (n x R x T) UVPM posterior mean UV ULUPM posterior mean ULU (symmetric case) L posterior mean L (symmetric case) EZ estimate expectation Z matrix YPM posterior mean Y (imputing missing values) GOF observed (first row) posterior predictive (remaining rows) values four goodness--fit statistics start_vals Final parameter values MCMC, can used input future model run. model.name Name model (provided)","code":""},{"path":"https://netify-dev.github.io/lame/reference/lame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AME model fitting routine for longitudinal relational data — lame","text":"command provides posterior inference parameters AME models longitudinal relational data, assuming one eight possible data types/models. model supports unipartite networks (square adjacency matrices) bipartite networks (rectangular adjacency matrices distinct row column node sets) across multiple time points. Dynamic Effects Implementation: dynamic_uv dynamic_ab parameters enable time-varying latent representations autoregressive processes. extensions particularly useful understanding network structure evolves time. Dynamic Multiplicative Effects (dynamic_uv=TRUE): latent factors U V evolve according AR(1) processes: $$U_{,k,t} = \\rho_{uv} U_{,k,t-1} + \\epsilon_{,k,t}$$ \\(\\epsilon_{,k,t} \\sim N(0, \\sigma_{uv}^2)\\), indexes actors, k indexes latent dimensions, t indexes time. parameter \\(\\rho_{uv}\\) controls temporal persistence (values near 1 indicate slow evolution). captures time-varying homophily, latent community structure, transitivity dynamics. Key references: Sewell & Chen (2015): Introduced dynamic latent space models actor-specific evolution rates Durante & Dunson (2014): Nonparametric Bayesian approach allowing flexible evolution network structure Hoff (2011): Hierarchical multilinear models providing theoretical foundation temporal dependencies Dynamic Additive Effects (dynamic_ab=TRUE): sender () receiver (b) effects evolve : $$a_{,t} = \\rho_{ab} a_{,t-1} + \\epsilon_{,t}$$ $$b_{,t} = \\rho_{ab} b_{,t-1} + \\eta_{,t}$$ \\(\\epsilon_{,t}, \\eta_{,t} \\sim N(0, \\sigma_{ab}^2)\\). models time-varying individual activity levels (outdegree) popularity (indegree). Applications include: Tracking changes node centrality time Identifying emerging influential actors Detecting declining activity patterns Modeling life-cycle effects social networks Prior Specification Dynamic Parameters: \\(\\rho_{uv}, \\rho_{ab} \\sim TruncNormal(mean, sd, 0, 1)\\): Ensures stationarity AR(1) process \\(\\sigma_{uv}^2, \\sigma_{ab}^2 \\sim InverseGamma(shape, scale)\\): Controls innovation variance Default priors (\\(\\rho_{uv}\\) mean=0.9, \\(\\rho_{ab}\\) mean=0.8) favor smooth evolution Adjust rho_*_mean closer 1 slower evolution, closer 0 rapid changes Computational Considerations: Dynamic effects increase computation ~30-50\\ Memory usage scales O(nRT) dynamic_uv, O(n*T) dynamic_ab C++ implementation provides ~70\\ Convergence diagnostics: Monitor rho sigma parameters carefully Effective sample sizes typically lower due temporal correlation Recommend burn >= 1000 nscan >= 20000 dynamic models Model Selection Guidelines: Use dynamic_uv dynamic_ab : Networks show clear temporal trends density clustering Individual node behavior changes systematically time Community structure evolves (merging, splitting, drift) Use dynamic_uv : Latent structure/communities change individual effects stable Focus evolving homophily clustering patterns Network shows structural reconfiguration time Use dynamic_ab : Individual heterogeneity varies overall structure stable Actors' activity/popularity changes observation period Focus individual-level temporal dynamics Bipartite Network Models: mode=\"bipartite\", model handles rectangular adjacency matrices Y dimensions n_A x n_B, n_A n_B represent number row column nodes respectively. Static Bipartite Case: model uses separate latent factor matrices: U: n_A x R_row matrix row node latent positions V: n_B x R_col matrix column node latent positions G: R_row x R_col interaction matrix mapping latent spaces Multiplicative term: U G V' captures bipartite community structure Dynamic Bipartite Case: dynamic_uv=TRUE bipartite networks: $$U_{,k,t} = \\rho_{uv} U_{,k,t-1} + \\epsilon_{,k,t}$$ $$V_{j,k,t} = \\rho_{uv} V_{j,k,t-1} + \\eta_{j,k,t}$$ indexes row nodes, j indexes column nodes, k indexes latent dimensions. dynamic_G=TRUE, interaction matrix also evolves: $$G_{k,l,t} = \\rho_G G_{k,l,t-1} + \\xi_{k,l,t}$$ allowing mapping row column latent spaces change time. Key Differences Unipartite Models: dyadic correlation (rho): Bipartite edges inherently directed Separate dimensions: R_row R_col can differ row/column spaces Rectangular structure: Network density patterns differ square matrices Community interpretation: Captures affiliation patterns node types Standard AME Model Types: following describes eight standard data types/models available: \"normal\": normal AME model. \"tobit\": tobit AME model censored continuous data. Values censored zero, appropriate non-negative continuous relational data. \"binary\": binary probit AME model. \"ordinal\": ordinal probit AME model. intercept identifiable model. \"cbin\": AME model censored binary data.  value 'odmax' specifies maximum number links row may . \"frn\": AME model fixed rank nomination networks. higher value rank indicates stronger relationship. value 'odmax' specifies maximum number links row may . \"rrl\": AME model based row ranks. appropriate relationships across rows directly comparable terms scale. intercept, row random effects row regression effects estimable model. \"poisson\": overdispersed Poisson AME model count data. latent variable represents log mean Poisson distribution.","code":""},{"path":"https://netify-dev.github.io/lame/reference/lame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AME model fitting routine for longitudinal relational data — lame","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/lame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AME model fitting routine for longitudinal relational data — lame","text":"","code":"data(YX_bin_list)  fit<-lame(YX_bin_list$Y,YX_bin_list$X,burn=5,nscan=5,odens=1,family=\"binary\") # you should run the Markov chain much longer than this"},{"path":"https://netify-dev.github.io/lame/reference/lazegalaw.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazega's law firm data — lazegalaw","title":"Lazega's law firm data — lazegalaw","text":"Several nodal dyadic variables measured 71 attorneys law firm.","code":""},{"path":"https://netify-dev.github.io/lame/reference/lazegalaw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lazega's law firm data — lazegalaw","text":"list consisting socioarray Y nodal attribute matrix X. dyadic variables Y include three binary networks: advice, friendship co-worker status. categorical nodal attributes X coded follows: status (1=partner, 2=associate) office (1=Boston, 2=Hartford, 3=Providence) practice (1=litigation, 2=corporate) law school (1=Harvard Yale, 2=UConn, 3=) seniority age given years, female binary indicator.","code":""},{"path":"https://netify-dev.github.io/lame/reference/lazegalaw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lazega's law firm data — lazegalaw","text":"http://moreno.ss.uci.edu/data.html#lazega","code":""},{"path":"https://netify-dev.github.io/lame/reference/ldZgbme.html","id":null,"dir":"Reference","previous_headings":"","what":"log density for GBME models — ldZgbme","title":"log density for GBME models — ldZgbme","text":"Calculation log conditional density latent AMEN matrix Z given observed data Y.","code":""},{"path":"https://netify-dev.github.io/lame/reference/ldZgbme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"log density for GBME models — ldZgbme","text":"","code":"ldZgbme(Z, Y, llYZ, EZ, rho, s2 = 1)"},{"path":"https://netify-dev.github.io/lame/reference/ldZgbme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"log density for GBME models — ldZgbme","text":"Z n X n latent relational matrix following AMEN model Y n X n observed relational matrix llYZ vectorizable function taking two arguments, y z. See details . EZ n X n mean matrix Z based AMEN model (including additive effects) rho dyadic correlation AMEN model Z s2 residual variance AMEN model Z","code":""},{"path":"https://netify-dev.github.io/lame/reference/ldZgbme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"log density for GBME models — ldZgbme","text":"symmetric matrix entry ,j proportional log conditional bivariate density z[,j],z[j,].","code":""},{"path":"https://netify-dev.github.io/lame/reference/ldZgbme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"log density for GBME models — ldZgbme","text":"function used updating dyadic pairs latent variable matrix Z based Y AMEN model Z. function llYZ specifies log likelihood single z[,j] based y[,j], , llYZ gives log probability density (mass function) y[,j] given z[,j].","code":""},{"path":"https://netify-dev.github.io/lame/reference/ldZgbme.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"log density for GBME models — ldZgbme","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/ldZgbme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"log density for GBME models — ldZgbme","text":"","code":"## For (overdispersed) Poisson regression, use llYZ<-function(y,z){ dpois(y,z,log=TRUE) }"},{"path":"https://netify-dev.github.io/lame/reference/ldZgbme_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized ldZgbme with C++ backend — ldZgbme_opt","title":"Optimized ldZgbme with C++ backend — ldZgbme_opt","text":"Optimized ldZgbme C++ backend","code":""},{"path":"https://netify-dev.github.io/lame/reference/ldZgbme_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized ldZgbme with C++ backend — ldZgbme_opt","text":"","code":"ldZgbme_opt(Z, Y, llYZ, EZ, rho, s2 = 1)"},{"path":"https://netify-dev.github.io/lame/reference/list_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list to array — list_to_array","title":"Convert list to array — list_to_array","text":"Convert list array","code":""},{"path":"https://netify-dev.github.io/lame/reference/list_to_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list to array — list_to_array","text":"","code":"list_to_array(actors, Y, Xdyad, Xrow, Xcol)"},{"path":"https://netify-dev.github.io/lame/reference/list_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list to array — list_to_array","text":"actors vector actors Y dv list format Xdyad dyadic covariates list format Xrow sender covariates list format Xcol receiver covariates list format","code":""},{"path":"https://netify-dev.github.io/lame/reference/list_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list to array — list_to_array","text":"transforms Y, Xdyad, Xrow, Xcol arrays","code":""},{"path":"https://netify-dev.github.io/lame/reference/list_to_array.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert list to array — list_to_array","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/list_to_array_bipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert bipartite list data to array format — list_to_array_bipartite","title":"Convert bipartite list data to array format — list_to_array_bipartite","text":"Convert bipartite list data array format","code":""},{"path":"https://netify-dev.github.io/lame/reference/list_to_array_bipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert bipartite list data to array format — list_to_array_bipartite","text":"","code":"list_to_array_bipartite(   rowActorSet,   colActorSet,   Y_list,   Xdyad = NULL,   Xrow = NULL,   Xcol = NULL )"},{"path":"https://netify-dev.github.io/lame/reference/llsrmRho.html","id":null,"dir":"Reference","previous_headings":"","what":"SRM log likelihood evaluated on a grid of rho-values — llsrmRho","title":"SRM log likelihood evaluated on a grid of rho-values — llsrmRho","text":"Calculation SRM log-likelihood grid rho-values","code":""},{"path":"https://netify-dev.github.io/lame/reference/llsrmRho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SRM log likelihood evaluated on a grid of rho-values — llsrmRho","text":"","code":"llsrmRho(Y, Sab, rhos, s2 = 1)"},{"path":"https://netify-dev.github.io/lame/reference/llsrmRho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SRM log likelihood evaluated on a grid of rho-values — llsrmRho","text":"Y sociomatrix assumed follow mean-zero SRM distribution Sab covariance matrix additive effects rhos vector rho-values calculate log-likelihood s2 current value s2","code":""},{"path":"https://netify-dev.github.io/lame/reference/llsrmRho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SRM log likelihood evaluated on a grid of rho-values — llsrmRho","text":"vector log-likelihood values","code":""},{"path":"https://netify-dev.github.io/lame/reference/llsrmRho.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SRM log likelihood evaluated on a grid of rho-values — llsrmRho","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/llsrmRho_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized llsrmRho with C++ backend — llsrmRho_opt","title":"Optimized llsrmRho with C++ backend — llsrmRho_opt","text":"Optimized llsrmRho C++ backend","code":""},{"path":"https://netify-dev.github.io/lame/reference/llsrmRho_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized llsrmRho with C++ backend — llsrmRho_opt","text":"","code":"llsrmRho_opt(Y, Sab, rhos, s2 = 1)"},{"path":"https://netify-dev.github.io/lame/reference/mhalf.html","id":null,"dir":"Reference","previous_headings":"","what":"Symmetric square root of a matrix — mhalf","title":"Symmetric square root of a matrix — mhalf","text":"Computes symmetric square root positive definite matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/mhalf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symmetric square root of a matrix — mhalf","text":"","code":"mhalf(M)"},{"path":"https://netify-dev.github.io/lame/reference/mhalf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symmetric square root of a matrix — mhalf","text":"M positive definite matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/mhalf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symmetric square root of a matrix — mhalf","text":"matrix H H^2 equals M","code":""},{"path":"https://netify-dev.github.io/lame/reference/mhalf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Symmetric square root of a matrix — mhalf","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/plot.ame.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot comprehensive diagnostics for an AME model fit — plot.ame","title":"Plot comprehensive diagnostics for an AME model fit — plot.ame","text":"Creates comprehensive set diagnostic plots AME (Additive Multiplicative Effects) model, including MCMC diagnostics, parameter estimates, goodness--fit checks. default plot method AME objects.","code":""},{"path":"https://netify-dev.github.io/lame/reference/plot.ame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot comprehensive diagnostics for an AME model fit — plot.ame","text":"","code":"# S3 method for class 'ame' plot(   x,   which = c(1, 2, 3, 4),   ask = FALSE,   pages = c(\"single\", \"multiple\"),   ... )"},{"path":"https://netify-dev.github.io/lame/reference/plot.ame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot comprehensive diagnostics for an AME model fit — plot.ame","text":"x object class \"ame\" fitting AME model numeric character vector specifying plots produce: 1 \"trace\" = MCMC trace plots, 2 \"density\" = posterior density plots, 3 \"gof\" = goodness--fit plots, 4 \"effects\" = additive multiplicative effects. Default c(1,2,3,4) show plots. ask logical; TRUE, user prompted plot page pages character string specifying arrange plots: \"single\" = one comprehensive page (default), \"multiple\" = separate pages plot type ... additional arguments (currently used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/plot.ame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot comprehensive diagnostics for an AME model fit — plot.ame","text":"NULL (invisibly). Plots displayed side effects.","code":""},{"path":"https://netify-dev.github.io/lame/reference/plot.ame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot comprehensive diagnostics for an AME model fit — plot.ame","text":"function produces multi-panel plot containing: MCMC trace plots Shows mixing convergence key parameters Posterior distributions Density plots regression coefficients variance components Goodness--fit Comparison observed network statistics posterior predictive distributions (gof=TRUE model fit) Effect visualizations Plots additive sender/receiver effects multiplicative effects present plot adapts model specification: Shows relevant variance components (e.g., omits cab symmetric networks) Includes multiplicative effects plots R > 0 Includes GOF plots computed model fitting","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/reference/plot.ame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot comprehensive diagnostics for an AME model fit — plot.ame","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/plot.ame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot comprehensive diagnostics for an AME model fit — plot.ame","text":"","code":"if (FALSE) { # \\dontrun{ # Fit an AME model fit <- ame(Y, X, R = 2, gof = TRUE)  # Default comprehensive plot plot(fit)  # Only MCMC diagnostics plot(fit, which = c(\"trace\", \"density\"))  # Only effects plots plot(fit, which = \"effects\")  # Separate pages for each plot type plot(fit, pages = \"multiple\") } # }"},{"path":"https://netify-dev.github.io/lame/reference/plot.lame.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot comprehensive diagnostics for a LAME model fit — plot.lame","title":"Plot comprehensive diagnostics for a LAME model fit — plot.lame","text":"Creates comprehensive set diagnostic plots LAME (Longitudinal Additive Multiplicative Effects) model, including MCMC diagnostics, parameter evolution time, longitudinal goodness--fit checks. default plot method LAME objects.","code":""},{"path":"https://netify-dev.github.io/lame/reference/plot.lame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot comprehensive diagnostics for a LAME model fit — plot.lame","text":"","code":"# S3 method for class 'lame' plot(   x,   which = c(1, 2, 3, 4),   time.points = NULL,   ask = FALSE,   pages = c(\"single\", \"multiple\"),   ... )"},{"path":"https://netify-dev.github.io/lame/reference/plot.lame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot comprehensive diagnostics for a LAME model fit — plot.lame","text":"x object class \"lame\" fitting LAME model numeric character vector specifying plots produce: 1 \"trace\" = MCMC trace plots, 2 \"density\" = posterior density plots, 3 \"gof\" = longitudinal goodness--fit plots, 4 \"effects\" = additive multiplicative effects, 5 \"network\" = network snapshots selected times. Default c(1,2,3,4) show main diagnostic plots. time.points numeric vector time points network snapshots (used \"network\" ). Default c(1, middle, last). ask logical; TRUE, user prompted plot page pages character string specifying arrange plots: \"single\" = one comprehensive page (default), \"multiple\" = separate pages plot type ... additional arguments (currently used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/plot.lame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot comprehensive diagnostics for a LAME model fit — plot.lame","text":"NULL (invisibly). Plots displayed side effects.","code":""},{"path":"https://netify-dev.github.io/lame/reference/plot.lame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot comprehensive diagnostics for a LAME model fit — plot.lame","text":"function produces multi-panel plot containing: MCMC trace plots Shows mixing convergence key parameters Posterior distributions Density plots regression coefficients variance components Longitudinal GOF Time series observed network statistics posterior predictive intervals Effects time Evolution additive effects across time periods (applicable) Network snapshots Visualization network selected time points plot adapts longitudinal structure: Shows temporal trends network statistics Highlights composition changes actors enter/exit Displays credible intervals time-varying statistics","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/reference/plot.lame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot comprehensive diagnostics for a LAME model fit — plot.lame","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/plot.lame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot comprehensive diagnostics for a LAME model fit — plot.lame","text":"","code":"if (FALSE) { # \\dontrun{ # Fit a LAME model fit <- lame(Y_list, X_list, R = 2)  # Default comprehensive plot plot(fit)  # Only MCMC diagnostics plot(fit, which = c(\"trace\", \"density\"))  # Include network snapshots at specific times plot(fit, which = c(3, 4, 5), time.points = c(1, 5, 10))  # Separate pages for each plot type plot(fit, pages = \"multiple\") } # }"},{"path":"https://netify-dev.github.io/lame/reference/precomputeX.html","id":null,"dir":"Reference","previous_headings":"","what":"Precompute design matrix statistics — precomputeX","title":"Precompute design matrix statistics — precomputeX","text":"Precomputes summary statistics design array X speed MCMC calculations AME model","code":""},{"path":"https://netify-dev.github.io/lame/reference/precomputeX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precompute design matrix statistics — precomputeX","text":"","code":"precomputeX(X)"},{"path":"https://netify-dev.github.io/lame/reference/precomputeX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precompute design matrix statistics — precomputeX","text":"X n x n x p covariate array","code":""},{"path":"https://netify-dev.github.io/lame/reference/precomputeX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precompute design matrix statistics — precomputeX","text":"input array precomputed statistics attributes: Xr row sums Xc column sums mX matricized version mXt dyad-transposed matricized version XX regression sums squares XXt crossproduct sums squares","code":""},{"path":"https://netify-dev.github.io/lame/reference/precomputeX.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Precompute design matrix statistics — precomputeX","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/precomputeX_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized precomputeX with C++ backend — precomputeX_opt","title":"Optimized precomputeX with C++ backend — precomputeX_opt","text":"Optimized precomputeX C++ backend","code":""},{"path":"https://netify-dev.github.io/lame/reference/precomputeX_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized precomputeX with C++ backend — precomputeX_opt","text":"","code":"precomputeX_opt(X)"},{"path":"https://netify-dev.github.io/lame/reference/print.ame.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for AME objects — print.ame","title":"Print method for AME objects — print.ame","text":"Provides concise print output fitted AME models","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.ame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for AME objects — print.ame","text":"","code":"# S3 method for class 'ame' print(x, ...)"},{"path":"https://netify-dev.github.io/lame/reference/print.ame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for AME objects — print.ame","text":"x object class \"ame\" ... additional arguments (used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.ame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for AME objects — print.ame","text":"ame object invisibly","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.ame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for AME objects — print.ame","text":"Peter Hoff, Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.ame.sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for AME and LAME simulation objects — print.ame.sim","title":"Print methods for AME and LAME simulation objects — print.ame.sim","text":"Print methods AME LAME simulation objects","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.ame.sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for AME and LAME simulation objects — print.ame.sim","text":"","code":"# S3 method for class 'ame.sim' print(x, ...)"},{"path":"https://netify-dev.github.io/lame/reference/print.ame.sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for AME and LAME simulation objects — print.ame.sim","text":"x simulation object class \"ame.sim\" \"lame.sim\" ... additional arguments (used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.ame.sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for AME and LAME simulation objects — print.ame.sim","text":"simulation object invisibly","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.ame.sim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print methods for AME and LAME simulation objects — print.ame.sim","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.lame.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for LAME objects — print.lame","title":"Print method for LAME objects — print.lame","text":"Provides concise print output fitted LAME models","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.lame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for LAME objects — print.lame","text":"","code":"# S3 method for class 'lame' print(x, ...)"},{"path":"https://netify-dev.github.io/lame/reference/print.lame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for LAME objects — print.lame","text":"x object class \"lame\" ... additional arguments (used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.lame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for LAME objects — print.lame","text":"lame object invisibly","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.lame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for LAME objects — print.lame","text":"Peter Hoff, Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.summary.ame.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for summary.ame objects — print.summary.ame","title":"Print method for summary.ame objects — print.summary.ame","text":"Prints formatted summary AME model fit","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.summary.ame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for summary.ame objects — print.summary.ame","text":"","code":"# S3 method for class 'summary.ame' print(x, digits = 3, ...)"},{"path":"https://netify-dev.github.io/lame/reference/print.summary.ame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for summary.ame objects — print.summary.ame","text":"x summary.ame object digits number digits display (default: 3) ... additional arguments (used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.summary.ame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for summary.ame objects — print.summary.ame","text":"summary.ame object invisibly","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.summary.lame.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for summary.lame objects — print.summary.lame","title":"Print method for summary.lame objects — print.summary.lame","text":"Prints formatted summary LAME model fit","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.summary.lame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for summary.lame objects — print.summary.lame","text":"","code":"# S3 method for class 'summary.lame' print(x, digits = 3, ...)"},{"path":"https://netify-dev.github.io/lame/reference/print.summary.lame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for summary.lame objects — print.summary.lame","text":"x summary.lame object digits number digits display (default: 3) ... additional arguments (used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/print.summary.lame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for summary.lame objects — print.summary.lame","text":"summary.lame object invisibly","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSab_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs update for additive effects covariance — rSab_fc","title":"Gibbs update for additive effects covariance — rSab_fc","text":"Gibbs sampling covariance matrix additive row column effects AME model. function implements inverse-Wishart posterior update covariance matrix Sab.","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSab_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs update for additive effects covariance — rSab_fc","text":"","code":"rSab_fc(a, b, Sab0=NULL, eta0=NULL, rvar=TRUE, cvar=TRUE, symmetric=FALSE)"},{"path":"https://netify-dev.github.io/lame/reference/rSab_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs update for additive effects covariance — rSab_fc","text":"vector row random effects (additive sender effects) b vector column random effects (additive receiver effects) Sab0 prior (inverse) scale matrix prior distribution. Default diag(2), provides weakly informative prior. eta0 prior degrees freedom prior distribution. Default 4, minimum proper prior 2x2 matrix. rvar logical: row variance updated? (default TRUE) cvar logical: column variance updated? (default TRUE) symmetric logical: symmetric network? (default FALSE)","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSab_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs update for additive effects covariance — rSab_fc","text":"Updated covariance matrix Sab (2x2 matrix variances diagonal covariance -diagonal)","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSab_fc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gibbs update for additive effects covariance — rSab_fc","text":"function implements different update strategies: Full update: rvar cvar TRUE, updates full 2x2 covariance matrix using inverse-Wishart distribution Row variance : rvar TRUE, updates Sab\\[1,1\\] Column variance : cvar TRUE, updates Sab\\[2,2\\] Symmetric case: symmetric TRUE, enforces equal variances high correlation (0.999) row column effects","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSab_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs update for additive effects covariance — rSab_fc","text":"Peter Hoff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSuv_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs update for multiplicative effects covariance — rSuv_fc","title":"Gibbs update for multiplicative effects covariance — rSuv_fc","text":"Gibbs sampling covariance matrix multiplicative effects U V AME model. function implements inverse-Wishart posterior update covariance matrix stacked UV effects.","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSuv_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs update for multiplicative effects covariance — rSuv_fc","text":"","code":"rSuv_fc(U, V, Suv0=NULL, kappa0=NULL)"},{"path":"https://netify-dev.github.io/lame/reference/rSuv_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs update for multiplicative effects covariance — rSuv_fc","text":"U matrix multiplicative row effects (n x R matrix n number nodes R dimension multiplicative effects) V matrix multiplicative column effects (n x R matrix) Suv0 prior (inverse) scale matrix prior distribution. Default identity matrix dimension 2R x 2R, providing weakly informative prior. kappa0 prior degrees freedom prior distribution. Default 2 + 2R, minimum proper prior 2R x 2R covariance matrix.","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSuv_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs update for multiplicative effects covariance — rSuv_fc","text":"Updated covariance matrix Suv (2R x 2R matrix) stacked effects \\[U, V\\]. first R x R block contains covariances U, last R x R block contains covariances V, -diagonal blocks contain cross-covariances U V.","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSuv_fc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gibbs update for multiplicative effects covariance — rSuv_fc","text":"function updates full covariance matrix multiplicative effects using inverse-Wishart distribution. posterior distribution : $$Suv ~ IW(kappa0 * Suv0 + t(UV) \\%*\\% UV, n + kappa0)$$ UV = cbind(U, V) stacked matrix effects. hierarchical prior allows adaptive shrinkage multiplicative effects, amount shrinkage determined data posterior update.","code":""},{"path":"https://netify-dev.github.io/lame/reference/rSuv_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs update for multiplicative effects covariance — rSuv_fc","text":"Peter Hoff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_dynamic_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sampling of dynamic U and V with AR(1) evolution — rUV_dynamic_fc","title":"Gibbs sampling of dynamic U and V with AR(1) evolution — rUV_dynamic_fc","text":"Updates latent factor positions U V evolve time according AR(1) process: u_{,t} = rho * u_{,t-1} + epsilon_{,t}","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_dynamic_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sampling of dynamic U and V with AR(1) evolution — rUV_dynamic_fc","text":"","code":"rUV_dynamic_fc(U, V, ET, rho_uv, sigma_uv, s2, shrink=TRUE, symmetric=FALSE)"},{"path":"https://netify-dev.github.io/lame/reference/rUV_dynamic_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sampling of dynamic U and V with AR(1) evolution — rUV_dynamic_fc","text":"U 3D array current U positions (n x R x T) V 3D array current V positions (n x R x T) ET 3D array residuals (n x n x T) rho_uv AR(1) autoregressive parameter latent positions sigma_uv Innovation standard deviation latent positions s2 dyadic variance shrink whether apply shrinkage (default TRUE) symmetric whether network symmetric (default FALSE)","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_dynamic_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sampling of dynamic U and V with AR(1) evolution — rUV_dynamic_fc","text":"list updated U V arrays","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_dynamic_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs sampling of dynamic U and V with AR(1) evolution — rUV_dynamic_fc","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_dynamic_fc_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Update dynamic latent positions using AR(1) process — rUV_dynamic_fc_cpp","title":"Update dynamic latent positions using AR(1) process — rUV_dynamic_fc_cpp","text":"Update dynamic latent positions using AR(1) process","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_dynamic_fc_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update dynamic latent positions using AR(1) process — rUV_dynamic_fc_cpp","text":"","code":"rUV_dynamic_fc_cpp(   U_current,   V_current,   ET,   rho_uv,   sigma_uv,   s2,   shrink,   symmetric )"},{"path":"https://netify-dev.github.io/lame/reference/rUV_dynamic_fc_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update dynamic latent positions using AR(1) process — rUV_dynamic_fc_cpp","text":"U_current Current 3D array U positions (n x R x T) V_current Current 3D array V positions (n x R x T) ET 3D array residuals (n x n x T) rho_uv AR(1) autoregressive parameter latent positions sigma_uv Innovation standard deviation latent positions s2 Dyadic variance shrink Whether apply shrinkage symmetric Whether network symmetric","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_dynamic_fc_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update dynamic latent positions using AR(1) process — rUV_dynamic_fc_cpp","text":"List updated U V arrays","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sampling of U and V — rUV_fc","title":"Gibbs sampling of U and V — rUV_fc","text":"Gibbs sampler updating multiplicative effect matrices U V","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sampling of U and V — rUV_fc","text":"","code":"rUV_fc(Z, U, V, Suv, rho, s2 = 1, offset = 0)"},{"path":"https://netify-dev.github.io/lame/reference/rUV_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sampling of U and V — rUV_fc","text":"Z n X n normal relational matrix U current value U V current value V Suv covariance (U V) rho dyadic correlation s2 dyadic variance offset matrix dimension Z. assumed Z-offset equal multiplicative effects plus dyadic noise, offset contain additive effects (Xbeta(X,beta+ outer(,b,\"+\")    )","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sampling of U and V — rUV_fc","text":"U new value U V new value V","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs sampling of U and V — rUV_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_rep_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sampling of U and V — rUV_rep_fc","title":"Gibbs sampling of U and V — rUV_rep_fc","text":"Gibbs sampler updating multiplicative effect matrices U V, assuming across replicates.","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_rep_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sampling of U and V — rUV_rep_fc","text":"","code":"rUV_rep_fc(E.T,U,V,rho,s2=1,shrink=TRUE)"},{"path":"https://netify-dev.github.io/lame/reference/rUV_rep_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sampling of U and V — rUV_rep_fc","text":"E.T Array square residual relational matrix series additive effects covariates subtracted . third dimension array different replicates. slice array according third dimension square residual relational matrix. U current value U V current value V rho dyadic correlation s2 dyadic variance shrink adaptively shrink factors hierarchical prior","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_rep_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sampling of U and V — rUV_rep_fc","text":"U new value U V new value V","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_rep_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs sampling of U and V — rUV_rep_fc","text":"Peter Hoff, Yanjun ","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_sym_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sampling of U and V — rUV_sym_fc","title":"Gibbs sampling of U and V — rUV_sym_fc","text":"Gibbs sampler updating multiplicative effect matrices U V symmetric case. case U%*%t(V) symmetric, parameterized V=U%*%L L diagonal matrix eigenvalues U%*%t(V).","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_sym_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sampling of U and V — rUV_sym_fc","text":"","code":"rUV_sym_fc(E, U, V, s2 = 1, shrink=TRUE)"},{"path":"https://netify-dev.github.io/lame/reference/rUV_sym_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sampling of U and V — rUV_sym_fc","text":"E square residual relational matrix U current value U V current value V s2 dyadic variance shrink adaptively shrink factors hierarchical prior","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_sym_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sampling of U and V — rUV_sym_fc","text":"U new value U V new value V","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_sym_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs sampling of U and V — rUV_sym_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rUV_sym_fc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gibbs sampling of U and V — rUV_sym_fc","text":"","code":"U0<-matrix(rnorm(30,2),30,2) ; V0<-U0%*%diag(c(3,-2))  E<- U0%*%t(V0) + matrix(rnorm(30^2),30,30)  rUV_sym_fc  #> function (E, U, V, s2 = 1, shrink = TRUE)  #> { #>     R <- ncol(U) #>     n <- nrow(U) #>     L <- diag((V[1, ]/U[1, ]), nrow = R) #>     L[is.na(L)] <- 1 #>     if (shrink) { #>         ivU <- diag(rgamma(R, (2 + n)/2, (1 + apply(U^2, 2, sum))/2),  #>             nrow = R) #>     } #>     if (!shrink) { #>         ivU <- diag(1/n, nrow = R) #>     } #>     for (i in rep(sample(1:n), 4)) { #>         l <- L %*% (apply(U * E[i, ], 2, sum) - U[i, ] * E[i,  #>             i])/s2 #>         iQ <- solve((ivU + L %*% (crossprod(U) - U[i, ] %*% t(U[i,  #>             ])) %*% L/s2)) #>         U[i, ] <- iQ %*% l + t(chol(iQ)) %*% rnorm(R) #>     } #>     for (r in 1:R) { #>         Er <- E - U[, -r, drop = FALSE] %*% L[-r, -r, drop = FALSE] %*%  #>             t(U[, -r, drop = FALSE]) #>         l <- sum((Er * (U[, r] %*% t(U[, r])))[upper.tri(Er)])/s2 #>         iq <- 1/(1 + sum(((U[, r] %*% t(U[, r]))^2)[upper.tri(Er)])/s2) #>         L[r, r] <- rnorm(1, iq * l, sqrt(iq)) #>     } #>     list(U = U, V = U %*% L) #> } #> <bytecode: 0x55f8e90e8198> #> <environment: namespace:lame>"},{"path":"https://netify-dev.github.io/lame/reference/rZ_bin_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Z based on a probit model — rZ_bin_fc","title":"Simulate Z based on a probit model — rZ_bin_fc","text":"Simulates random latent matrix Z given expectation, dyadic correlation binary relational matrix Y","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_bin_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Z based on a probit model — rZ_bin_fc","text":"","code":"rZ_bin_fc(Z, EZ, rho, Y)"},{"path":"https://netify-dev.github.io/lame/reference/rZ_bin_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Z based on a probit model — rZ_bin_fc","text":"Z square matrix, current value Z EZ expected value Z rho dyadic correlation Y square binary relational matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_bin_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Z based on a probit model — rZ_bin_fc","text":"square matrix , new value Z","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_bin_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Z based on a probit model — rZ_bin_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_cbin_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Z given fixed rank nomination data — rZ_cbin_fc","title":"Simulate Z given fixed rank nomination data — rZ_cbin_fc","text":"Simulates random latent matrix Z given expectation, dyadic correlation censored binary nomination data","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_cbin_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Z given fixed rank nomination data — rZ_cbin_fc","text":"","code":"rZ_cbin_fc(Z, EZ, rho, Y, odmax, odobs)"},{"path":"https://netify-dev.github.io/lame/reference/rZ_cbin_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Z given fixed rank nomination data — rZ_cbin_fc","text":"Z square matrix, current value Z EZ expected value Z rho dyadic correlation Y square matrix ranked nomination data odmax scalar vector giving maximum number nominations individual odobs observed outdegree","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_cbin_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Z given fixed rank nomination data — rZ_cbin_fc","text":"square matrix, new value Z","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_cbin_fc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Z given fixed rank nomination data — rZ_cbin_fc","text":"simulates Z constraints (1) Y\\[,j\\]=1, Y\\[,k\\]=0 => Z\\[,j\\]>Z\\[,k\\] , (2) Y\\[,j\\]=1 => Z\\[,j\\]>0 , (3) Y\\[,j\\]=0 & odobs\\[\\]<odmax\\[\\] => Z\\[,j\\]<0","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_cbin_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Z given fixed rank nomination data — rZ_cbin_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_frn_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Z given fixed rank nomination data — rZ_frn_fc","title":"Simulate Z given fixed rank nomination data — rZ_frn_fc","text":"Simulates random latent matrix Z given expectation, dyadic correlation fixed rank nomination data","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_frn_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Z given fixed rank nomination data — rZ_frn_fc","text":"","code":"rZ_frn_fc(Z, EZ, rho, Y, YL, odmax, odobs)"},{"path":"https://netify-dev.github.io/lame/reference/rZ_frn_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Z given fixed rank nomination data — rZ_frn_fc","text":"Z square matrix, current value Z EZ expected value Z rho dyadic correlation Y square matrix ranked nomination data YL list ranked individuals, least preferred row odmax scalar vector giving maximum number nominations individual odobs observed outdegree","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_frn_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Z given fixed rank nomination data — rZ_frn_fc","text":"square matrix, new value Z","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_frn_fc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Z given fixed rank nomination data — rZ_frn_fc","text":"simulates Z constraints (1) Y\\[,j\\]>Y\\[,k\\] => Z\\[,j\\]>Z\\[,k\\] , (2) Y\\[,j\\]>0 => Z\\[,j\\]>0 , (3) Y\\[,j\\]=0 & odobs\\[\\]<odmax\\[\\] => Z\\[,j\\]<0","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_frn_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Z given fixed rank nomination data — rZ_frn_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_nrm_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate missing values in a normal AME model — rZ_nrm_fc","title":"Simulate missing values in a normal AME model — rZ_nrm_fc","text":"Simulates missing values sociomatrix normal AME model","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_nrm_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate missing values in a normal AME model — rZ_nrm_fc","text":"","code":"rZ_nrm_fc(Z, EZ, rho,s2, Y)"},{"path":"https://netify-dev.github.io/lame/reference/rZ_nrm_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate missing values in a normal AME model — rZ_nrm_fc","text":"Z square matrix, current value Z EZ expected value Z rho dyadic correlation s2 dyadic variance Y square relational matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_nrm_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate missing values in a normal AME model — rZ_nrm_fc","text":"square matrix, equal Y non-missing values","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_nrm_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate missing values in a normal AME model — rZ_nrm_fc","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_ord_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Z given the partial ranks — rZ_ord_fc","title":"Simulate Z given the partial ranks — rZ_ord_fc","text":"Simulates random latent matrix Z given expectation, dyadic correlation partial rank information provided W","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_ord_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Z given the partial ranks — rZ_ord_fc","text":"","code":"rZ_ord_fc(Z, EZ, rho, Y)"},{"path":"https://netify-dev.github.io/lame/reference/rZ_ord_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Z given the partial ranks — rZ_ord_fc","text":"Z square matrix, current value Z EZ expected value Z rho dyadic correlation Y matrix ordinal data","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_ord_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Z given the partial ranks — rZ_ord_fc","text":"square matrix, new value Z","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_ord_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Z given the partial ranks — rZ_ord_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_pois_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs update for latent variable in a Poisson AME model — rZ_pois_fc","title":"Gibbs update for latent variable in a Poisson AME model — rZ_pois_fc","text":"Updates latent variable Z Poisson AME model using Metropolis-Hastings step. model assumes y_{,j} ~ Poisson(exp(z_{,j})) z_{,j} latent variable representing log mean.","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_pois_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs update for latent variable in a Poisson AME model — rZ_pois_fc","text":"","code":"rZ_pois_fc(Z, EZ, rho, s2, Y)"},{"path":"https://netify-dev.github.io/lame/reference/rZ_pois_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs update for latent variable in a Poisson AME model — rZ_pois_fc","text":"Z square matrix, current value latent variable EZ expected value Z (regression effects + random effects) rho dyadic correlation s2 dyadic variance (overdispersion parameter) Y square relational matrix observed counts","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_pois_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs update for latent variable in a Poisson AME model — rZ_pois_fc","text":"updated value Z","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_pois_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs update for latent variable in a Poisson AME model — rZ_pois_fc","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_rrl_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Z given relative rank nomination data — rZ_rrl_fc","title":"Simulate Z given relative rank nomination data — rZ_rrl_fc","text":"Simulates random latent matrix Z given expectation, dyadic correlation relative rank nomination data","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_rrl_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Z given relative rank nomination data — rZ_rrl_fc","text":"","code":"rZ_rrl_fc(Z, EZ, rho, Y, YL)"},{"path":"https://netify-dev.github.io/lame/reference/rZ_rrl_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Z given relative rank nomination data — rZ_rrl_fc","text":"Z square matrix, current value Z EZ expected value Z rho dyadic correlation Y square matrix ranked nomination data YL list ranked individuals, least preferred row","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_rrl_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Z given relative rank nomination data — rZ_rrl_fc","text":"square matrix, new value Z","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_rrl_fc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Z given relative rank nomination data — rZ_rrl_fc","text":"simulates Z constraints (1) Y\\[,j\\]>Y\\[,k\\] => Z\\[,j\\]>Z\\[,k\\]","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_rrl_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Z given relative rank nomination data — rZ_rrl_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_tob_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Z based on a tobit model — rZ_tob_fc","title":"Simulate Z based on a tobit model — rZ_tob_fc","text":"Simulates random latent matrix Z given expectation, dyadic correlation nonnegative relational matrix Y","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_tob_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Z based on a tobit model — rZ_tob_fc","text":"","code":"rZ_tob_fc(Z, EZ,rho,s2,Y)"},{"path":"https://netify-dev.github.io/lame/reference/rZ_tob_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Z based on a tobit model — rZ_tob_fc","text":"Z square matrix, current value Z EZ expected value Z rho dyadic correlation s2 dyadic variance Y square relational matrix nonnegative entries","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_tob_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Z based on a tobit model — rZ_tob_fc","text":"square matrix, new value Z","code":""},{"path":"https://netify-dev.github.io/lame/reference/rZ_tob_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Z based on a tobit model — rZ_tob_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_bin_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a and Sab from full conditional distributions under bin likelihood — raSab_bin_fc","title":"Simulate a and Sab from full conditional distributions under bin likelihood — raSab_bin_fc","text":"Simulate Sab full conditional distributions bin likelihood","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_bin_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a and Sab from full conditional distributions under bin likelihood — raSab_bin_fc","text":"","code":"raSab_bin_fc(Z, Y, a, b, Sab, Sab0=NULL, eta0=NULL, SS = round(sqrt(nrow(Z))))"},{"path":"https://netify-dev.github.io/lame/reference/raSab_bin_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a and Sab from full conditional distributions under bin likelihood — raSab_bin_fc","text":"Z square matrix, current value Z Y square binary relational matrix current value row effects b current value column effects Sab current value Cov(,b) Sab0 prior (inverse) scale matrix prior distribution eta0 prior degrees freedom prior distribution SS number iterations","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_bin_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a and Sab from full conditional distributions under bin likelihood — raSab_bin_fc","text":"Z new value Z Sab new value Sab new value ","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_bin_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a and Sab from full conditional distributions under bin likelihood — raSab_bin_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_cbin_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a and Sab from full conditional distributions under the cbin likelihood — raSab_cbin_fc","title":"Simulate a and Sab from full conditional distributions under the cbin likelihood — raSab_cbin_fc","text":"Simulate Sab full conditional distributions cbin likelihood","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_cbin_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a and Sab from full conditional distributions under the cbin likelihood — raSab_cbin_fc","text":"","code":"raSab_cbin_fc(Z, Y, a, b, Sab, odmax, odobs, Sab0=NULL, eta0=NULL,SS = round(sqrt(nrow(Z))))"},{"path":"https://netify-dev.github.io/lame/reference/raSab_cbin_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a and Sab from full conditional distributions under the cbin likelihood — raSab_cbin_fc","text":"Z square matrix, current value Z Y square matrix ranked nomination data current value row effects b current value column effects Sab current value Cov(,b) odmax scalar vector giving maximum number nominations individual odobs observed outdegree Sab0 prior (inverse) scale matrix prior distribution eta0 prior degrees freedom prior distribution SS number iterations","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_cbin_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a and Sab from full conditional distributions under the cbin likelihood — raSab_cbin_fc","text":"Z new value Z Sab new value Sab new value ","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_cbin_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a and Sab from full conditional distributions under the cbin likelihood — raSab_cbin_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_frn_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a and Sab from full conditional distributions under frn likelihood — raSab_frn_fc","title":"Simulate a and Sab from full conditional distributions under frn likelihood — raSab_frn_fc","text":"Simulate Sab full conditional distributions frn likelihood","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_frn_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a and Sab from full conditional distributions under frn likelihood — raSab_frn_fc","text":"","code":"raSab_frn_fc(Z, Y, YL, a, b, Sab, odmax, odobs, Sab0=NULL, eta0=NULL, SS=round(sqrt(nrow(Z))))"},{"path":"https://netify-dev.github.io/lame/reference/raSab_frn_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a and Sab from full conditional distributions under frn likelihood — raSab_frn_fc","text":"Z square matrix, current value Z Y square matrix ranked nomination data YL list ranked individuals, least preferred row current value row effects b current value column effects Sab current value Cov(,b) odmax scalar vector giving maximum number nominations individual odobs observed outdegree Sab0 prior (inverse) scale matrix prior distribution eta0 prior degrees freedom prior distribution SS number iterations","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_frn_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a and Sab from full conditional distributions under frn likelihood — raSab_frn_fc","text":"Z new value Z Sab new value Sab new value ","code":""},{"path":"https://netify-dev.github.io/lame/reference/raSab_frn_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a and Sab from full conditional distributions under frn likelihood — raSab_frn_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional simulation of additive effects and regression coefficients — rbeta_ab_fc","title":"Conditional simulation of additive effects and regression coefficients — rbeta_ab_fc","text":"Simulates joint full conditional distribution (beta,,b) social relations regression model","code":""},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional simulation of additive effects and regression coefficients — rbeta_ab_fc","text":"","code":"rbeta_ab_fc(   Z,   Sab,   rho,   X = NULL,   s2 = 1,   offset = 0,   iV0 = NULL,   m0 = NULL,   g = length(Z) )"},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional simulation of additive effects and regression coefficients — rbeta_ab_fc","text":"Z n X n normal relational matrix Sab row column covariance rho dyadic correlation X n x n x p covariate array s2 dyadic variance offset matrix dimension Z. assumed Z-offset follows SRRM, offset contain multiplicative effects (U%*% t(V)  ) iV0 prior precision matrix regression parameters m0 prior mean vector regression parameters g prior variance scale g-prior iV0 unspecified","code":""},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional simulation of additive effects and regression coefficients — rbeta_ab_fc","text":"beta regression coefficients additive row effects b additive column effects","code":""},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditional simulation of additive effects and regression coefficients — rbeta_ab_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_fc_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized rbeta_ab_fc with C++ backend — rbeta_ab_fc_opt","title":"Optimized rbeta_ab_fc with C++ backend — rbeta_ab_fc_opt","text":"Optimized rbeta_ab_fc C++ backend","code":""},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_fc_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized rbeta_ab_fc with C++ backend — rbeta_ab_fc_opt","text":"","code":"rbeta_ab_fc_opt(   Z,   Sab,   rho,   X = NULL,   s2 = 1,   offset = 0,   iV0 = NULL,   m0 = NULL,   g = length(Z) )"},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_rep_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs sampling of additive row and column effects and regression coefficient with independent replicate relational data — rbeta_ab_rep_fc","title":"Gibbs sampling of additive row and column effects and regression coefficient with independent replicate relational data — rbeta_ab_rep_fc","text":"Simulates joint full conditional distribution (,b,beta), assuming additive row column effects regression coefficient across replicates.","code":""},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_rep_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs sampling of additive row and column effects and regression coefficient with independent replicate relational data — rbeta_ab_rep_fc","text":"","code":"rbeta_ab_rep_fc(Z.T,Sab,rho,X.T,s2=1)"},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_rep_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs sampling of additive row and column effects and regression coefficient with independent replicate relational data — rbeta_ab_rep_fc","text":"Z.T n x n x T array, third dimension replicates. slice array (latent) normal relational matrix, multiplicative effects subtracted Sab row column covariance rho dyadic correlation X.T n x n x p x T covariate array s2 dyadic variance","code":""},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_rep_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs sampling of additive row and column effects and regression coefficient with independent replicate relational data — rbeta_ab_rep_fc","text":"beta regression coefficients additive row effects b additive column effects","code":""},{"path":"https://netify-dev.github.io/lame/reference/rbeta_ab_rep_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs sampling of additive row and column effects and regression coefficient with independent replicate relational data — rbeta_ab_rep_fc","text":"Peter Hoff, Yanjun ","code":""},{"path":"https://netify-dev.github.io/lame/reference/rmvnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation from a multivariate normal distribution — rmvnorm","title":"Simulation from a multivariate normal distribution — rmvnorm","text":"Simulates matrix rows ..d. samples multivariate normal distribution","code":""},{"path":"https://netify-dev.github.io/lame/reference/rmvnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation from a multivariate normal distribution — rmvnorm","text":"","code":"rmvnorm(n, mu, Sigma, Sigma.chol = NULL)"},{"path":"https://netify-dev.github.io/lame/reference/rmvnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation from a multivariate normal distribution — rmvnorm","text":"n sample size mu multivariate mean vector Sigma covariance matrix Sigma.chol Cholesky factorization Sigma","code":""},{"path":"https://netify-dev.github.io/lame/reference/rmvnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation from a multivariate normal distribution — rmvnorm","text":"matrix n rows","code":""},{"path":"https://netify-dev.github.io/lame/reference/rmvnorm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation from a multivariate normal distribution — rmvnorm","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Griddy Gibbs update for dyadic correlation — rrho_fc","title":"Griddy Gibbs update for dyadic correlation — rrho_fc","text":"Simulation dyadic correlation approximate full conditional distribution using griddy Gibbs sampling","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Griddy Gibbs update for dyadic correlation — rrho_fc","text":"","code":"rrho_fc(Z, Sab, s2 = 1, offset = 0, ngp = 100, asp = NULL)"},{"path":"https://netify-dev.github.io/lame/reference/rrho_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Griddy Gibbs update for dyadic correlation — rrho_fc","text":"Z n X n normal relational matrix Sab covariance additive effects s2 residual variance offset matrix dimension Z. assumed Z-offset follows SRM distribution, offset contain regression terms multiplicative effects (Xbeta(X,beta+ U%*%t(V)    ) ngp number points unevenly-spaced grid approximate full conditional distribution asp use arc sine prior (TRUE) uniform prior (FALSE)","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Griddy Gibbs update for dyadic correlation — rrho_fc","text":"value rho","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Griddy Gibbs update for dyadic correlation — rrho_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_fc_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized rrho_fc with C++ backend — rrho_fc_opt","title":"Optimized rrho_fc with C++ backend — rrho_fc_opt","text":"Optimized rrho_fc C++ backend","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_fc_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized rrho_fc with C++ backend — rrho_fc_opt","text":"","code":"rrho_fc_opt(Z, Sab, s2 = 1, offset = 0, ngp = 100, asp = TRUE)"},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh.html","id":null,"dir":"Reference","previous_headings":"","what":"Metropolis update for dyadic correlation — rrho_mh","title":"Metropolis update for dyadic correlation — rrho_mh","text":"Metropolis update dyadic correlation","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metropolis update for dyadic correlation — rrho_mh","text":"","code":"rrho_mh(Z, rho, s2 = 1,offset=0, asp=NULL)"},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metropolis update for dyadic correlation — rrho_mh","text":"Z n X n normal relational matrix rho current value rho s2 current value s2 offset matrix dimension Z. assumed Z-offset equal dyadic noise, offset contain additive multiplicative effects (Xbeta(X,beta+ U%*%t(V) +  outer(,b,\"+\")     ) asp use arc sine prior (TRUE) uniform prior (FALSE)","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metropolis update for dyadic correlation — rrho_mh","text":"new value rho","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metropolis update for dyadic correlation — rrho_mh","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Metropolis update for dyadic correlation with independent replicate data — rrho_mh_rep","title":"Metropolis update for dyadic correlation with independent replicate data — rrho_mh_rep","text":"Metropolis update dyadic correlation independent replicate data.","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metropolis update for dyadic correlation with independent replicate data — rrho_mh_rep","text":"","code":"rrho_mh_rep(E.T, rho, s2 = 1)"},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metropolis update for dyadic correlation with independent replicate data — rrho_mh_rep","text":"E.T Array square residual relational matrix series. third dimension array different replicates. slice array according third dimension square residual relational matrix. rho current value rho s2 current value s2","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metropolis update for dyadic correlation with independent replicate data — rrho_mh_rep","text":"new value rho","code":""},{"path":"https://netify-dev.github.io/lame/reference/rrho_mh_rep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metropolis update for dyadic correlation with independent replicate data — rrho_mh_rep","text":"Peter Hoff, Yanjun ","code":""},{"path":"https://netify-dev.github.io/lame/reference/rs2_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs update for dyadic variance — rs2_fc","title":"Gibbs update for dyadic variance — rs2_fc","text":"Gibbs update dyadic variance","code":""},{"path":"https://netify-dev.github.io/lame/reference/rs2_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs update for dyadic variance — rs2_fc","text":"","code":"rs2_fc(Z, rho,offset=0,nu0=NULL,s20=NULL)"},{"path":"https://netify-dev.github.io/lame/reference/rs2_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs update for dyadic variance — rs2_fc","text":"Z n X n normal relational matrix rho current value rho offset matrix dimension Z. assumed Z-offset equal dyadic noise, offset contain additive multiplicative effects (Xbeta(X,beta+ U%*%t(V) + outer(,b,\"+\")   ) nu0 prior degrees freedom s20 prior estimate s2","code":""},{"path":"https://netify-dev.github.io/lame/reference/rs2_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs update for dyadic variance — rs2_fc","text":"new value s2","code":""},{"path":"https://netify-dev.github.io/lame/reference/rs2_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs update for dyadic variance — rs2_fc","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rs2_rep_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs update for dyadic variance with independent replicate relational data — rs2_rep_fc","title":"Gibbs update for dyadic variance with independent replicate relational data — rs2_rep_fc","text":"Gibbs update dyadic variance independent replicate relational data","code":""},{"path":"https://netify-dev.github.io/lame/reference/rs2_rep_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs update for dyadic variance with independent replicate relational data — rs2_rep_fc","text":"","code":"rs2_rep_fc(E.T, rho)"},{"path":"https://netify-dev.github.io/lame/reference/rs2_rep_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs update for dyadic variance with independent replicate relational data — rs2_rep_fc","text":"E.T Array square residual relational matrix series. third dimension array different replicates. slice array according third dimension square residual relational matrix rho current value rho","code":""},{"path":"https://netify-dev.github.io/lame/reference/rs2_rep_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs update for dyadic variance with independent replicate relational data — rs2_rep_fc","text":"new value s2","code":""},{"path":"https://netify-dev.github.io/lame/reference/rs2_rep_fc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gibbs update for dyadic variance with independent replicate relational data — rs2_rep_fc","text":"Peter Hoff, Yanjun ","code":""},{"path":"https://netify-dev.github.io/lame/reference/rwish.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation from a Wishart distribution — rwish","title":"Simulation from a Wishart distribution — rwish","text":"Simulates random Wishart-distributed matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/rwish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation from a Wishart distribution — rwish","text":"","code":"rwish(S0, nu = dim(S0)[1] + 2)"},{"path":"https://netify-dev.github.io/lame/reference/rwish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation from a Wishart distribution — rwish","text":"S0 positive definite matrix nu positive integer","code":""},{"path":"https://netify-dev.github.io/lame/reference/rwish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation from a Wishart distribution — rwish","text":"positive definite matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/rwish.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation from a Wishart distribution — rwish","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/rwish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation from a Wishart distribution — rwish","text":"","code":"## The expectation is S0*nu  S0<-rwish(diag(3))   SS<-matrix(0,3,3)  for(s in 1:1000) { SS<-SS+rwish(S0,5) }  SS/s  #>            [,1]      [,2]      [,3] #> [1,]  22.245463 -7.631324 -26.91877 #> [2,]  -7.631324 16.648039  17.09926 #> [3,] -26.918774 17.099261  46.83511  S0*5 #>            [,1]      [,2]      [,3] #> [1,]  23.343534 -7.985705 -28.06071 #> [2,]  -7.985705 16.679274  17.68187 #> [3,] -28.060708 17.681869  48.34795"},{"path":"https://netify-dev.github.io/lame/reference/sample_ab_bipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample additive effects for bipartite networks — sample_ab_bipartite","title":"Sample additive effects for bipartite networks — sample_ab_bipartite","text":"Sample additive effects bipartite networks","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_ab_bipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample additive effects for bipartite networks — sample_ab_bipartite","text":"","code":"sample_ab_bipartite(Z, EZ_without_ab, sigma2_a, sigma2_b, s2)"},{"path":"https://netify-dev.github.io/lame/reference/sample_dynamic_ab_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample dynamic additive effects with AR(1) evolution — sample_dynamic_ab_cpp","title":"Sample dynamic additive effects with AR(1) evolution — sample_dynamic_ab_cpp","text":"Updates row effects () column effects (b) evolve time according AR(1) processes: \\(a_{,t} = \\rho_{ab} a_{,t-1} + \\epsilon_{,t}\\)","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_dynamic_ab_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample dynamic additive effects with AR(1) evolution — sample_dynamic_ab_cpp","text":"","code":"sample_dynamic_ab_cpp(   a_current,   b_current,   Z_array,   EZ_array,   rho_ab,   sigma_ab,   Sab,   symmetric )"},{"path":"https://netify-dev.github.io/lame/reference/sample_dynamic_ab_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample dynamic additive effects with AR(1) evolution — sample_dynamic_ab_cpp","text":"a_current Current 2D array row effects (n x T) b_current Current 2D array column effects (n x T) Z_array 3D array latent positions (n x n x T) EZ_array 3D array expected values without additive effects (n x n x T) rho_ab AR(1) parameter additive effects sigma_ab Innovation standard deviation Sab Covariance matrix b (2x2) symmetric Whether network symmetric","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_dynamic_ab_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample dynamic additive effects with AR(1) evolution — sample_dynamic_ab_cpp","text":"List updated b arrays","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_rho_ab_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample AR(1) parameter for dynamic additive effects — sample_rho_ab_cpp","title":"Sample AR(1) parameter for dynamic additive effects — sample_rho_ab_cpp","text":"Uses Metropolis-Hastings sample rho_ab given time series effects","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_rho_ab_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample AR(1) parameter for dynamic additive effects — sample_rho_ab_cpp","text":"","code":"sample_rho_ab_cpp(a_mat, b_mat, sigma_ab, rho_current, symmetric)"},{"path":"https://netify-dev.github.io/lame/reference/sample_rho_ab_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample AR(1) parameter for dynamic additive effects — sample_rho_ab_cpp","text":"a_mat Matrix row effects (n x T) b_mat Matrix column effects (n x T) sigma_ab Innovation standard deviation rho_current Current value rho symmetric Whether network symmetric","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_rho_ab_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample AR(1) parameter for dynamic additive effects — sample_rho_ab_cpp","text":"Updated rho value","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_rho_uv.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample AR(1) parameter for dynamic latent factors — sample_rho_uv","title":"Sample AR(1) parameter for dynamic latent factors — sample_rho_uv","text":"Sample AR(1) parameter dynamic latent factors","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_rho_uv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample AR(1) parameter for dynamic latent factors — sample_rho_uv","text":"","code":"sample_rho_uv(U_cube, V_cube, sigma_uv, rho_current, symmetric)"},{"path":"https://netify-dev.github.io/lame/reference/sample_rho_uv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample AR(1) parameter for dynamic latent factors — sample_rho_uv","text":"U_cube 3D array U positions (n x R x T) V_cube 3D array V positions (n x R x T) sigma_uv Innovation standard deviation rho_current Current value rho symmetric Whether network symmetric","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_rho_uv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample AR(1) parameter for dynamic latent factors — sample_rho_uv","text":"Updated rho value","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_sigma_ab_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample innovation variance for dynamic additive effects — sample_sigma_ab_cpp","title":"Sample innovation variance for dynamic additive effects — sample_sigma_ab_cpp","text":"Sample innovation variance dynamic additive effects","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_sigma_ab_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample innovation variance for dynamic additive effects — sample_sigma_ab_cpp","text":"","code":"sample_sigma_ab_cpp(   a_mat,   b_mat,   rho_ab,   symmetric,   prior_shape = 2,   prior_scale = 1 )"},{"path":"https://netify-dev.github.io/lame/reference/sample_sigma_ab_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample innovation variance for dynamic additive effects — sample_sigma_ab_cpp","text":"a_mat Matrix row effects (n x T) b_mat Matrix column effects (n x T) rho_ab AR(1) parameter symmetric Whether network symmetric prior_shape Shape parameter inverse gamma prior prior_scale Scale parameter inverse gamma prior","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_sigma_ab_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample innovation variance for dynamic additive effects — sample_sigma_ab_cpp","text":"Updated sigma_ab value","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_sigma_uv.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample innovation variance for dynamic latent factors — sample_sigma_uv","title":"Sample innovation variance for dynamic latent factors — sample_sigma_uv","text":"Sample innovation variance dynamic latent factors","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_sigma_uv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample innovation variance for dynamic latent factors — sample_sigma_uv","text":"","code":"sample_sigma_uv(U_cube, V_cube, rho_uv, symmetric)"},{"path":"https://netify-dev.github.io/lame/reference/sample_sigma_uv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample innovation variance for dynamic latent factors — sample_sigma_uv","text":"U_cube 3D array U positions (n x R x T) V_cube 3D array V positions (n x R x T) rho_uv AR(1) parameter symmetric Whether network symmetric","code":""},{"path":"https://netify-dev.github.io/lame/reference/sample_sigma_uv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample innovation variance for dynamic latent factors — sample_sigma_uv","text":"Updated sigma_uv value","code":""},{"path":"https://netify-dev.github.io/lame/reference/sampsonmonks.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampson's monastery data — sampsonmonks","title":"Sampson's monastery data — sampsonmonks","text":"Several dyadic variables measured 18 members monastery.","code":""},{"path":"https://netify-dev.github.io/lame/reference/sampsonmonks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sampson's monastery data — sampsonmonks","text":"socioarray whose dimensions represent nominators, nominatees relations. monk asked rank three monks variety positive negative relations. rank three indicates \"highest\" ranking particular relational variable. relations like_m2 like_m1 evaluations likeing one two timepoints previous relations measured.","code":""},{"path":"https://netify-dev.github.io/lame/reference/sampsonmonks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sampson's monastery data — sampsonmonks","text":"http://moreno.ss.uci.edu/data.html#sampson","code":""},{"path":"https://netify-dev.github.io/lame/reference/sheep.html","id":null,"dir":"Reference","previous_headings":"","what":"Sheep dominance data — sheep","title":"Sheep dominance data — sheep","text":"Number dominance encounters 28 female bighorn sheep. Cell (,j) records number times sheep dominated sheep j. Hass (1991).","code":""},{"path":"https://netify-dev.github.io/lame/reference/sheep.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sheep dominance data — sheep","text":"list consisting following: dom: directed socioarray recording number dominance encounters. age: age sheep years.","code":""},{"path":"https://netify-dev.github.io/lame/reference/sheep.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sheep dominance data — sheep","text":"http://moreno.ss.uci.edu/data.html#sheep","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a network, i.e. a binary relational matrix — simY_bin","title":"Simulate a network, i.e. a binary relational matrix — simY_bin","text":"Simulates network, .e. binary relational matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a network, i.e. a binary relational matrix — simY_bin","text":"","code":"simY_bin(EZ, rho)"},{"path":"https://netify-dev.github.io/lame/reference/simY_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a network, i.e. a binary relational matrix — simY_bin","text":"EZ square matrix giving expected value latent Z matrix rho dyadic correlation","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a network, i.e. a binary relational matrix — simY_bin","text":"square binary matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a network, i.e. a binary relational matrix — simY_bin","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_frn.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an relational matrix based on a fixed rank nomination scheme — simY_frn","title":"Simulate an relational matrix based on a fixed rank nomination scheme — simY_frn","text":"Simulate relational matrix based fixed rank nomination scheme","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_frn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an relational matrix based on a fixed rank nomination scheme — simY_frn","text":"","code":"simY_frn(EZ, rho, odmax, YO)"},{"path":"https://netify-dev.github.io/lame/reference/simY_frn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an relational matrix based on a fixed rank nomination scheme — simY_frn","text":"EZ square matrix giving expected value latent Z matrix rho dyadic correlation odmax scalar vector giving maximum number nominations node YO square matrix identifying missing values maintained","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_frn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an relational matrix based on a fixed rank nomination scheme — simY_frn","text":"square matrix, higher values represent stronger relationships","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_frn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate an relational matrix based on a fixed rank nomination scheme — simY_frn","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_nrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a normal relational matrix — simY_nrm","title":"Simulate a normal relational matrix — simY_nrm","text":"Simulates normal relational matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_nrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a normal relational matrix — simY_nrm","text":"","code":"simY_nrm(EY, rho, s2)"},{"path":"https://netify-dev.github.io/lame/reference/simY_nrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a normal relational matrix — simY_nrm","text":"EY square matrix giving expected value relational matrix rho dyadic correlation s2 dyadic variance","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_nrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a normal relational matrix — simY_nrm","text":"square matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_nrm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a normal relational matrix — simY_nrm","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_ord.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an ordinal relational matrix — simY_ord","title":"Simulate an ordinal relational matrix — simY_ord","text":"Simulates ordinal relational matrix particular marginal distribution","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_ord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an ordinal relational matrix — simY_ord","text":"","code":"simY_ord(EZ, rho, Y)"},{"path":"https://netify-dev.github.io/lame/reference/simY_ord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an ordinal relational matrix — simY_ord","text":"EZ square matrix giving expected value latent Z matrix rho scalar giving within-dyad correlation Y ordinal relational data matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_ord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an ordinal relational matrix — simY_ord","text":"square matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_ord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate an ordinal relational matrix — simY_ord","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Poisson relational matrix — simY_pois","title":"Simulate a Poisson relational matrix — simY_pois","text":"Simulates relational matrix Poisson distribution given log mean values","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Poisson relational matrix — simY_pois","text":"","code":"simY_pois(EZ)"},{"path":"https://netify-dev.github.io/lame/reference/simY_pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Poisson relational matrix — simY_pois","text":"EZ square matrix giving log expected values relational matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Poisson relational matrix — simY_pois","text":"square matrix counts","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_pois.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Poisson relational matrix — simY_pois","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_rrl.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an relational matrix based on a relative rank nomination scheme — simY_rrl","title":"Simulate an relational matrix based on a relative rank nomination scheme — simY_rrl","text":"Simulate relational matrix based relative rank nomination scheme","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_rrl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an relational matrix based on a relative rank nomination scheme — simY_rrl","text":"","code":"simY_rrl(EZ, rho, odobs, YO)"},{"path":"https://netify-dev.github.io/lame/reference/simY_rrl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an relational matrix based on a relative rank nomination scheme — simY_rrl","text":"EZ square matrix giving expected value latent Z matrix rho dyadic correlation odobs scalar vector giving observed number nominations node YO square matrix identifying missing values maintained","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_rrl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an relational matrix based on a relative rank nomination scheme — simY_rrl","text":"square matrix, higher values represent stronger relationships","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_rrl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate an relational matrix based on a relative rank nomination scheme — simY_rrl","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_tob.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a tobit relational matrix — simY_tob","title":"Simulate a tobit relational matrix — simY_tob","text":"Simulates tobit relational matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_tob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a tobit relational matrix — simY_tob","text":"","code":"simY_tob(EY, rho, s2)"},{"path":"https://netify-dev.github.io/lame/reference/simY_tob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a tobit relational matrix — simY_tob","text":"EY square matrix giving expected value relational matrix rho dyadic correlation s2 dyadic variance","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_tob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a tobit relational matrix — simY_tob","text":"square matrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/simY_tob.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a tobit relational matrix — simY_tob","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/simZ.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Z given its expectation and covariance — simZ","title":"Simulate Z given its expectation and covariance — simZ","text":"Simulate Z given expectation covariance","code":""},{"path":"https://netify-dev.github.io/lame/reference/simZ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Z given its expectation and covariance — simZ","text":"","code":"simZ(EZ, rho, s2 = 1)"},{"path":"https://netify-dev.github.io/lame/reference/simZ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Z given its expectation and covariance — simZ","text":"EZ expected value Z rho dyadic correlation s2 dyadic variance","code":""},{"path":"https://netify-dev.github.io/lame/reference/simZ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Z given its expectation and covariance — simZ","text":"simulated value Z","code":""},{"path":"https://netify-dev.github.io/lame/reference/simZ.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Z given its expectation and covariance — simZ","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.ame.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate networks from a fitted AME model — simulate.ame","title":"Simulate networks from a fitted AME model — simulate.ame","text":"Generates multiple network realizations posterior distribution fitted AME model. function performs posterior predictive simulation drawing full joint posterior distribution model parameters, thereby propagating parameter uncertainty simulated networks.","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.ame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate networks from a fitted AME model — simulate.ame","text":"","code":"# S3 method for class 'ame' simulate(   object,   nsim = 100,   seed = NULL,   newdata = NULL,   burn_in = 0,   thin = 1,   return_latent = FALSE,   ... )"},{"path":"https://netify-dev.github.io/lame/reference/simulate.ame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate networks from a fitted AME model — simulate.ame","text":"object fitted model object class \"ame\" nsim number networks simulate (default: 100) seed random seed reproducibility newdata optional list containing new covariate data: Xdyad dyadic covariates (n x n x p array nA x nB x p bipartite) Xrow row/sender covariates (n x p matrix nA x p bipartite) Xcol column/receiver covariates (n x p matrix nB x p bipartite) NULL, uses covariates original model fit burn_in number initial MCMC samples discard (default: 0, assumes burn-already removed) thin thinning interval MCMC samples (default: 1, use every sample) return_latent logical: return latent Z matrices addition Y? (default: FALSE) ... additional arguments (currently used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.ame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate networks from a fitted AME model — simulate.ame","text":"list components: Y list nsim simulated networks format original data Z return_latent=TRUE, list nsim latent Z matrices family family model (binary, normal, etc.) mode network mode (unipartite bipartite)","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.ame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate networks from a fitted AME model — simulate.ame","text":"Mathematical Framework: AME model represents networks latent variable framework: $$Y_{ij} \\sim F(Z_{ij})$$ F observation model (e.g., probit binary) Z latent network: $$Z_{ij} = \\beta^T x_{ij} + a_i + b_j + u_i^T v_j + \\epsilon_{ij}$$ Components: \\(\\beta\\): regression coefficients dyadic/nodal covariates \\(a_i, b_j\\): additive sender receiver random effects \\(u_i, v_j\\): multiplicative latent factors (dimension R) \\(\\epsilon_{ij}\\): dyadic random effects correlation \\(\\rho\\) Uncertainty Quantification Process: simulated network k = 1, ..., nsim: Parameter Sampling: Draw parameter set \\(\\theta^{(k)}\\) MCMC chains: Sample iteration s uniformly stored MCMC samples Extract \\(\\beta^{(s)}\\), variance components \\((v_a^{(s)}, v_b^{(s)}, v_e^{(s)}, \\rho^{(s)})\\) Random Effects Generation: Sample new random effects posterior distributions: \\(a_i^{(k)} \\sim N(0, v_a^{(s)})\\) = 1, ..., n (row effects) \\(b_j^{(k)} \\sim N(0, v_b^{(s)})\\) j = 1, ..., m (column effects) Note: sample fresh posterior variance rather using point estimates properly propagate uncertainty Latent Network Construction: Build expected latent positions: $$E[Z_{ij}^{(k)}] = \\beta^{(s)T} x_{ij} + a_i^{(k)} + b_j^{(k)} + \\hat{u}_i^T \\hat{v}_j$$ \\(\\hat{u}_i, \\hat{v}_j\\) posterior mean latent factors Dyadic Correlation: Add correlated noise structure: $$Z_{ij}^{(k)} = E[Z_{ij}^{(k)}] + \\epsilon_{ij}^{(k)}$$ \\(\\epsilon\\) covariance structure: $$Cov(\\epsilon_{ij}, \\epsilon_{ji}) = \\rho^{(s)} v_e^{(s)}$$ $$Var(\\epsilon_{ij}) = v_e^{(s)}$$ Observation Model: Generate observed network based family: Binary: \\(Y_{ij}^{(k)} = (Z_{ij}^{(k)} > 0)\\) Normal: \\(Y_{ij}^{(k)} = Z_{ij}^{(k)}\\) Poisson: \\(Y_{ij}^{(k)} \\sim Poisson(\\exp(Z_{ij}^{(k)}))\\) families use appropriate link functions Sources Uncertainty: simulation captures three types uncertainty: Parameter uncertainty: Different MCMC samples yield different \\(\\beta, v_a, v_b, v_e, \\rho\\) Random effect uncertainty: Fresh draws \\(N(0, v_a), N(0, v_b)\\) simulation Dyadic uncertainty: Correlated random noise \\(\\epsilon_{ij}\\) approach provides proper posterior predictive distributions account sources uncertainty model. variation across simulated networks reflects posterior uncertainty data generating process. Limitations: Currently, multiplicative effects (U, V) use posterior means rather sampling full posterior. complete uncertainty quantification, one need store sample full MCMC chains latent factors, require substantial additional memory. Symmetric Networks: symmetric networks, model enforces \\(a_i = b_i\\) \\(u_i = v_i\\), latent matrix Z symmetrized generating observations.","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.ame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate networks from a fitted AME model — simulate.ame","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.ame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate networks from a fitted AME model — simulate.ame","text":"","code":"if (FALSE) { # \\dontrun{ # Fit a model data(YX_bin) fit <- ame(YX_bin$Y, YX_bin$X, burn=100, nscan=500, family=\"binary\")  # Simulate 50 networks from posterior sims <- simulate(fit, nsim=50)  # With new covariates new_X <- array(rnorm(dim(YX_bin$X)[1] * dim(YX_bin$X)[2] * dim(YX_bin$X)[3]),                dim=dim(YX_bin$X)) sims_new <- simulate(fit, nsim=50, newdata=list(Xdyad=new_X)) } # }"},{"path":"https://netify-dev.github.io/lame/reference/simulate.lame.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate longitudinal networks from a fitted LAME model — simulate.lame","title":"Simulate longitudinal networks from a fitted LAME model — simulate.lame","text":"Generates multiple longitudinal network realizations posterior distribution fitted LAME (Longitudinal AME) model. function performs posterior predictive simulation dynamic networks, propagating cross-sectional temporal uncertainty simulated trajectories.","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.lame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate longitudinal networks from a fitted LAME model — simulate.lame","text":"","code":"# S3 method for class 'lame' simulate(   object,   nsim = 100,   seed = NULL,   newdata = NULL,   n_time = NULL,   burn_in = 0,   thin = 1,   return_latent = FALSE,   start_from = \"posterior\",   ... )"},{"path":"https://netify-dev.github.io/lame/reference/simulate.lame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate longitudinal networks from a fitted LAME model — simulate.lame","text":"object fitted model object class \"lame\" nsim number network trajectories simulate (default: 100) seed random seed reproducibility newdata optional list containing new covariate data: Xdyad list T dyadic covariate arrays (n x n x p nA x nB x p) Xrow list T row/sender covariate matrices (n x p nA x p) Xcol list T column/receiver covariate matrices (n x p nB x p) NULL, uses covariates original model fit n_time number time periods simulate. NULL, uses original data burn_in number initial MCMC samples discard (default: 0) thin thinning interval MCMC samples (default: 1, use every sample) return_latent logical: return latent Z matrices addition Y? (default: FALSE) start_from character: initialize simulation \"posterior\" start posterior mean (default) \"random\" random initialization \"data\" use first time point original data ... additional arguments (currently used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.lame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate longitudinal networks from a fitted LAME model — simulate.lame","text":"list components: Y list nsim simulated longitudinal network trajectories, element list T networks Z return_latent=TRUE, list nsim latent Z trajectories family family model (binary, normal, etc.) mode network mode (unipartite bipartite) n_time number time periods","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.lame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate longitudinal networks from a fitted LAME model — simulate.lame","text":"Mathematical Framework Longitudinal Networks: LAME model extends AME multiple time periods T potential temporal dependencies. time t = 1, ..., T: $$Y_{ij,t} \\sim F(Z_{ij,t})$$ latent network evolves : $$Z_{ij,t} = \\beta^T x_{ij,t} + a_{,t} + b_{j,t} + u_{,t}^T v_{j,t} + \\epsilon_{ij,t}$$ Temporal Dynamics: LAME can incorporate three types temporal dependencies: Static Effects: Parameters constant time \\(a_{,t} = a_i\\), \\(b_{j,t} = b_j\\) t \\(u_{,t} = u_i\\), \\(v_{j,t} = v_j\\) t Dynamic Additive Effects: AR(1) process random effects $$a_{,t} = \\rho_{ab} a_{,t-1} + \\eta_{,t}, \\quad \\eta_{,t} \\sim N(0, \\sigma_a^2(1-\\rho_{ab}^2))$$ $$b_{j,t} = \\rho_{ab} b_{j,t-1} + \\xi_{j,t}, \\quad \\xi_{j,t} \\sim N(0, \\sigma_b^2(1-\\rho_{ab}^2))$$ \\(\\rho_{ab}\\) temporal correlation parameter Dynamic Multiplicative Effects: AR(1) latent factors $$u_{,t} = \\rho_{uv} u_{,t-1} + \\omega_{,t}$$ $$v_{j,t} = \\rho_{uv} v_{j,t-1} + \\psi_{j,t}$$ Uncertainty Quantification Process Trajectories: simulated trajectory k = 1, ..., nsim: Step 1: Parameter Sampling Draw MCMC iteration s uniformly stored posterior samples Extract static parameters: \\(\\beta^{(s)}\\), variance components Extract temporal parameters applicable: \\(\\rho_{ab}^{(s)}\\), \\(\\rho_{uv}^{(s)}\\) Step 2: Initialize t = 1 Depending start_from parameter: \"posterior\": Use posterior means starting values \"random\": Draw stationary distribution additive effects: \\(a_{,1}^{(k)} \\sim N(0, \\sigma_a^2)\\) multiplicative effects: Initialize prior Step 3: Evolve Time t = 2, ..., T: ) Update Dynamic Effects (applicable): $$a_{,t}^{(k)} = \\rho_{ab}^{(s)} a_{,t-1}^{(k)} + \\eta_{,t}^{(k)}$$ \\(\\eta_{,t}^{(k)} \\sim N(0, \\sigma_a^2(1-[\\rho_{ab}^{(s)}]^2))\\) innovation variance \\(\\sigma_a^2(1-\\rho_{ab}^2)\\) ensures stationarity b) Construct Latent Network: $$E[Z_{ij,t}^{(k)}] = \\beta^{(s)T} x_{ij,t} + a_{,t}^{(k)} + b_{j,t}^{(k)} + u_{,t}^T v_{j,t}$$ c) Add Dyadic Noise: $$Z_{ij,t}^{(k)} = E[Z_{ij,t}^{(k)}] + \\epsilon_{ij,t}^{(k)}$$ correlation structure preserved AME model d) Generate Observations: Apply appropriate link function based family Sources Uncertainty Longitudinal Context: Cross-sectional uncertainty (AME): Parameter uncertainty MCMC Random effect variability Dyadic noise Temporal uncertainty: Uncertainty temporal correlation parameters \\(\\rho_{ab}, \\rho_{uv}\\) Innovation noise AR(1) processes Propagation uncertainty time (compounds periods) Initial condition uncertainty: Different starting values lead different trajectories Captured start_from options Interpretation Multiple Trajectories: simulated trajectory represents one possible evolution network consistent posterior distribution. Variation across trajectories captures: Model parameter uncertainty Stochastic variation temporal evolution Accumulated uncertainty time periods ensemble trajectories provides prediction intervals widen time, reflecting increasing uncertainty longer-term forecasts. Special Considerations: Temporal Correlation: Higher \\(\\rho\\) values create smoother trajectories persistence Stationarity: AR(1) innovation variance scaled maintain stationary marginal distributions Missing Time Points: simulating beyond observed data (n_time > T_observed), covariates recycled set zero appropriate warnings Limitations: simulate.ame, multiplicative effects currently use posterior means. Full uncertainty require storing complete MCMC chains \\(u_{,t}, v_{j,t}\\) time points, memory-intensive large networks long time series.","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.lame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate longitudinal networks from a fitted LAME model — simulate.lame","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/simulate.lame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate longitudinal networks from a fitted LAME model — simulate.lame","text":"","code":"if (FALSE) { # \\dontrun{ # Fit a longitudinal model data(YX_bin_list) fit <- lame(YX_bin_list$Y, YX_bin_list$X, burn=100, nscan=500, family=\"binary\")  # Simulate 50 network trajectories from posterior sims <- simulate(fit, nsim=50)  # Simulate longer time series sims_long <- simulate(fit, nsim=25, n_time=20)  # With new covariates new_X <- lapply(YX_bin_list$X, function(x) {   array(rnorm(prod(dim(x))), dim=dim(x)) }) sims_new <- simulate(fit, nsim=50, newdata=list(Xdyad=new_X)) } # }"},{"path":"https://netify-dev.github.io/lame/reference/sm2el.html","id":null,"dir":"Reference","previous_headings":"","what":"Sociomatrix to edgelist — sm2el","title":"Sociomatrix to edgelist — sm2el","text":"Construction edgelist sociomatrix","code":""},{"path":"https://netify-dev.github.io/lame/reference/sm2el.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sociomatrix to edgelist — sm2el","text":"","code":"sm2el(sm,directed=TRUE)"},{"path":"https://netify-dev.github.io/lame/reference/sm2el.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sociomatrix to edgelist — sm2el","text":"sm sociomatrix possibly valued relations directed TRUE, use upper triangular part matrix enumerate edges","code":""},{"path":"https://netify-dev.github.io/lame/reference/sm2el.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sociomatrix to edgelist — sm2el","text":"edglist","code":""},{"path":"https://netify-dev.github.io/lame/reference/sm2el.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sociomatrix to edgelist — sm2el","text":"Peter Hoff","code":""},{"path":"https://netify-dev.github.io/lame/reference/sm2el.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sociomatrix to edgelist — sm2el","text":"","code":"Y<-matrix(rpois(10*10,.5),10,10) ; diag(Y)<-NA E<-sm2el(Y)  el2sm(E) - Y  #>     1  2  3  4  5  6  7  8  9 10 #> 1  NA  0  0  0  0  0  0  0  0  0 #> 2   0 NA  0  0  0  0  0  0  0  0 #> 3   0  0 NA  0  0  0  0  0  0  0 #> 4   0  0  0 NA  0  0  0  0  0  0 #> 5   0  0  0  0 NA  0  0  0  0  0 #> 6   0  0  0  0  0 NA  0  0  0  0 #> 7   0  0  0  0  0  0 NA  0  0  0 #> 8   0  0  0  0  0  0  0 NA  0  0 #> 9   0  0  0  0  0  0  0  0 NA  0 #> 10  0  0  0  0  0  0  0  0  0 NA"},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of an AME object — summary.ame","title":"Summary of an AME object — summary.ame","text":"Provides comprehensive summary fitted AME (Additive Multiplicative Effects) model, including parameter estimates, standard errors, confidence intervals, model diagnostics.","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of an AME object — summary.ame","text":"","code":"# S3 method for class 'ame' summary(object, ...)"},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of an AME object — summary.ame","text":"object object class \"ame\", typically result fitting AME model using ame function ... additional parameters (currently used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of an AME object — summary.ame","text":"list class \"summary.ame\" containing: call original function call beta Matrix regression coefficient estimates statistics variance Matrix variance component estimates","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of an AME object — summary.ame","text":"summary includes: Regression coefficients Point estimates, standard errors, z-values, p-values, 95% confidence intervals dyadic, sender, receiver covariates Variance components Estimates standard errors : va Variance additive sender/row effects (asymmetric networks) cab Covariance sender receiver effects vb Variance additive receiver/column effects (asymmetric networks) rho Dyadic correlation (reciprocity directed networks) ve Residual variance symmetric networks, va ve estimated.","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of an AME object — summary.ame","text":"Peter Hoff, Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for AME simulations — summary.ame.sim","title":"Summary method for AME simulations — summary.ame.sim","text":"Summary method AME simulations","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for AME simulations — summary.ame.sim","text":"","code":"# S3 method for class 'ame.sim' summary(object, ...)"},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for AME simulations — summary.ame.sim","text":"object simulation object class \"ame.sim\" ... additional arguments (used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.ame.sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for AME simulations — summary.ame.sim","text":"summary statistics invisibly","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a LAME object — summary.lame","title":"Summary of a LAME object — summary.lame","text":"Provides comprehensive summary fitted LAME (Longitudinal Additive Multiplicative Effects) model, including parameter estimates, standard errors, confidence intervals, model diagnostics.","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a LAME object — summary.lame","text":"","code":"# S3 method for class 'lame' summary(object, ...)"},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a LAME object — summary.lame","text":"object object class \"lame\", typically result fitting longitudinal AME model using lame function ... additional parameters (currently used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a LAME object — summary.lame","text":"list class \"summary.lame\" containing: call original function call beta Matrix regression coefficient estimates statistics variance Matrix variance component estimates n.periods Number time periods longitudinal data","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of a LAME object — summary.lame","text":"summary includes: Regression coefficients Point estimates, standard errors, z-values, p-values, 95% confidence intervals dyadic, sender, receiver covariates Variance components Estimates standard errors : va Variance additive sender/row effects cab Covariance sender receiver effects vb Variance additive receiver/column effects rho Dyadic correlation (reciprocity) ve Residual variance","code":""},{"path":[]},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of a LAME object — summary.lame","text":"Peter Hoff, Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for LAME simulations — summary.lame.sim","title":"Summary method for LAME simulations — summary.lame.sim","text":"Summary method LAME simulations","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for LAME simulations — summary.lame.sim","text":"","code":"# S3 method for class 'lame.sim' summary(object, ...)"},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for LAME simulations — summary.lame.sim","text":"object simulation object class \"lame.sim\" ... additional arguments (used)","code":""},{"path":"https://netify-dev.github.io/lame/reference/summary.lame.sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for LAME simulations — summary.lame.sim","text":"summary statistics","code":""},{"path":"https://netify-dev.github.io/lame/reference/trace_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC trace plots and density plots for AME/LAME model parameters — trace_plot","title":"MCMC trace plots and density plots for AME/LAME model parameters — trace_plot","text":"Creates diagnostic plots Markov Chain Monte Carlo (MCMC) samples AME LAME models. Displays trace plots assess convergence mixing, alongside density plots visualize posterior distributions.","code":""},{"path":"https://netify-dev.github.io/lame/reference/trace_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC trace plots and density plots for AME/LAME model parameters — trace_plot","text":"","code":"trace_plot(   fit,   params = c(\"all\", \"beta\", \"variance\"),   include = NULL,   exclude = NULL,   ncol = 3,   nrow = NULL,   burn.in = 0,   thin = 1,   title = NULL )"},{"path":"https://netify-dev.github.io/lame/reference/trace_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC trace plots and density plots for AME/LAME model parameters — trace_plot","text":"fit object class \"ame\" \"lame\" containing MCMC samples params Character vector specifying parameters plot: \"beta\" regression coefficients, \"variance\" variance components, \"\" (default) include Character vector specific parameter names include exclude Character vector specific parameter names exclude ncol Number columns plot layout (default 3) nrow Number rows plot layout (default NULL, determined automatically) burn.Number initial iterations exclude burn-calculating statistics (default 0, assumes burn-already removed) thin Thinning interval display (default 1, thinning) title Optional title plot","code":""},{"path":"https://netify-dev.github.io/lame/reference/trace_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC trace plots and density plots for AME/LAME model parameters — trace_plot","text":"ggplot2 object can customized","code":""},{"path":"https://netify-dev.github.io/lame/reference/trace_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC trace plots and density plots for AME/LAME model parameters — trace_plot","text":"function produces two types diagnostic plots: Trace plots Show evolution parameter values across MCMC iterations. Good mixing indicated rapid exploration parameter space trends stuck periods. Density plots Show posterior distribution parameters. Multiple modes may indicate identification issues convergence problems. plots help diagnose: Convergence: chain reached stationary distribution? Mixing: chain exploring parameter space efficiently? Autocorrelation: successive samples highly correlated? Parameters displayed include: Regression coefficients (beta) Variance components (va, vb, cab, rho, ve)","code":""},{"path":"https://netify-dev.github.io/lame/reference/trace_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MCMC trace plots and density plots for AME/LAME model parameters — trace_plot","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/trace_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC trace plots and density plots for AME/LAME model parameters — trace_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Fit an AME model fit <- ame(Y, X, nscan = 10000, burn = 1000)  # Basic trace plots for all parameters trace_plot(fit)  # Only regression coefficients trace_plot(fit, params = \"beta\")  # Only variance components trace_plot(fit, params = \"variance\")  # Exclude intercept from plot trace_plot(fit, exclude = \"intercept\")  # Thin the display for clearer visualization trace_plot(fit, thin = 10) } # }"},{"path":"https://netify-dev.github.io/lame/reference/update_variances_bipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Update variance parameters for bipartite — update_variances_bipartite","title":"Update variance parameters for bipartite — update_variances_bipartite","text":"Update variance parameters bipartite","code":""},{"path":"https://netify-dev.github.io/lame/reference/update_variances_bipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update variance parameters for bipartite — update_variances_bipartite","text":"","code":"update_variances_bipartite(   a,   b,   eta0_a = 2,   eta0_b = 2,   Sab0_aa = 1,   Sab0_bb = 1 )"},{"path":"https://netify-dev.github.io/lame/reference/use_cpp_optimization.html","id":null,"dir":"Reference","previous_headings":"","what":"Use optimized C++ functions when available — use_cpp_optimization","title":"Use optimized C++ functions when available — use_cpp_optimization","text":"file contains wrapper functions automatically use optimized C++ implementations available, falling back R implementations needed.","code":""},{"path":"https://netify-dev.github.io/lame/reference/use_cpp_optimization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use optimized C++ functions when available — use_cpp_optimization","text":"","code":"use_cpp_optimization()"},{"path":"https://netify-dev.github.io/lame/reference/uv_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize multiplicative effects (latent factors) from AME models — uv_plot","title":"Visualize multiplicative effects (latent factors) from AME models — uv_plot","text":"Creates two-dimensional visualization multiplicative effects (U V) AME LAME model. latent factors capture network structure beyond explained covariates additive effects, including clustering, transitivity, higher-order dependencies.","code":""},{"path":"https://netify-dev.github.io/lame/reference/uv_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize multiplicative effects (latent factors) from AME models — uv_plot","text":"","code":"uv_plot(   fit = NULL,   Y = NULL,   U = NULL,   V = NULL,   row.names = NULL,   col.names = NULL,   layout = c(\"circle\", \"biplot\"),   vscale = 0.8,   show.edges = FALSE,   edge.alpha = 0.3,   node.size = 3,   label.nodes = TRUE,   label.size = 3,   colors = NULL,   title = NULL,   time_point = NULL,   plot_type = c(\"snapshot\", \"trajectory\", \"faceted\"),   show_arrows = TRUE )"},{"path":"https://netify-dev.github.io/lame/reference/uv_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize multiplicative effects (latent factors) from AME models — uv_plot","text":"fit object class \"ame\" \"lame\" containing multiplicative effects, network matrix Y U V provided separately Y Network matrix (needed fit provided) U Matrix sender latent factors (extracted fit provided) V Matrix receiver latent factors (extracted fit provided) row.names Names row nodes (defaults rownames Y U) col.names Names column nodes (defaults colnames Y V) layout Character string specifying layout: \"circle\" (default) \"biplot\" vscale Scaling factor V positions relative U (default 0.8) show.edges Logical; TRUE, show network edges (default FALSE) edge.alpha Transparency edges (default 0.3) node.size Size nodes, \"degree\" scale degree (default 3) label.nodes Logical; TRUE, show node labels (default TRUE) label.size Size node labels (default 3) colors Optional vector colors nodes (e.g., communities) title Optional title plot time_point dynamic UV, time point plot (default: last). Can numeric index \"average\" time-averaged positions plot_type dynamic UV: \"snapshot\" (single time), \"trajectory\" (evolution), \"faceted\" (grid time points). static UV, ignored. show_arrows trajectory plots, whether show directional arrows","code":""},{"path":"https://netify-dev.github.io/lame/reference/uv_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize multiplicative effects (latent factors) from AME models — uv_plot","text":"ggplot2 object can customized","code":""},{"path":"https://netify-dev.github.io/lame/reference/uv_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize multiplicative effects (latent factors) from AME models — uv_plot","text":"multiplicative effects AME models provide low-rank representation network structure latent factors: U matrix Sender-specific latent positions (row factors) V matrix Receiver-specific latent positions (column factors) UV' product Captures dyad-specific effects beyond additive terms visualization can show: Circular layout Default layout placing nodes circle latent positions shown deviations Biplot layout Shows U V positions directly latent space Network overlay Optional display actual network ties Interpretation: Nodes close together latent space tend similar connection patterns distance sender position (U) receiver position (V) relates likelihood tie Clustering latent space indicates community structure","code":""},{"path":"https://netify-dev.github.io/lame/reference/uv_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize multiplicative effects (latent factors) from AME models — uv_plot","text":"Cassy Dorff, Shahryar Minhas, Tosin Salau","code":""},{"path":"https://netify-dev.github.io/lame/reference/uv_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize multiplicative effects (latent factors) from AME models — uv_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Fit an AME model with multiplicative effects fit <- ame(Y, X, R = 2)  # Basic visualization uv_plot(fit)  # Show network edges uv_plot(fit, show.edges = TRUE)  # Use biplot layout uv_plot(fit, layout = \"biplot\")  # Color by known communities uv_plot(fit, colors = community_membership) } # }"},{"path":"https://netify-dev.github.io/lame/reference/zscores.html","id":null,"dir":"Reference","previous_headings":"","what":"rank-based z-scores — zscores","title":"rank-based z-scores — zscores","text":"Computes normal scores corresponding ranks data vector","code":""},{"path":"https://netify-dev.github.io/lame/reference/zscores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rank-based z-scores — zscores","text":"","code":"zscores(y)"},{"path":"https://netify-dev.github.io/lame/reference/zscores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rank-based z-scores — zscores","text":"y numeric vector","code":""},{"path":"https://netify-dev.github.io/lame/reference/zscores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rank-based z-scores — zscores","text":"numeric vector","code":""},{"path":"https://netify-dev.github.io/lame/reference/zscores.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rank-based z-scores — zscores","text":"Peter Hoff","code":""},{"path":[]},{"path":[]},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"dynamic-effects-modeling-0-10","dir":"Changelog","previous_headings":"Major New Features","what":"Dynamic Effects Modeling","title":"lame 0.10","text":"Latent positions evolve via AR(1) processes: U_{t} = ρ_uv * U_{t-1} + ε_t Captures evolving community structure homophily patterns Based Sewell & Chen (2015, JASA) Durante & Dunson (2014, Biometrika) Sender/receiver effects evolve via AR(1) processes: a_{t} = ρ_ab * a_{t-1} + ε_t Models changing individual activity levels popularity time Efficient C++ implementation src/dynamic_additive_effects.cpp","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"performance-improvements-0-10","dir":"Changelog","previous_headings":"Major New Features","what":"Performance Improvements","title":"lame 0.10","text":"~70% memory efficiency improvement dynamic effects 30-50% faster sampling temporal updates Forward-filtering backward-sampling (FFBS) algorithm inference","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"visualization-0-10","dir":"Changelog","previous_headings":"Major New Features","what":"Visualization","title":"lame 0.10","text":"Automatically detects effect type model output New plot types: “trajectory”, “snapshot”, “faceted”, “ribbon” Time-point selection actor filtering options Trajectory visualization temporal evolution Faceted plots multiple time points Arrow styling directed networks","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"cli-integration-0-10","dir":"Changelog","previous_headings":"Major New Features","what":"CLI Integration","title":"lame 0.10","text":"Formatting cli::cli_text(), cli::cli_alert_success() Progress bars cli::cli_progress_bar() Colored output via crayon integration Structured tables pillar package","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"documentation-0-10","dir":"Changelog","previous_headings":"","what":"Documentation","title":"lame 0.10","text":"Parameter documentation dynamic effects Added theoretical background references function documentation New vignette: “Dynamic Effects Longitudinal AME Models” Mathematical details implementation notes @details sections","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"prior-specification-0-10","dir":"Changelog","previous_headings":"","what":"Prior Specification","title":"lame 0.10","text":"rho_uv_mean, rho_uv_sd: Control temporal persistence multiplicative effects rho_ab_mean, rho_ab_sd: Control temporal persistence additive effects sigma_uv_shape, sigma_uv_scale: Innovation variance multiplicative effects sigma_ab_shape, sigma_ab_scale: Innovation variance additive effects","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"bug-fixes-0-10","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"lame 0.10","text":"Fixed UVPS array dimension initialization proper temporal indexing Corrected array_to_list subscript errors dynamic effect handling Resolved CLI progress bar syntax issues environment parameters Fixed dimension checks plotting functions 3D effect arrays","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"internal-changes-0-10","dir":"Changelog","previous_headings":"","what":"Internal Changes","title":"lame 0.10","text":"Added sample_dynamic_ab_cpp() efficient C++ sampling Implemented sample_rho_ab_cpp() sample_sigma_ab_cpp() parameter updates Created unified rSab_fc() function covariance updates Removed deprecated ab_plot_dynamic.R uv_plot_dynamic.R files","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"dependencies-0-10","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"lame 0.10","text":"Added required packages: cli, crayon, progress, pillar Updated Rcpp RcppArmadillo LinkingTo specifications Added gganimate Suggests trajectory animations","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"breaking-changes-0-10","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"lame 0.10","text":"None - package maintains backward compatibility existing amen/lame code","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"deprecated-0-10","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"lame 0.10","text":"Separate ab_plot_dynamic() uv_plot_dynamic() functions (functionality merged main plotting functions)","code":""},{"path":"https://netify-dev.github.io/lame/news/index.html","id":"known-issues-0-10","dir":"Changelog","previous_headings":"","what":"Known Issues","title":"lame 0.10","text":"Dynamic models require longer burn-(≥1000) samples (≥20000) convergence Effective sample sizes typically lower due temporal correlation Memory usage scales O(nRT) dynamic_uv, O(n*T) dynamic_ab","code":""}]
